# Passport Photo Generator - Database Setup Script for Windows
# Run with: powershell -ExecutionPolicy Bypass -File setup-database.ps1

Write-Host "üöÄ Passport Photo Generator - Database Setup" -ForegroundColor Green
Write-Host "===========================================" -ForegroundColor Green
Write-Host ""

Write-Host "This application requires a PostgreSQL database from Neon.tech" -ForegroundColor Yellow
Write-Host "Follow these steps to get your DATABASE_URL:" -ForegroundColor Yellow
Write-Host ""

Write-Host "1. Go to https://neon.tech and create a free account" -ForegroundColor Cyan
Write-Host "2. Create a new database project" -ForegroundColor Cyan
Write-Host "3. Go to your project dashboard" -ForegroundColor Cyan
Write-Host "4. Click on 'Connection Details' or 'Connect'" -ForegroundColor Cyan
Write-Host "5. Copy the connection string (starts with postgresql://...)" -ForegroundColor Cyan
Write-Host "6. Make sure to enable the database endpoint in Settings > Compute" -ForegroundColor Cyan
Write-Host ""

# Check if .secrets file exists
$secretsPath = Join-Path $PWD ".secrets"

if (Test-Path $secretsPath) {
    $replace = Read-Host "A .secrets file already exists. Do you want to replace it? (y/N)"
    if ($replace -ne "y" -and $replace -ne "yes") {
        Write-Host "Setup cancelled. Existing .secrets file preserved." -ForegroundColor Yellow
        exit
    }
}

do {
    $databaseUrl = Read-Host "Enter your DATABASE_URL (paste the connection string from Neon)"
    
    if ([string]::IsNullOrWhiteSpace($databaseUrl)) {
        Write-Host "‚ùå DATABASE_URL cannot be empty" -ForegroundColor Red
        continue
    }
    
    if (-not $databaseUrl.StartsWith("postgresql://")) {
        Write-Host "‚ùå DATABASE_URL should start with postgresql://" -ForegroundColor Red
        continue
    }
    
    try {
        [System.Uri]$uri = $databaseUrl
        break
    }
    catch {
        Write-Host "‚ùå Invalid URL format" -ForegroundColor Red
        continue
    }
} while ($true)

# Generate random session secret
$sessionSecret = [System.Convert]::ToBase64String([System.Security.Cryptography.RNGCryptoServiceProvider]::new().GetBytes(64))

# Create .secrets file content
$secretsContent = @"
# Passport Photo Generator Secrets
# Auto-generated by setup script

DATABASE_URL=$databaseUrl
SESSION_SECRET=$sessionSecret

# Add optional API keys below:
# REMOVE_BG_API_KEY_1=your_api_key_here
# GOOGLE_CLIENT_ID=your_google_client_id
# GOOGLE_CLIENT_SECRET=your_google_client_secret
"@

# Write .secrets file
$secretsContent | Out-File -FilePath $secretsPath -Encoding UTF8

Write-Host ""
Write-Host "‚úÖ Created .secrets file with your DATABASE_URL" -ForegroundColor Green
Write-Host "‚úÖ Generated random SESSION_SECRET" -ForegroundColor Green
Write-Host ""
Write-Host "You can now run: npm run dev" -ForegroundColor Green

# Also set environment variable for current session
$env:DATABASE_URL = $databaseUrl
Write-Host "‚úÖ Set DATABASE_URL for current PowerShell session" -ForegroundColor Green