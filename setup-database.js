#!/usr/bin/env node

/**
 * Database Setup Helper for Passport Photo Generator
 * 
 * This script helps you set up the DATABASE_URL for the application.
 * Run: node setup-database.js
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('🚀 Passport Photo Generator - Database Setup');
console.log('===========================================\n');

console.log('This application requires a PostgreSQL database from Neon.tech');
console.log('Follow these steps to get your DATABASE_URL:\n');

console.log('1. Go to https://neon.tech and create a free account');
console.log('2. Create a new database project');
console.log('3. Go to your project dashboard');
console.log('4. Click on "Connection Details" or "Connect"');
console.log('5. Copy the connection string (starts with postgresql://...)');
console.log('6. Make sure to enable the database endpoint in Settings > Compute\n');

function createSecretsFile(databaseUrl) {
  const secretsPath = path.join(process.cwd(), '.secrets');
  const content = `# Passport Photo Generator Secrets
# Auto-generated by setup script

DATABASE_URL=${databaseUrl}
SESSION_SECRET=${require('crypto').randomBytes(64).toString('hex')}

# Add optional API keys below:
# REMOVE_BG_API_KEY_1=your_api_key_here
# GOOGLE_CLIENT_ID=your_google_client_id
# GOOGLE_CLIENT_SECRET=your_google_client_secret
`;

  fs.writeFileSync(secretsPath, content);
  console.log('\n✅ Created .secrets file with your DATABASE_URL');
  console.log('✅ Generated random SESSION_SECRET');
  console.log('\nYou can now run: npm run dev');
}

function promptForDatabaseUrl() {
  rl.question('\nEnter your DATABASE_URL (paste the connection string from Neon): ', (answer) => {
    if (!answer.trim()) {
      console.log('❌ DATABASE_URL cannot be empty');
      promptForDatabaseUrl();
      return;
    }

    if (!answer.startsWith('postgresql://')) {
      console.log('❌ DATABASE_URL should start with postgresql://');
      promptForDatabaseUrl();
      return;
    }

    try {
      new URL(answer); // Validate URL format
      createSecretsFile(answer.trim());
      rl.close();
    } catch (error) {
      console.log('❌ Invalid URL format');
      promptForDatabaseUrl();
    }
  });
}

// Check if .secrets file already exists
const secretsPath = path.join(process.cwd(), '.secrets');
if (fs.existsSync(secretsPath)) {
  rl.question('A .secrets file already exists. Do you want to replace it? (y/N): ', (answer) => {
    if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
      promptForDatabaseUrl();
    } else {
      console.log('Setup cancelled. Existing .secrets file preserved.');
      rl.close();
    }
  });
} else {
  promptForDatabaseUrl();
}