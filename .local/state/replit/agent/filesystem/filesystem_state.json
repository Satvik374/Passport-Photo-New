{"file_contents":{"server/googleAuth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport { storage } from \"./storage\";\nimport { secretsManager } from \"./secretsManager\";\n\n// Force reload secrets to ensure Google OAuth credentials are available\nsecretsManager.initializeWithDefaults();\n\n// Check for Google OAuth credentials from both secrets and environment\nconst googleClientId = secretsManager.getSecret('GOOGLE_CLIENT_ID') || process.env.GOOGLE_CLIENT_ID;\nconst googleClientSecret = secretsManager.getSecret('GOOGLE_CLIENT_SECRET') || process.env.GOOGLE_CLIENT_SECRET;\n\nconst hasGoogleAuth = googleClientId && googleClientSecret;\n\nif (hasGoogleAuth) {\n  console.log('‚úÖ Google OAuth credentials found - Google authentication enabled');\n  console.log('   Client ID:', googleClientId ? 'configured' : 'missing');\n  console.log('   Client Secret:', googleClientSecret ? 'configured' : 'missing');\n} else {\n  console.log('‚ÑπÔ∏è Google OAuth credentials not found - Google authentication will be disabled');\n  console.log('   Client ID from env:', !!process.env.GOOGLE_CLIENT_ID);\n  console.log('   Client Secret from env:', !!process.env.GOOGLE_CLIENT_SECRET);\n}\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  \n  return session({\n    secret: secretsManager.getSecret('SESSION_SECRET') || process.env.SESSION_SECRET || 'fallback-secret-key',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false,\n      maxAge: sessionTtl,\n      sameSite: 'lax',\n    },\n  });\n}\n\nexport async function setupGoogleAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Set up Passport serialization for all authentication types\n  passport.serializeUser((user: any, done) => {\n    // Handle both regular users and guest users\n    if (user && user.id) {\n      done(null, user.id);\n    } else {\n      console.error('User serialization failed - no ID:', user);\n      done(new Error('User object must have an id property'), null);\n    }\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      // Try to get user from database first (works for both guest and regular users)\n      const user = await storage.getUser(id);\n      if (user) {\n        return done(null, user);\n      }\n\n      // If guest user not found in database (legacy sessions), create and save them\n      if (id.startsWith('guest_')) {\n        console.log('Creating missing guest user in database:', id);\n        try {\n          const guestUserData = {\n            id,\n            email: null,\n            firstName: \"Guest\",\n            lastName: \"User\",\n            profileImageUrl: null,\n            isGuest: true,\n            authProvider: 'guest' as const,\n            isEmailVerified: false,\n            passwordHash: null\n          };\n          \n          const guestUser = await storage.createUser(guestUserData);\n          return done(null, guestUser);\n        } catch (createError) {\n          console.error('Failed to create guest user:', createError);\n          // Return a session-only guest user as fallback\n          const fallbackGuestUser = {\n            id,\n            email: null,\n            firstName: \"Guest\",\n            lastName: \"User\",\n            profileImageUrl: null,\n            isGuest: true\n          };\n          return done(null, fallbackGuestUser);\n        }\n      }\n\n      // User not found\n      done(null, null);\n    } catch (error) {\n      console.error('Deserialization error:', error);\n      done(error, null);\n    }\n  });\n\n  // Only configure Google OAuth strategy if credentials are available\n  if (hasGoogleAuth) {\n    // Auto-detect current Replit URL from environment\n    let replitAppUrl = secretsManager.getSecret('REPLIT_APP_URL');\n    \n    if (!replitAppUrl) {\n      // Try to detect from REPLIT_DOMAINS environment variable\n      const replitDomains = process.env.REPLIT_DOMAINS;\n      if (replitDomains) {\n        // REPLIT_DOMAINS can contain multiple domains, use the first one\n        const domain = replitDomains.split(',')[0].trim();\n        replitAppUrl = `https://${domain}`;\n        console.log('üîß Auto-detected Replit URL:', replitAppUrl);\n        // Save the detected URL for future use\n        secretsManager.setSecret('REPLIT_APP_URL', replitAppUrl);\n      } else {\n        // Fallback URL (this should rarely be used)\n        replitAppUrl = 'https://627846c6-9a01-430d-ad44-d2681f586ed6-00-3fa36lqk65xc4.pike.replit.dev';\n        console.log('‚ö†Ô∏è Using fallback Replit URL:', replitAppUrl);\n      }\n    }\n    \n    passport.use(new GoogleStrategy({\n      clientID: googleClientId!,\n      clientSecret: googleClientSecret!,\n      callbackURL: `${replitAppUrl}/auth/google/callback`\n    }, async (accessToken: string, refreshToken: string, profile: any, done: any) => {\n    try {\n      const email = profile.emails?.[0]?.value;\n      if (!email) {\n        return done(new Error('No email found in Google profile'), null);\n      }\n\n      // Check if user already exists with this email\n      let user = await storage.getUserByEmail(email);\n      \n      if (user) {\n        // User exists - update their profile with Google data and change auth provider\n        user = await storage.updateUser(user.id, {\n          firstName: profile.name?.givenName || user.firstName,\n          lastName: profile.name?.familyName || user.lastName,\n          profileImageUrl: profile.photos?.[0]?.value || user.profileImageUrl,\n          authProvider: 'google'\n        });\n        console.log('‚úÖ Existing user logged in via Google:', user.email);\n      } else {\n        // Create new user with proper UUID\n        const userData = {\n          email: email,\n          firstName: profile.name?.givenName || 'User',\n          lastName: profile.name?.familyName || '',\n          profileImageUrl: profile.photos?.[0]?.value || null,\n          isGuest: false,\n          authProvider: 'google' as const,\n          isEmailVerified: true, // Google emails are pre-verified\n          passwordHash: null\n        };\n\n        user = await storage.createUser(userData);\n        console.log('‚úÖ New user created via Google:', user.email);\n      }\n      \n      return done(null, { \n        ...user,\n        accessToken,\n        refreshToken \n      });\n    } catch (error) {\n      console.error('Google auth error:', error);\n      return done(error, null);\n    }\n  }));\n\n    // Google OAuth routes (only if Google Auth is enabled)\n    app.get(\"/api/login\", \n      passport.authenticate(\"google\", { \n        scope: [\"profile\", \"email\"] \n      })\n    );\n\n    app.get(\"/auth/google/callback\",\n      passport.authenticate(\"google\", { \n        failureRedirect: \"/?error=auth_failed\" \n      }),\n      (req, res) => {\n        // Successful authentication, redirect to home\n        res.redirect(\"/\");\n      }\n    );\n  } else {\n    // Fallback routes when Google Auth is disabled\n    app.get(\"/api/login\", (req, res) => {\n      res.status(503).json({ \n        message: \"Google authentication is not configured\",\n        error: \"GOOGLE_AUTH_DISABLED\"\n      });\n    });\n  }\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        console.error('Logout error:', err);\n      }\n      res.redirect(\"/\");\n    });\n  });\n\n  // Guest login endpoint\n  app.post(\"/api/login/guest\", async (req, res) => {\n    try {\n      // Create a guest user and save to database\n      const guestId = `guest_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const guestUserData = {\n        id: guestId,\n        email: `${guestId}@guest.local`, // Use unique email to avoid constraint violation\n        firstName: \"Guest\",\n        lastName: \"User\",\n        profileImageUrl: null,\n        isGuest: true,\n        authProvider: 'guest' as const,\n        isEmailVerified: false,\n        passwordHash: null\n      };\n\n      // Save guest user to database\n      const guestUser = await storage.createUser(guestUserData);\n      console.log('Guest user created in database:', guestUser.id);\n\n      req.login(guestUser, (err) => {\n        if (err) {\n          console.error('Guest login error:', err);\n          return res.status(500).json({ message: \"Guest login failed\" });\n        }\n        console.log('Guest login successful, session established for:', guestUser.id);\n        res.json({ success: true, user: guestUser });\n      });\n    } catch (error) {\n      console.error('Guest user creation error:', error);\n      res.status(500).json({ message: \"Guest login failed\" });\n    }\n  });\n}\n\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  console.log('isAuthenticated check:', {\n    isAuthenticated: req.isAuthenticated(),\n    hasUser: !!req.user,\n    userId: (req.user as any)?.id,\n    sessionID: req.sessionID\n  });\n  \n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n};","size_bytes":9064},"client/src/types/global.d.ts":{"content":"declare global {\n  interface Window {\n    adsbygoogle?: unknown[];\n  }\n  var adsbygoogle: unknown[] | undefined;\n}\n\nexport {};\n\n\n","size_bytes":129},"server/initializeSecrets.ts":{"content":"import { secretsManager } from './secretsManager';\n\n/**\n * Initialize secrets on application startup\n * This script runs before the main application starts\n */\nexport function initializeSecrets(): boolean {\n  console.log('üîê Initializing application secrets...');\n  \n  try {\n    // Initialize with default values\n    secretsManager.initializeWithDefaults();\n    \n    // Get summary of current secrets status\n    const summary = secretsManager.getSecretsSummary();\n    console.log(`üìä Secrets Status: ${summary.configured.length}/${summary.total} configured`);\n    \n    // Validate all secrets\n    const validation = secretsManager.validateSecrets();\n    \n    if (validation.valid) {\n      console.log('‚úÖ All required secrets are properly configured');\n      \n      // Show configured secrets (without values)\n      if (summary.configured.length > 0) {\n        console.log('üìã Configured secrets:', summary.configured.join(', '));\n      }\n      \n      return true;\n    } else {\n      console.error('‚ùå Secret validation failed:');\n      validation.errors.forEach(error => console.error(`  ‚Ä¢ ${error}`));\n      \n      console.log('\\n' + secretsManager.generateSetupInstructions());\n      \n      return false;\n    }\n  } catch (error) {\n    console.error('üí• Failed to initialize secrets:', error);\n    return false;\n  }\n}\n\n/**\n * Auto-setup secrets for first-time users\n * This creates default values and guides users through setup\n */\nexport function autoSetupSecrets(): void {\n  console.log('üöÄ First-time setup detected - configuring default secrets...');\n  \n  // Check if DATABASE_URL is available from Replit environment\n  if (process.env.DATABASE_URL && !secretsManager.hasSecret('DATABASE_URL')) {\n    secretsManager.setSecret('DATABASE_URL', process.env.DATABASE_URL);\n    console.log('‚úÖ DATABASE_URL automatically configured from Replit environment');\n  }\n  \n  // Set the correct Replit app URL based on current workspace\n  let correctReplitUrl = process.env.REPLIT_URL;\n  if (!correctReplitUrl && process.env.REPL_OWNER && process.env.REPL_SLUG) {\n    // Generate URL from workspace info\n    correctReplitUrl = `https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co`;\n  }\n  if (!correctReplitUrl) {\n    // Fallback to the original URL if nothing else works\n    correctReplitUrl = 'https://627846c6-9a01-430d-ad44-d2681f586ed6-00-3fa36lqk65xc4.pike.replit.dev';\n  }\n  \n  if (!secretsManager.hasSecret('REPLIT_APP_URL')) {\n    secretsManager.setSecret('REPLIT_APP_URL', correctReplitUrl);\n    console.log('‚úÖ REPLIT_APP_URL configured:', correctReplitUrl);\n  }\n  \n  // Generate a random session secret if none exists\n  if (!secretsManager.hasSecret('SESSION_SECRET')) {\n    const sessionSecret = require('crypto').randomBytes(64).toString('hex');\n    secretsManager.setSecret('SESSION_SECRET', sessionSecret);\n    console.log('‚úÖ SESSION_SECRET automatically generated');\n  }\n\n  // Set up Remove.bg API keys if provided\n  const removeBgKeys = [\n    't36zpz3dQAYijdKLnCN9LGp7',\n    '16mnhbhR1Ri34KxCnt4ZyCaE',\n    'YZ9pEHwR2X2KSd9K3G3m6mqH',\n    'p3DEavB9wtFWzjZitGX2nMmd',\n    'TPKFjueBjHWs7cNfdWKGwERF',\n    'xppsCfXGDrkEyRiA6wEoPEXn',\n    'H7E6suyFrz3yMfS7YZi3vEXR',\n    'eqEa5sGDx4Bgs8B6RbcxNQZZ',\n    'dWLRwNHkSJ37Ra7ytJRssvRn',\n    'aThf5xv9VWGYc3HvepvfBrAd'\n  ];\n  \n  removeBgKeys.forEach((key, index) => {\n    const secretKey = `REMOVE_BG_API_KEY_${index + 1}`;\n    // Always update the keys to ensure they match the provided ones\n    secretsManager.setSecret(secretKey, key);\n    console.log(`‚úÖ ${secretKey} updated`);\n  });\n  \n  console.log('üìù Optional: Add SMTP email credentials for email verification:');\n  console.log('  ‚Ä¢ GMAIL_USER & GMAIL_APP_PASSWORD: For Gmail SMTP email service');\n}","size_bytes":3746},"server/dbApplySchema.ts":{"content":"import fs from 'fs';\nimport path from 'path';\nimport { pool } from './db';\n\nasync function main() {\n  const schemaPath = path.join(process.cwd(), 'sql', 'schema.sql');\n  if (!fs.existsSync(schemaPath)) {\n    console.error('schema.sql not found at', schemaPath);\n    process.exit(1);\n  }\n\n  const sql = fs.readFileSync(schemaPath, 'utf-8');\n  console.log('Applying SQL schema...');\n\n  const client = await pool.connect();\n  try {\n    await client.query('BEGIN');\n    await client.query(sql);\n    await client.query('COMMIT');\n    console.log('Schema applied successfully.');\n  } catch (err) {\n    await client.query('ROLLBACK');\n    console.error('Failed to apply schema:', err);\n    process.exitCode = 1;\n  } finally {\n    client.release();\n    await pool.end();\n  }\n}\n\nmain();\n\n\n","size_bytes":780},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"server/secretsManager.ts":{"content":"import fs from 'fs';\nimport path from 'path';\n\n// Define the secrets configuration\nexport interface SecretConfig {\n  key: string;\n  description: string;\n  required: boolean;\n  defaultValue?: string;\n  isUrl?: boolean;\n}\n\n// All required secrets for the application\nexport const REQUIRED_SECRETS: SecretConfig[] = [\n  {\n    key: 'DATABASE_URL',\n    description: 'PostgreSQL database connection URL',\n    required: true,\n    isUrl: true\n  },\n  {\n    key: 'REMOVE_BG_API_KEY_1',\n    description: 'Remove.bg API key #1 for background removal',\n    required: false\n  },\n  {\n    key: 'REMOVE_BG_API_KEY_2',\n    description: 'Remove.bg API key #2 for background removal',\n    required: false\n  },\n  {\n    key: 'REMOVE_BG_API_KEY_3',\n    description: 'Remove.bg API key #3 for background removal',\n    required: false\n  },\n  {\n    key: 'REMOVE_BG_API_KEY_4',\n    description: 'Remove.bg API key #4 for background removal',\n    required: false\n  },\n  {\n    key: 'REMOVE_BG_API_KEY_5',\n    description: 'Remove.bg API key #5 for background removal',\n    required: false\n  },\n  {\n    key: 'REMOVE_BG_API_KEY_6',\n    description: 'Remove.bg API key #6 for background removal',\n    required: false\n  },\n  {\n    key: 'REMOVE_BG_API_KEY_7',\n    description: 'Remove.bg API key #7 for background removal',\n    required: false\n  },\n  {\n    key: 'REMOVE_BG_API_KEY_8',\n    description: 'Remove.bg API key #8 for background removal',\n    required: false\n  },\n  {\n    key: 'REMOVE_BG_API_KEY_9',\n    description: 'Remove.bg API key #9 for background removal',\n    required: false\n  },\n  {\n    key: 'REMOVE_BG_API_KEY_10',\n    description: 'Remove.bg API key #10 for background removal',\n    required: false\n  },\n  {\n    key: 'SESSION_SECRET',\n    description: 'Secret key for session encryption',\n    required: true,\n    defaultValue: 'dev-session-secret-change-in-production'\n  },\n  {\n    key: 'GOOGLE_CLIENT_ID',\n    description: 'Google OAuth client ID for authentication',\n    required: false\n  },\n  {\n    key: 'GOOGLE_CLIENT_SECRET',\n    description: 'Google OAuth client secret for authentication',\n    required: false\n  },\n  {\n    key: 'REPLIT_APP_URL',\n    description: 'The Replit app URL for OAuth redirects',\n    required: false\n  },\n\n  {\n    key: 'GMAIL_USER',\n    description: 'Gmail address for sending verification emails',\n    required: false\n  },\n  {\n    key: 'GMAIL_APP_PASSWORD',\n    description: 'Gmail app password for SMTP authentication',\n    required: false\n  },\n  {\n    key: 'SMTP_HOST',\n    description: 'SMTP server hostname for email sending',\n    required: false\n  },\n  {\n    key: 'SMTP_PORT',\n    description: 'SMTP server port (usually 587 or 465)',\n    required: false\n  },\n  {\n    key: 'SMTP_USER',\n    description: 'SMTP username for authentication',\n    required: false\n  },\n  {\n    key: 'SMTP_PASS',\n    description: 'SMTP password for authentication',\n    required: false\n  }\n];\n\nexport class SecretsManager {\n  private secretsFilePath: string;\n  private secrets: Map<string, string> = new Map();\n\n  constructor() {\n    this.secretsFilePath = path.join(process.cwd(), '.secrets');\n    this.loadSecrets();\n  }\n\n  /**\n   * Load secrets from the .secrets file and environment variables\n   */\n  private loadSecrets(): void {\n    // First, load from environment variables (these take priority)\n    REQUIRED_SECRETS.forEach(config => {\n      const envValue = process.env[config.key];\n      if (envValue && envValue.trim() !== '') {\n        this.secrets.set(config.key, envValue.trim());\n      }\n    });\n\n    // Force check for Google OAuth credentials from Replit Secrets\n    if (process.env.GOOGLE_CLIENT_ID) {\n      this.secrets.set('GOOGLE_CLIENT_ID', process.env.GOOGLE_CLIENT_ID.trim());\n    }\n    if (process.env.GOOGLE_CLIENT_SECRET) {\n      this.secrets.set('GOOGLE_CLIENT_SECRET', process.env.GOOGLE_CLIENT_SECRET.trim());\n    }\n\n    // Also check for common Replit environment variables\n    const replitEnvMappings = [\n      { env: 'DATABASE_URL', secret: 'DATABASE_URL' },\n      { env: 'REPL_SLUG', secret: 'REPL_SLUG' },\n      { env: 'REPL_OWNER', secret: 'REPL_OWNER' }\n    ];\n\n    replitEnvMappings.forEach(({ env, secret }) => {\n      const value = process.env[env];\n      if (value && value.trim() !== '' && !this.secrets.has(secret)) {\n        this.secrets.set(secret, value.trim());\n      }\n    });\n\n    // Then, load from .secrets file if it exists\n    if (fs.existsSync(this.secretsFilePath)) {\n      try {\n        const fileContent = fs.readFileSync(this.secretsFilePath, 'utf-8');\n        const lines = fileContent.split('\\n').filter(line => line.trim() && !line.startsWith('#'));\n        \n        lines.forEach(line => {\n          const [key, ...valueParts] = line.split('=');\n          if (key && valueParts.length > 0) {\n            const value = valueParts.join('=').trim();\n            // Only use file value if not already set from environment\n            if (!this.secrets.has(key.trim())) {\n              this.secrets.set(key.trim(), value);\n            }\n          }\n        });\n      } catch (error) {\n        console.warn('Failed to read .secrets file:', error);\n      }\n    }\n  }\n\n  /**\n   * Save secrets to the .secrets file\n   */\n  private saveSecrets(): void {\n    try {\n      const content = [\n        '# Auto-generated secrets file',\n        '# This file contains sensitive information - never commit to version control',\n        '# Format: KEY=value',\n        '',\n        ...Array.from(this.secrets.entries()).map(([key, value]) => `${key}=${value}`)\n      ].join('\\n');\n      \n      fs.writeFileSync(this.secretsFilePath, content, 'utf-8');\n      \n      // Ensure .secrets is in .gitignore\n      this.ensureGitIgnore();\n    } catch (error) {\n      console.error('Failed to save .secrets file:', error);\n    }\n  }\n\n  /**\n   * Ensure .secrets file is in .gitignore\n   */\n  private ensureGitIgnore(): void {\n    const gitignorePath = path.join(process.cwd(), '.gitignore');\n    const secretsEntry = '.secrets';\n    \n    try {\n      let gitignoreContent = '';\n      if (fs.existsSync(gitignorePath)) {\n        gitignoreContent = fs.readFileSync(gitignorePath, 'utf-8');\n      }\n      \n      if (!gitignoreContent.includes(secretsEntry)) {\n        gitignoreContent += gitignoreContent.endsWith('\\n') ? '' : '\\n';\n        gitignoreContent += `${secretsEntry}\\n`;\n        fs.writeFileSync(gitignorePath, gitignoreContent, 'utf-8');\n      }\n    } catch (error) {\n      console.warn('Failed to update .gitignore:', error);\n    }\n  }\n\n  /**\n   * Set a secret value\n   */\n  setSecret(key: string, value: string): void {\n    this.secrets.set(key, value);\n    this.saveSecrets();\n    \n    // Also set in current process environment\n    process.env[key] = value;\n  }\n\n  /**\n   * Get a secret value\n   */\n  getSecret(key: string): string | undefined {\n    return this.secrets.get(key);\n  }\n\n  /**\n   * Check if a secret exists and has a value\n   */\n  hasSecret(key: string): boolean {\n    const value = this.secrets.get(key);\n    return value !== undefined && value !== '';\n  }\n\n  /**\n   * Get all missing required secrets\n   */\n  getMissingRequiredSecrets(): SecretConfig[] {\n    return REQUIRED_SECRETS.filter(config => {\n      if (!config.required) return false;\n      \n      const hasValue = this.hasSecret(config.key);\n      const hasDefault = config.defaultValue !== undefined;\n      \n      return !hasValue && !hasDefault;\n    });\n  }\n\n  /**\n   * Initialize secrets with default values where applicable\n   */\n  initializeWithDefaults(): void {\n    let updated = false;\n    \n    REQUIRED_SECRETS.forEach(config => {\n      if (config.defaultValue && !this.hasSecret(config.key)) {\n        this.secrets.set(config.key, config.defaultValue);\n        process.env[config.key] = config.defaultValue;\n        updated = true;\n        console.log(`‚úì Set default value for ${config.key}`);\n      }\n    });\n    \n    if (updated) {\n      this.saveSecrets();\n    }\n  }\n\n  /**\n   * Validate all secrets and provide helpful error messages\n   */\n  validateSecrets(): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n    \n    REQUIRED_SECRETS.forEach(config => {\n      if (config.required && !this.hasSecret(config.key) && !config.defaultValue) {\n        errors.push(`Missing required secret: ${config.key} - ${config.description}`);\n      }\n      \n      // Validate URL format if specified\n      if (config.isUrl && this.hasSecret(config.key)) {\n        const value = this.getSecret(config.key)!;\n        try {\n          new URL(value);\n        } catch {\n          errors.push(`Invalid URL format for ${config.key}: ${value}`);\n        }\n      }\n    });\n    \n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Get a summary of all configured secrets (without values)\n   */\n  getSecretsSummary(): { configured: string[]; missing: string[]; total: number } {\n    const configured: string[] = [];\n    const missing: string[] = [];\n    \n    REQUIRED_SECRETS.forEach(config => {\n      if (this.hasSecret(config.key) || config.defaultValue) {\n        configured.push(config.key);\n      } else {\n        missing.push(config.key);\n      }\n    });\n    \n    return {\n      configured,\n      missing,\n      total: REQUIRED_SECRETS.length\n    };\n  }\n\n  /**\n   * Generate environment setup instructions\n   */\n  generateSetupInstructions(): string {\n    const missing = this.getMissingRequiredSecrets();\n    \n    if (missing.length === 0) {\n      return '‚úÖ All required secrets are configured!';\n    }\n    \n    const instructions = [\n      '‚ö†Ô∏è  Missing Required Secrets:',\n      '',\n      ...missing.map(config => `‚Ä¢ ${config.key}: ${config.description}`),\n      '',\n      'To set these secrets:',\n      '1. Go to the Secrets tab in your Replit environment',\n      '2. Add each required secret with its value',\n      '3. Restart your application',\n      '',\n      'Or create a .secrets file in your project root with:',\n      ...missing.map(config => `${config.key}=your_value_here`),\n    ];\n    \n    return instructions.join('\\n');\n  }\n}\n\n// Global instance\nexport const secretsManager = new SecretsManager();","size_bytes":10088},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2.5 w-full grow overflow-hidden rounded-full bg-secondary/50 shadow-inner\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-gradient-primary transition-all\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-white dark:bg-card ring-offset-background shadow-md transition-all hover:scale-110 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:scale-110 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1177},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/contexts/ThemeContext.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Get theme from localStorage or default to light\n    const savedTheme = localStorage.getItem('theme') as Theme;\n    return savedTheme || 'light';\n  });\n\n  useEffect(() => {\n    // Apply theme to document element\n    const root = document.documentElement;\n    if (theme === 'dark') {\n      root.classList.add('dark');\n    } else {\n      root.classList.remove('dark');\n    }\n    \n    // Save to localStorage\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}","size_bytes":1279},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/pages/privacy-policy.tsx":{"content":"import { Link } from \"wouter\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function PrivacyPolicy() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-muted\">\n      <div className=\"max-w-4xl mx-auto px-4 py-12\">\n        <Link href=\"/\">\n          <button \n            className=\"mb-8 flex items-center gap-2 text-muted-foreground hover:text-foreground transition-colors\"\n            data-testid=\"button-back-home\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Home\n          </button>\n        </Link>\n\n        <div className=\"bg-card rounded-lg shadow-lg p-8 md:p-12\">\n          <h1 className=\"text-4xl font-bold mb-2\" data-testid=\"text-privacy-title\">Privacy Policy</h1>\n          <p className=\"text-muted-foreground mb-8\">Last updated: {new Date().toLocaleDateString()}</p>\n\n          <div className=\"space-y-6 text-foreground\">\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">1. Information We Collect</h2>\n              <p className=\"mb-3\">\n                When you use Passport Photo Generator, we may collect the following information:\n              </p>\n              <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                <li>Account information (name, email address) when you sign up</li>\n                <li>Photos you upload to generate passport photos</li>\n                <li>Usage data and analytics to improve our service</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">2. How We Use Your Information</h2>\n              <p className=\"mb-3\">We use the collected information to:</p>\n              <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                <li>Process and generate your passport photos</li>\n                <li>Maintain and improve our services</li>\n                <li>Send you important updates about your account</li>\n                <li>Respond to your inquiries and support requests</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">3. Photo Storage and Security</h2>\n              <p className=\"mb-3\">\n                Your photos are processed securely and stored only for the duration necessary to provide our services. \n                We implement industry-standard security measures to protect your data. Photos are automatically deleted \n                after processing unless you choose to save them to your account.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">4. Third-Party Services</h2>\n              <p className=\"mb-3\">\n                We may use third-party services for authentication (Google OAuth) and image processing. These services \n                have their own privacy policies and we encourage you to review them.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">5. Data Sharing</h2>\n              <p className=\"mb-3\">\n                We do not sell, trade, or rent your personal information to third parties. We may share data only when:\n              </p>\n              <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                <li>Required by law or legal process</li>\n                <li>Necessary to protect our rights or safety</li>\n                <li>With your explicit consent</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">6. Your Rights</h2>\n              <p className=\"mb-3\">You have the right to:</p>\n              <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                <li>Access your personal data</li>\n                <li>Request correction of inaccurate data</li>\n                <li>Request deletion of your data</li>\n                <li>Opt-out of marketing communications</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">7. Cookies</h2>\n              <p className=\"mb-3\">\n                We use cookies and similar technologies to maintain your session and improve user experience. \n                You can control cookie settings through your browser preferences.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">8. Children's Privacy</h2>\n              <p className=\"mb-3\">\n                Our service is not intended for children under 13 years of age. We do not knowingly collect \n                personal information from children under 13.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">9. Changes to This Policy</h2>\n              <p className=\"mb-3\">\n                We may update this privacy policy from time to time. We will notify you of any changes by \n                posting the new privacy policy on this page and updating the \"Last updated\" date.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">10. Contact Us</h2>\n              <p className=\"mb-3\">\n                If you have any questions about this Privacy Policy, please contact us through our support channels.\n              </p>\n            </section>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5544},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"setup-database.js":{"content":"#!/usr/bin/env node\n\n/**\n * Database Setup Helper for Passport Photo Generator\n * \n * This script helps you set up the DATABASE_URL for the application.\n * Run: node setup-database.js\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst readline = require('readline');\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nconsole.log('üöÄ Passport Photo Generator - Database Setup');\nconsole.log('===========================================\\n');\n\nconsole.log('This application requires a PostgreSQL database from Neon.tech');\nconsole.log('Follow these steps to get your DATABASE_URL:\\n');\n\nconsole.log('1. Go to https://neon.tech and create a free account');\nconsole.log('2. Create a new database project');\nconsole.log('3. Go to your project dashboard');\nconsole.log('4. Click on \"Connection Details\" or \"Connect\"');\nconsole.log('5. Copy the connection string (starts with postgresql://...)');\nconsole.log('6. Make sure to enable the database endpoint in Settings > Compute\\n');\n\nfunction createSecretsFile(databaseUrl) {\n  const secretsPath = path.join(process.cwd(), '.secrets');\n  const content = `# Passport Photo Generator Secrets\n# Auto-generated by setup script\n\nDATABASE_URL=${databaseUrl}\nSESSION_SECRET=${require('crypto').randomBytes(64).toString('hex')}\n\n# Add optional API keys below:\n# REMOVE_BG_API_KEY_1=your_api_key_here\n# GOOGLE_CLIENT_ID=your_google_client_id\n# GOOGLE_CLIENT_SECRET=your_google_client_secret\n`;\n\n  fs.writeFileSync(secretsPath, content);\n  console.log('\\n‚úÖ Created .secrets file with your DATABASE_URL');\n  console.log('‚úÖ Generated random SESSION_SECRET');\n  console.log('\\nYou can now run: npm run dev');\n}\n\nfunction promptForDatabaseUrl() {\n  rl.question('\\nEnter your DATABASE_URL (paste the connection string from Neon): ', (answer) => {\n    if (!answer.trim()) {\n      console.log('‚ùå DATABASE_URL cannot be empty');\n      promptForDatabaseUrl();\n      return;\n    }\n\n    if (!answer.startsWith('postgresql://')) {\n      console.log('‚ùå DATABASE_URL should start with postgresql://');\n      promptForDatabaseUrl();\n      return;\n    }\n\n    try {\n      new URL(answer); // Validate URL format\n      createSecretsFile(answer.trim());\n      rl.close();\n    } catch (error) {\n      console.log('‚ùå Invalid URL format');\n      promptForDatabaseUrl();\n    }\n  });\n}\n\n// Check if .secrets file already exists\nconst secretsPath = path.join(process.cwd(), '.secrets');\nif (fs.existsSync(secretsPath)) {\n  rl.question('A .secrets file already exists. Do you want to replace it? (y/N): ', (answer) => {\n    if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {\n      promptForDatabaseUrl();\n    } else {\n      console.log('Setup cancelled. Existing .secrets file preserved.');\n      rl.close();\n    }\n  });\n} else {\n  promptForDatabaseUrl();\n}","size_bytes":2852},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/pages/terms-of-service.tsx":{"content":"import { Link } from \"wouter\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function TermsOfService() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-muted\">\n      <div className=\"max-w-4xl mx-auto px-4 py-12\">\n        <Link href=\"/\">\n          <button \n            className=\"mb-8 flex items-center gap-2 text-muted-foreground hover:text-foreground transition-colors\"\n            data-testid=\"button-back-home\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Home\n          </button>\n        </Link>\n\n        <div className=\"bg-card rounded-lg shadow-lg p-8 md:p-12\">\n          <h1 className=\"text-4xl font-bold mb-2\" data-testid=\"text-terms-title\">Terms of Service</h1>\n          <p className=\"text-muted-foreground mb-8\">Last updated: {new Date().toLocaleDateString()}</p>\n\n          <div className=\"space-y-6 text-foreground\">\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">1. Acceptance of Terms</h2>\n              <p className=\"mb-3\">\n                By accessing and using Passport Photo Generator, you accept and agree to be bound by the terms \n                and provisions of this agreement. If you do not agree to these terms, please do not use our service.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">2. Description of Service</h2>\n              <p className=\"mb-3\">\n                Passport Photo Generator is an online tool that helps users create passport-compliant photos. \n                We provide image processing, background removal, and formatting services for various passport \n                and ID photo requirements.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">3. User Responsibilities</h2>\n              <p className=\"mb-3\">You agree to:</p>\n              <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                <li>Provide accurate and truthful information</li>\n                <li>Use the service only for lawful purposes</li>\n                <li>Not upload inappropriate, offensive, or copyrighted content</li>\n                <li>Maintain the security of your account credentials</li>\n                <li>Verify that generated photos meet official requirements before use</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">4. Photo Compliance</h2>\n              <p className=\"mb-3\">\n                While we strive to generate passport photos that meet official requirements, it is your responsibility \n                to verify that the final photo complies with the specific requirements of your country or issuing authority. \n                We are not responsible for rejected applications due to photo non-compliance.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">5. Intellectual Property</h2>\n              <p className=\"mb-3\">\n                You retain all rights to the photos you upload. By using our service, you grant us a limited license \n                to process and store your photos solely for the purpose of providing our services. We do not claim \n                ownership of your content.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">6. Service Availability</h2>\n              <p className=\"mb-3\">\n                We strive to maintain service availability but do not guarantee uninterrupted access. We reserve \n                the right to modify, suspend, or discontinue the service at any time without prior notice.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">7. Limitation of Liability</h2>\n              <p className=\"mb-3\">\n                Passport Photo Generator is provided \"as is\" without warranties of any kind. We are not liable for \n                any direct, indirect, incidental, or consequential damages arising from your use of the service, \n                including but not limited to rejected passport applications or lost data.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">8. Payment and Refunds</h2>\n              <p className=\"mb-3\">\n                If applicable, payment terms will be clearly stated before purchase. Refund policies, if any, \n                will be communicated at the time of transaction.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">9. Privacy</h2>\n              <p className=\"mb-3\">\n                Your use of our service is also governed by our Privacy Policy. Please review our Privacy Policy \n                to understand our practices regarding your personal information.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">10. Account Termination</h2>\n              <p className=\"mb-3\">\n                We reserve the right to terminate or suspend your account at our discretion if you violate these \n                terms or engage in activities harmful to our service or other users.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">11. Modifications to Terms</h2>\n              <p className=\"mb-3\">\n                We may modify these terms at any time. Changes will be effective immediately upon posting. \n                Your continued use of the service after changes constitutes acceptance of the modified terms.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">12. Governing Law</h2>\n              <p className=\"mb-3\">\n                These terms shall be governed by and construed in accordance with applicable laws, without \n                regard to conflict of law provisions.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-semibold mb-3\">13. Contact Information</h2>\n              <p className=\"mb-3\">\n                For questions regarding these Terms of Service, please contact us through our support channels.\n              </p>\n            </section>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6587},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"server/emailAuth.ts":{"content":"import bcrypt from 'bcryptjs';\nimport { randomUUID } from 'crypto';\nimport { storage } from './storage';\nimport { EmailService } from './emailService';\nimport { db } from './db';\nimport { pendingRegistrations } from '@shared/schema';\nimport { eq } from 'drizzle-orm';\nimport type { EmailSignup, EmailLogin, User } from '@shared/schema';\n\nexport class EmailAuthService {\n  // Hash password\n  static async hashPassword(password: string): Promise<string> {\n    const saltRounds = 12;\n    return bcrypt.hash(password, saltRounds);\n  }\n\n  // Verify password\n  static async verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n    return bcrypt.compare(password, hashedPassword);\n  }\n\n  // Register new user with email\n  static async registerUser(signupData: EmailSignup): Promise<{ success: boolean; message: string; userId?: string }> {\n    try {\n      // Check if user already exists (verified user)\n      const existingUser = await storage.getUserByEmail(signupData.email);\n      if (existingUser && existingUser.isEmailVerified) {\n        return { success: false, message: 'An account with this email already exists' };\n      }\n      \n      // If there's an unverified account, allow re-registration by deleting it\n      if (existingUser && !existingUser.isEmailVerified) {\n        // Delete the unverified user and any pending verification codes\n        await storage.updateUser(existingUser.id, { email: `deleted_${existingUser.id}@temp.com` });\n        console.log('Removed unverified account for re-registration:', signupData.email);\n      }\n\n      // Hash the password\n      const passwordHash = await this.hashPassword(signupData.password);\n\n      // Generate verification code\n      const verificationCode = EmailService.generateVerificationCode();\n      const expiresAt = new Date(Date.now() + 15 * 60 * 1000); // 15 minutes\n\n      // Store pending registration (NOT creating user account yet)\n      await storage.savePendingRegistration({\n        email: signupData.email,\n        firstName: signupData.firstName,\n        lastName: signupData.lastName,\n        passwordHash,\n        verificationCode,\n        expiresAt,\n      });\n\n      // Send verification email\n      const emailSent = await EmailService.sendVerificationEmail(signupData.email, verificationCode);\n      \n      if (!emailSent) {\n        return { success: false, message: 'Failed to send verification email. Please try again.' };\n      }\n\n      return { \n        success: true, \n        message: 'Please check your email for the verification code to complete registration.',\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      return { success: false, message: 'Registration failed. Please try again.' };\n    }\n  }\n\n  // Verify email with code\n  static async verifyEmail(email: string, code: string): Promise<{ success: boolean; message: string; user?: User }> {\n    try {\n      // Find valid pending registration\n      const pendingRegistration = await storage.getPendingRegistration(email, code);\n      if (!pendingRegistration) {\n        return { success: false, message: 'Invalid or expired verification code' };\n      }\n\n      // Create the actual user account now that email is verified\n      const user = await storage.createUser({\n        id: randomUUID(),\n        email: pendingRegistration.email,\n        firstName: pendingRegistration.firstName,\n        lastName: pendingRegistration.lastName,\n        passwordHash: pendingRegistration.passwordHash,\n        authProvider: 'email',\n        isEmailVerified: true, // Already verified\n        isGuest: false,\n      });\n\n      // Clean up pending registration\n      await storage.deletePendingRegistration(email);\n\n      // Send welcome email\n      await EmailService.sendWelcomeEmail(email, user.firstName || 'User');\n\n      return { \n        success: true, \n        message: 'Email verified successfully! Welcome to Passport Photo Maker.',\n        user \n      };\n    } catch (error) {\n      console.error('Email verification error:', error);\n      return { success: false, message: 'Verification failed. Please try again.' };\n    }\n  }\n\n  // Resend verification code\n  static async resendVerificationCode(email: string): Promise<{ success: boolean; message: string }> {\n    try {\n      // Check if there's a verified user with this email\n      const user = await storage.getUserByEmail(email);\n      if (user && user.isEmailVerified) {\n        return { success: false, message: 'This email is already verified' };\n      }\n\n      // Check if there's a pending registration\n      const existingPending = await storage.getPendingRegistration(email, ''); // Just to check if email exists in pending\n      if (!existingPending) {\n        // If no pending registration found, try with a dummy code to get any matching record\n        const [pendingReg] = await db.select().from(pendingRegistrations).where(eq(pendingRegistrations.email, email));\n        if (!pendingReg) {\n          return { success: false, message: 'No registration found for this email. Please sign up first.' };\n        }\n      }\n\n      // Generate new verification code and update the pending registration\n      const verificationCode = EmailService.generateVerificationCode();\n      const expiresAt = new Date(Date.now() + 15 * 60 * 1000); // 15 minutes\n\n      // Get the existing pending registration to preserve other data\n      const [existingReg] = await db.select().from(pendingRegistrations).where(eq(pendingRegistrations.email, email));\n      if (existingReg) {\n        await storage.savePendingRegistration({\n          email: existingReg.email,\n          firstName: existingReg.firstName,\n          lastName: existingReg.lastName,\n          passwordHash: existingReg.passwordHash,\n          verificationCode,\n          expiresAt,\n        });\n      }\n\n      // Send verification email\n      const emailSent = await EmailService.sendVerificationEmail(email, verificationCode);\n      \n      if (!emailSent) {\n        return { success: false, message: 'Failed to send verification email. Please try again.' };\n      }\n\n      return { \n        success: true, \n        message: 'New verification code sent! Please check your email.' \n      };\n    } catch (error) {\n      console.error('Resend verification error:', error);\n      return { success: false, message: 'Failed to resend verification code. Please try again.' };\n    }\n  }\n\n  // Login user\n  static async loginUser(loginData: EmailLogin): Promise<{ success: boolean; message: string; user?: User }> {\n    try {\n      console.log('Looking up user by email:', loginData.email);\n      \n      // Find user by email\n      const user = await storage.getUserByEmail(loginData.email);\n      console.log('User found:', !!user, user ? `ID: ${user.id}, Provider: ${user.authProvider}, Verified: ${user.isEmailVerified}` : 'none');\n      \n      if (!user) {\n        return { success: false, message: 'No account found with this email. Please sign up first.' };\n      }\n      \n      if (user.authProvider !== 'email') {\n        return { success: false, message: 'This email is registered with a different sign-in method.' };\n      }\n\n      // Check if email is verified\n      if (!user.isEmailVerified) {\n        return { success: false, message: 'Please verify your email before logging in. Check your inbox for the verification code.' };\n      }\n\n      // Verify password\n      if (!user.passwordHash) {\n        console.log('User has no password hash');\n        return { success: false, message: 'Invalid email or password' };\n      }\n\n      const passwordValid = await this.verifyPassword(loginData.password, user.passwordHash);\n      console.log('Password valid:', passwordValid);\n      \n      if (!passwordValid) {\n        return { success: false, message: 'Invalid email or password' };\n      }\n\n      return { \n        success: true, \n        message: 'Login successful!',\n        user \n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      return { success: false, message: 'Login failed. Please try again.' };\n    }\n  }\n\n  // Clean up expired verification codes (should be called periodically)\n  static async cleanupExpiredVerifications(): Promise<void> {\n    try {\n      await storage.deleteExpiredVerifications();\n    } catch (error) {\n      console.error('Cleanup error:', error);\n    }\n  }\n}","size_bytes":8337},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/85 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border-2 border-border/50 bg-background p-6 shadow-elevated duration-300 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-xl\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-lg opacity-70 ring-offset-background transition-all hover:opacity-100 hover:bg-accent/50 p-1.5 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3911},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"shared/schema.ts":{"content":"import { z } from \"zod\";\nimport { pgTable, text, integer, real, timestamp, json, varchar, jsonb, index, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { relations, sql } from \"drizzle-orm\";\n\n// Zod schemas for validation\nexport const photoSettingsSchema = z.object({\n  width: z.number().min(10).max(100).default(35),\n  height: z.number().min(10).max(150).default(45),\n  quantity: z.number().min(1).max(20).default(8),\n  layout: z.enum([\n    'auto', \n    'top-left', \n    'top-middle', \n    'top-right',\n    'middle-left', \n    'middle-middle', \n    'middle-right',\n    'down-left', \n    'down-middle', \n    'down-right'\n  ]).default('auto'),\n  spacing: z.number().min(0).max(20).default(5),\n  topMargin: z.number().min(5).max(50).default(10),\n});\n\n// Crop settings schema\nexport const cropSettingsSchema = z.object({\n  x: z.number().min(-100).max(100).default(0),\n  y: z.number().min(-100).max(100).default(0),\n  width: z.number().min(20).max(100).default(100),\n  height: z.number().min(20).max(100).default(100),\n  scale: z.number().min(0.1).max(5).default(1),\n  rotation: z.number().min(-180).max(180).default(0)\n});\n\n// Background settings schema\nexport const backgroundSettingsSchema = z.object({\n  removeBackground: z.boolean().default(false),\n  backgroundColor: z.string().default('#ffffff'),\n  backgroundImage: z.string().optional(),\n});\n\n// Background removal request schema\nexport const backgroundRemovalRequestSchema = z.object({\n  imageId: z.string(),\n  backgroundColor: z.string().default('#ffffff'),\n});\n\n// Email authentication schemas\nexport const emailSignupSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(8, 'Password must be at least 8 characters'),\n  firstName: z.string().min(1, 'First name is required'),\n  lastName: z.string().min(1, 'Last name is required'),\n});\n\nexport const emailLoginSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(1, 'Password is required'),\n});\n\nexport const emailVerificationSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n  verificationCode: z.string().length(6, 'Verification code must be 6 digits'),\n});\n\nexport const resendVerificationSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n});\n\n// Session storage table for authentication\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for authentication\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  isGuest: boolean(\"is_guest\").default(false),\n  // Email/Password authentication fields\n  passwordHash: varchar(\"password_hash\"),\n  authProvider: varchar(\"auth_provider\").default(\"email\"), // 'email', 'google', 'guest'\n  isEmailVerified: boolean(\"is_email_verified\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Email verification table\nexport const emailVerifications = pgTable(\"email_verifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").notNull(),\n  verificationCode: varchar(\"verification_code\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  used: boolean(\"used\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Pending registrations table - stores registration data before email verification\nexport const pendingRegistrations = pgTable(\"pending_registrations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  passwordHash: varchar(\"password_hash\").notNull(),\n  verificationCode: varchar(\"verification_code\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Database tables\nexport const uploadedImages = pgTable('uploaded_images', {\n  id: text('id').primaryKey(),\n  userId: varchar('user_id').references(() => users.id, { onDelete: 'cascade' }),\n  filename: text('filename').notNull(),\n  originalName: text('original_name').notNull(),\n  mimeType: text('mime_type').notNull(),\n  size: integer('size').notNull(),\n  uploadedAt: timestamp('uploaded_at').defaultNow().notNull(),\n  backgroundRemovedFilename: text('background_removed_filename'),\n});\n\nexport const layoutResults = pgTable('layout_results', {\n  id: text('id').primaryKey(),\n  imageId: text('image_id').references(() => uploadedImages.id, { onDelete: 'cascade' }).notNull(),\n  settings: json('settings').$type<PhotoSettings>().notNull(),\n  cropSettings: json('crop_settings').$type<CropSettings>(),\n  photosPerRow: integer('photos_per_row').notNull(),\n  totalRows: integer('total_rows').notNull(),\n  pageUtilization: real('page_utilization').notNull(),\n  processedImageUrl: text('processed_image_url').notNull(),\n  borderWidth: real('border_width').default(0).notNull(),\n});\n\nexport const presets = pgTable('presets', {\n  id: text('id').primaryKey(),\n  userId: varchar('user_id').references(() => users.id, { onDelete: 'cascade' }),\n  name: text('name').notNull(),\n  description: text('description'),\n  settings: json('settings').$type<PhotoSettings>().notNull(),\n  borderWidth: real('border_width').default(0).notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  uploadedImages: many(uploadedImages),\n  presets: many(presets),\n  emailVerifications: many(emailVerifications),\n}));\n\nexport const emailVerificationsRelations = relations(emailVerifications, ({ one }) => ({\n  user: one(users, {\n    fields: [emailVerifications.email],\n    references: [users.email],\n  }),\n}));\n\nexport const uploadedImagesRelations = relations(uploadedImages, ({ many, one }) => ({\n  layoutResults: many(layoutResults),\n  user: one(users, {\n    fields: [uploadedImages.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const layoutResultsRelations = relations(layoutResults, ({ one }) => ({\n  uploadedImage: one(uploadedImages, {\n    fields: [layoutResults.imageId],\n    references: [uploadedImages.id],\n  }),\n}));\n\nexport const presetsRelations = relations(presets, ({ one }) => ({\n  user: one(users, {\n    fields: [presets.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUploadedImageSchema = createInsertSchema(uploadedImages).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport const insertLayoutResultSchema = createInsertSchema(layoutResults).omit({\n  id: true,\n});\n\nexport const insertPresetSchema = createInsertSchema(presets).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEmailVerificationSchema = createInsertSchema(emailVerifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPendingRegistrationSchema = createInsertSchema(pendingRegistrations).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type PhotoSettings = z.infer<typeof photoSettingsSchema>;\nexport type CropSettings = z.infer<typeof cropSettingsSchema>;\nexport type BackgroundSettings = z.infer<typeof backgroundSettingsSchema>;\nexport type BackgroundRemovalRequest = z.infer<typeof backgroundRemovalRequestSchema>;\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = typeof users.$inferInsert;\nexport type UploadedImage = typeof uploadedImages.$inferSelect;\nexport type InsertUploadedImage = z.infer<typeof insertUploadedImageSchema>;\nexport type LayoutResult = typeof layoutResults.$inferSelect;\nexport type InsertLayoutResult = z.infer<typeof insertLayoutResultSchema>;\nexport type Preset = typeof presets.$inferSelect;\nexport type InsertPreset = z.infer<typeof insertPresetSchema>;\nexport type EmailVerification = typeof emailVerifications.$inferSelect;\nexport type InsertEmailVerification = z.infer<typeof insertEmailVerificationSchema>;\nexport type PendingRegistration = typeof pendingRegistrations.$inferSelect;\nexport type InsertPendingRegistration = z.infer<typeof insertPendingRegistrationSchema>;\n\n// Email authentication types\nexport type EmailSignup = z.infer<typeof emailSignupSchema>;\nexport type EmailLogin = z.infer<typeof emailLoginSchema>;\nexport type EmailVerificationRequest = z.infer<typeof emailVerificationSchema>;\nexport type ResendVerificationRequest = z.infer<typeof resendVerificationSchema>;\n\n// Legacy schemas for backward compatibility\nexport const uploadedImageSchema = z.object({\n  id: z.string(),\n  filename: z.string(),\n  originalName: z.string(),\n  mimeType: z.string(),\n  size: z.number(),\n  uploadedAt: z.date(),\n});\n\nexport const layoutResultSchema = z.object({\n  imageId: z.string(),\n  settings: photoSettingsSchema,\n  photosPerRow: z.number(),\n  totalRows: z.number(),\n  pageUtilization: z.number(),\n  processedImageUrl: z.string(),\n});\n","size_bytes":9282},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import 'dotenv/config';\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { initializeSecrets, autoSetupSecrets } from \"./initializeSecrets\";\n\n// Initialize secrets before starting the application\nconsole.log('üîß Starting Passport Photo Generator...');\n\n// Check if this is a first-time setup\nimport fs from 'fs';\nconst isFirstRun = !fs.existsSync('.secrets');\nif (isFirstRun) {\n  autoSetupSecrets();\n}\n\n// Initialize and validate all secrets\nconst secretsValid = initializeSecrets();\nif (!secretsValid) {\n  console.error('‚ùå Cannot start application: secrets validation failed');\n  console.log('üí° Please add the required secrets and restart the application');\n  process.exit(1);\n}\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    // Check if headers have already been sent\n    if (!res.headersSent) {\n      res.status(status).json({ message });\n    }\n    console.error('Server error:', err);\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2820},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-11 items-center justify-center rounded-lg bg-muted/50 p-1.5 text-muted-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-4 py-2 text-sm font-semibold ring-offset-background transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-md hover:bg-background/50\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1934},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-11 w-full rounded-lg border-2 border-input bg-background px-4 py-2.5 text-base ring-offset-background transition-all duration-200 file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary/20 focus-visible:border-primary focus-visible:shadow-md disabled:cursor-not-allowed disabled:opacity-50 md:text-sm hover:border-input/80\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":876},"README.md":{"content":"# Passport Photo Generator\n\nA professional, AI-powered passport photo generation application that creates perfect passport photos with automatic background removal, customizable dimensions, and intelligent layout optimization.\n\n## Features\n\n### üñºÔ∏è Professional Photo Processing\n- **AI Background Removal**: Automatic background removal with custom color selection\n- **Smart Cropping**: Intelligent crop and position tools with real-time preview\n- **Multiple Formats**: Export as PNG, JPG, or PDF for printing\n- **Custom Dimensions**: Support for passport, visa, and ID card sizes\n- **Batch Generation**: Create multiple photos on a single A4 page\n\n### üé® Advanced Customization\n- **Photo Settings**: Width, height, quantity, layout position, and spacing controls\n- **Border Options**: Adjustable photo border width (0-6mm)\n- **Layout Positions**: Auto-layout or manual positioning (top, middle, bottom positions)\n- **Distance Controls**: Customizable distance from top (0-20mm) and photo spacing\n\n### üåô Modern User Experience\n- **Dark/Light Theme**: Beautiful theme toggle with smooth transitions\n- **Real-time Preview**: Instant preview updates with debounced controls\n- **Responsive Design**: Works perfectly on desktop and mobile devices\n- **Guest Mode**: Try the app without registration\n- **User Accounts**: Save presets and access image history\n\n### üîê Authentication & Data\n- **Google Login**: Secure authentication via Replit Auth\n- **Guest Access**: Full functionality without account requirement\n- **Preset Management**: Save and load custom photo settings\n- **Image History**: Access previously processed images\n- **Secure Storage**: PostgreSQL database with user data protection\n\n## Quick Start\n\n### Option 1: Use on Replit (Recommended)\n1. **Fork this Repl** on Replit\n2. **Run the project** - all dependencies install automatically\n3. **Upload your photo** and adjust settings\n4. **Download** your professional passport photos\n\n### Option 2: Local Development\n```bash\n# Clone the repository\ngit clone <repository-url>\ncd passport-photo-generator\n\n# Install dependencies\nnpm install\n\n# Set up database (REQUIRED)\n# For Windows PowerShell:\npowershell -ExecutionPolicy Bypass -File setup-database.ps1\n\n# For other systems:\nnode setup-database.js\n\n# Push database schema\nnpm run db:push\n\n# Start development server\nnpm run dev\n```\n\n### Fixing \"endpoint has been disabled\" Error\n\nIf you see the error `{\"message\":\"The endpoint has been disabled. Enable it using Neon API and retry.\"}`, follow these steps:\n\n1. **Go to [Neon Console](https://console.neon.tech)**\n2. **Select your database project**\n3. **Go to Settings ‚Üí Compute**\n4. **Click \"Enable\" to activate your database endpoint**\n5. **Wait 2-3 minutes for the endpoint to start**\n6. **Restart your application**\n\nThis error occurs when your Neon database endpoint is in sleep mode and needs to be activated.\n\n## Environment Setup\n\nThe application automatically configures most settings, but you can customize:\n\n### Required Environment Variables\n- `DATABASE_URL` - PostgreSQL database connection\n- `SESSION_SECRET` - Session encryption key (auto-generated)\n\n### Optional Features\n- `REMOVE_BG_API_KEY_1` through `REMOVE_BG_API_KEY_10` - Remove.bg API keys for background removal\n- `GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET` - Google OAuth authentication\n- `GMAIL_USER` and `GMAIL_APP_PASSWORD` - Email verification service\n- `MAILJET_API_KEY` and `MAILJET_SECRET_KEY` - Alternative email service\n\n## Technology Stack\n\n### Frontend\n- **React 18** with TypeScript\n- **Vite** for fast development and building\n- **Tailwind CSS** for styling\n- **Shadcn/ui** components with Radix UI\n- **TanStack Query** for server state management\n- **Wouter** for lightweight routing\n\n### Backend\n- **Node.js** with Express.js\n- **TypeScript** with ES modules\n- **Sharp** for image processing\n- **jsPDF** for PDF generation\n- **Multer** for file uploads\n\n### Database & Storage\n- **PostgreSQL** with Drizzle ORM\n- **Local file storage** for images\n- **Session-based authentication**\n\n### APIs & Services\n- **Remove.bg API** for background removal\n- **Google OAuth** via Replit Auth\n- **Email services** (Gmail SMTP, Mailjet, or console fallback)\n\n## Usage Guide\n\n### 1. Upload Your Photo\n- Drag and drop or click to select an image\n- Supports JPG, PNG, and other common formats\n- Works with any photo size or quality\n\n### 2. Customize Settings\n- **Photo Size**: Choose from presets (Passport 35√ó45mm, Visa 51√ó51mm, ID Card 25√ó35mm) or set custom dimensions\n- **Quantity**: Select 1-20 photos per page\n- **Layout**: Auto-layout or choose specific positioning\n- **Spacing**: Adjust distance between photos (0-20mm)\n- **Border**: Add photo borders (0-6mm thickness)\n\n### 3. Background Removal (Optional)\n- Enable AI background removal\n- Choose custom background color\n- Automatic layout regeneration with processed image\n\n### 4. Download Your Photos\n- **PDF**: High-quality printable format\n- **PNG**: Transparent background support\n- **JPG**: Smaller file size for digital use\n\n## Advanced Features\n\n### Preset Management\nSave frequently used settings as presets:\n- Custom names and descriptions\n- Quick loading of saved configurations\n- Personal preset library\n\n### Theme System\n- **Light Mode**: Clean, professional appearance\n- **Dark Mode**: Easy on the eyes with full dark theme support\n- **Auto-switching**: Remembers your preference\n\n### Performance Optimization\n- **Debounced Updates**: Smooth editing experience with 3-second preview delays\n- **Smart Caching**: Efficient image processing and storage\n- **Progressive Enhancement**: Works without JavaScript for basic functionality\n\n## API Documentation\n\n### Upload Endpoint\n```\nPOST /api/upload\nContent-Type: multipart/form-data\n\nResponse: { id, filename, originalName, mimeType, size }\n```\n\n### Layout Generation\n```\nPOST /api/generate-layout\nContent-Type: application/json\n\nBody: {\n  imageId: string,\n  settings: PhotoSettings,\n  cropSettings?: CropSettings,\n  borderWidth?: number\n}\n```\n\n### Download Endpoints\n```\nGET /api/generate-preview/:imageId\nPOST /api/generate-pdf\nPOST /api/download-image\n```\n\n## Development\n\n### Project Structure\n```\n‚îú‚îÄ‚îÄ client/               # React frontend\n‚îÇ   ‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/   # Reusable UI components\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/        # Application pages\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/        # Custom React hooks\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ lib/          # Utilities and configurations\n‚îú‚îÄ‚îÄ server/               # Express backend\n‚îÇ   ‚îú‚îÄ‚îÄ routes.ts         # API route definitions\n‚îÇ   ‚îú‚îÄ‚îÄ storage.ts        # Database operations\n‚îÇ   ‚îî‚îÄ‚îÄ index.ts          # Server entry point\n‚îú‚îÄ‚îÄ shared/               # Shared TypeScript types and schemas\n‚îî‚îÄ‚îÄ uploads/              # Image storage directory\n```\n\n### Database Schema\n- **users**: User accounts and authentication\n- **uploaded_images**: Image metadata and file references\n- **layout_results**: Generated layout configurations\n- **email_verifications**: Email verification tokens\n\n### Adding New Features\n1. **Define types** in `shared/schema.ts`\n2. **Add API routes** in `server/routes.ts`\n3. **Update storage layer** in `server/storage.ts`\n4. **Build frontend components** in `client/src/`\n5. **Update documentation**\n\n## Deployment\n\n### Replit Deployment (Recommended)\n- Fork the project on Replit\n- All configuration is automatic\n- Database and secrets management included\n- Instant HTTPS and custom domains available\n\n### Manual Deployment\n```bash\n# Build the application\nnpm run build\n\n# Start production server\nnpm run start\n```\n\n### Environment Setup for Production\n- Set `NODE_ENV=production`\n- Configure `DATABASE_URL` for PostgreSQL\n- Set up `SESSION_SECRET` for security\n- Configure optional API keys for features\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Support\n\nFor support, email support@yourapp.com or create an issue on GitHub.\n\n## Acknowledgments\n\n- Remove.bg for AI background removal API\n- Replit for hosting and authentication services\n- Shadcn/ui for beautiful component library\n- All the open-source libraries that make this project possible#\u0000 \u0000A\u0000N\u0000D\u0000R\u0000O\u0000I\u0000D\u0000-\u0000-\u0000-\u0000P\u0000a\u0000s\u0000s\u0000p\u0000o\u0000r\u0000t\u0000-\u0000p\u0000h\u0000o\u0000t\u0000o\u0000-\u0000m\u0000a\u0000k\u0000e\u0000r\u0000\r\u0000\n\u0000\"# Passport-Photo-New\" \r\n","size_bytes":8577},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport \"./utils/adErrorSuppressor\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":193},"client/src/utils/adErrorSuppressor.ts":{"content":"// Ad Error Suppression Utility\nexport function setupAdErrorSuppression() {\n  // Store original error handlers\n  const originalConsoleError = console.error;\n  const originalWindowError = window.onerror;\n\n  // Override console.error to filter ad-related errors\n  console.error = function(...args: any[]) {\n    const message = args.join(' ').toLowerCase();\n    if (\n      message.includes('z3 is not a function') ||\n      message.includes('profitableratecpm.com') ||\n      message.includes('script error') ||\n      message.includes('network error') && message.includes('ad')\n    ) {\n      // Silently ignore ad-related errors\n      return;\n    }\n    originalConsoleError.apply(console, args);\n  };\n\n  // Global error handler to catch and suppress ad script errors\n  window.addEventListener('error', function(event) {\n    const error = event.error;\n    const message = event.message || '';\n    const filename = event.filename || '';\n    \n    // Check if error is from ad scripts\n    if (\n      filename.includes('profitableratecpm.com') ||\n      filename.includes('doubleclick') ||\n      message.includes('Z3 is not a function') ||\n      message.includes('Script error.') ||\n      (error && error.stack && error.stack.includes('profitableratecpm.com'))\n    ) {\n      event.preventDefault();\n      event.stopPropagation();\n      return true;\n    }\n  }, true);\n\n  // Handle unhandled promise rejections from ad scripts\n  window.addEventListener('unhandledrejection', function(event) {\n    const reason = event.reason;\n    if (reason && reason.toString().includes('profitableratecpm.com')) {\n      event.preventDefault();\n      return true;\n    }\n  });\n\n  // Override window.onerror as a backup\n  window.onerror = function(message, source, lineno, colno, error) {\n    const messageStr = typeof message === 'string' ? message : '';\n    const sourceStr = typeof source === 'string' ? source : '';\n    \n    if (\n      (sourceStr && sourceStr.includes('profitableratecpm.com')) ||\n      (messageStr && messageStr.includes('Z3 is not a function')) ||\n      (messageStr && messageStr.includes('Script error'))\n    ) {\n      return true; // Suppress the error\n    }\n    \n    // Call original handler for non-ad errors\n    if (originalWindowError) {\n      return originalWindowError.call(this, message, source, lineno, colno, error);\n    }\n    return false;\n  };\n}\n\n// Function to hide error overlays\nfunction hideErrorOverlays() {\n  const hideOverlay = () => {\n    // Hide Vite error overlay\n    const overlays = document.querySelectorAll(\n      '#vite-error-overlay, .vite-error-overlay, [data-vite-error-overlay], vite-error-overlay, [id*=\"error-overlay\"], [class*=\"error-overlay\"]'\n    );\n    \n    overlays.forEach((overlay) => {\n      if (overlay instanceof HTMLElement) {\n        overlay.style.display = 'none';\n        overlay.style.visibility = 'hidden';\n        overlay.style.opacity = '0';\n        overlay.style.pointerEvents = 'none';\n      }\n    });\n  };\n\n  // Hide overlays immediately and on DOM changes\n  hideOverlay();\n  \n  // Observer to hide overlays when they appear\n  const observer = new MutationObserver((mutations) => {\n    mutations.forEach((mutation) => {\n      if (mutation.type === 'childList') {\n        hideOverlay();\n      }\n    });\n  });\n\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true\n  });\n\n  // Also hide overlays periodically\n  setInterval(hideOverlay, 100);\n}\n\n// Call this function to initialize error suppression and hide overlays\nsetupAdErrorSuppression();\nhideErrorOverlays();","size_bytes":3530},"server/storage.ts":{"content":"import { uploadedImages, layoutResults, presets, users, emailVerifications, pendingRegistrations, type UploadedImage, type LayoutResult, type InsertUploadedImage, type InsertLayoutResult, type Preset, type InsertPreset, type User, type UpsertUser, type EmailVerification, type InsertEmailVerification, type PendingRegistration, type InsertPendingRegistration } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gt } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  createUser(user: UpsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n  \n  // Email verification operations\n  saveEmailVerification(verification: InsertEmailVerification): Promise<EmailVerification>;\n  getEmailVerification(email: string, code: string): Promise<EmailVerification | undefined>;\n  markEmailVerificationAsUsed(id: string): Promise<void>;\n  deleteExpiredVerifications(): Promise<void>;\n  \n  // Pending registration operations\n  savePendingRegistration(registration: InsertPendingRegistration): Promise<PendingRegistration>;\n  getPendingRegistration(email: string, code: string): Promise<PendingRegistration | undefined>;\n  deletePendingRegistration(email: string): Promise<void>;\n  deleteExpiredPendingRegistrations(): Promise<void>;\n  \n  // Image operations\n  saveUploadedImage(image: InsertUploadedImage): Promise<UploadedImage>;\n  getUploadedImage(id: string): Promise<UploadedImage | undefined>;\n  updateUploadedImage(id: string, updates: Partial<UploadedImage>): Promise<UploadedImage>;\n  getUserImages(userId: string): Promise<UploadedImage[]>;\n  \n  // Layout operations\n  saveLayoutResult(result: InsertLayoutResult): Promise<LayoutResult>;\n  getLayoutResult(imageId: string): Promise<LayoutResult | undefined>;\n  getLayoutResultById(id: string): Promise<LayoutResult | undefined>;\n  deleteUploadedImage(id: string): Promise<void>;\n  \n  // Preset methods\n  getAllPresets(userId?: string): Promise<Preset[]>;\n  savePreset(preset: InsertPreset): Promise<Preset>;\n  deletePreset(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (mandatory for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async createUser(userData: UpsertUser): Promise<User> {\n    const id = userData.id || randomUUID();\n    const [user] = await db\n      .insert(users)\n      .values({ ...userData, id })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  // Email verification operations\n  async saveEmailVerification(verification: InsertEmailVerification): Promise<EmailVerification> {\n    const id = randomUUID();\n    const [emailVerification] = await db\n      .insert(emailVerifications)\n      .values({ ...verification, id })\n      .returning();\n    return emailVerification;\n  }\n\n  async getEmailVerification(email: string, code: string): Promise<EmailVerification | undefined> {\n    const [verification] = await db\n      .select()\n      .from(emailVerifications)\n      .where(\n        and(\n          eq(emailVerifications.email, email),\n          eq(emailVerifications.verificationCode, code),\n          eq(emailVerifications.used, false),\n          gt(emailVerifications.expiresAt, new Date())\n        )\n      );\n    return verification;\n  }\n\n  async markEmailVerificationAsUsed(id: string): Promise<void> {\n    await db\n      .update(emailVerifications)\n      .set({ used: true })\n      .where(eq(emailVerifications.id, id));\n  }\n\n  async deleteExpiredVerifications(): Promise<void> {\n    await db\n      .delete(emailVerifications)\n      .where(\n        and(\n          eq(emailVerifications.used, false),\n          eq(emailVerifications.expiresAt, new Date())\n        )\n      );\n  }\n\n  // Pending registration operations\n  async savePendingRegistration(registration: InsertPendingRegistration): Promise<PendingRegistration> {\n    // Delete any existing pending registration for this email first\n    await this.deletePendingRegistration(registration.email);\n    \n    const id = randomUUID();\n    const [pendingRegistration] = await db\n      .insert(pendingRegistrations)\n      .values({ ...registration, id })\n      .returning();\n    return pendingRegistration;\n  }\n\n  async getPendingRegistration(email: string, code: string): Promise<PendingRegistration | undefined> {\n    const [registration] = await db\n      .select()\n      .from(pendingRegistrations)\n      .where(\n        and(\n          eq(pendingRegistrations.email, email),\n          eq(pendingRegistrations.verificationCode, code),\n          gt(pendingRegistrations.expiresAt, new Date())\n        )\n      );\n    return registration;\n  }\n\n  async deletePendingRegistration(email: string): Promise<void> {\n    await db\n      .delete(pendingRegistrations)\n      .where(eq(pendingRegistrations.email, email));\n  }\n\n  async deleteExpiredPendingRegistrations(): Promise<void> {\n    await db\n      .delete(pendingRegistrations)\n      .where(eq(pendingRegistrations.expiresAt, new Date()));\n  }\n\n  async saveUploadedImage(image: InsertUploadedImage): Promise<UploadedImage> {\n    const id = randomUUID();\n    const [uploadedImage] = await db\n      .insert(uploadedImages)\n      .values({ ...image, id })\n      .returning();\n    return uploadedImage;\n  }\n\n  async getUploadedImage(id: string): Promise<UploadedImage | undefined> {\n    const [image] = await db.select().from(uploadedImages).where(eq(uploadedImages.id, id));\n    return image || undefined;\n  }\n\n  async updateUploadedImage(id: string, updates: Partial<UploadedImage>): Promise<UploadedImage> {\n    const [updatedImage] = await db\n      .update(uploadedImages)\n      .set(updates)\n      .where(eq(uploadedImages.id, id))\n      .returning();\n    return updatedImage;\n  }\n\n  async saveLayoutResult(result: InsertLayoutResult): Promise<LayoutResult> {\n    const id = randomUUID();\n    const [layoutResult] = await db\n      .insert(layoutResults)\n      .values({\n        id,\n        imageId: result.imageId,\n        settings: result.settings,\n        cropSettings: result.cropSettings || null,\n        photosPerRow: result.photosPerRow,\n        totalRows: result.totalRows,\n        pageUtilization: result.pageUtilization,\n        processedImageUrl: result.processedImageUrl,\n        borderWidth: result.borderWidth ?? 0\n      } as any)\n      .returning();\n    return layoutResult;\n  }\n\n  async getLayoutResult(imageId: string): Promise<LayoutResult | undefined> {\n    const layouts = await db.select().from(layoutResults).where(eq(layoutResults.imageId, imageId)).orderBy(desc(layoutResults.id));\n    return layouts[0] || undefined;\n  }\n\n  async getLayoutResultById(id: string): Promise<LayoutResult | undefined> {\n    const [layout] = await db.select().from(layoutResults).where(eq(layoutResults.id, id));\n    return layout || undefined;\n  }\n\n  async deleteUploadedImage(id: string): Promise<void> {\n    // Delete layout results first due to foreign key constraint\n    await db.delete(layoutResults).where(eq(layoutResults.imageId, id));\n    // Delete the image\n    await db.delete(uploadedImages).where(eq(uploadedImages.id, id));\n  }\n\n  async getUserImages(userId: string): Promise<UploadedImage[]> {\n    return await db.select().from(uploadedImages)\n      .where(eq(uploadedImages.userId, userId))\n      .orderBy(desc(uploadedImages.uploadedAt));\n  }\n\n  async getAllPresets(userId?: string): Promise<Preset[]> {\n    if (userId) {\n      return await db.select().from(presets)\n        .where(eq(presets.userId, userId))\n        .orderBy(presets.createdAt);\n    }\n    return await db.select().from(presets).orderBy(presets.createdAt);\n  }\n\n  async savePreset(preset: InsertPreset): Promise<Preset> {\n    const id = randomUUID();\n    const [savedPreset] = await db\n      .insert(presets)\n      .values({\n        id,\n        userId: preset.userId,\n        name: preset.name,\n        description: preset.description || null,\n        settings: preset.settings,\n        borderWidth: preset.borderWidth ?? 0\n      } as any)\n      .returning();\n    return savedPreset;\n  }\n\n  async deletePreset(id: string): Promise<void> {\n    await db.delete(presets).where(eq(presets.id, id));\n  }\n}\n\nexport class MemStorage implements IStorage {\n  private users = new Map<string, User>();\n  private usersByEmail = new Map<string, User>();\n  private images = new Map<string, UploadedImage>();\n  private layouts = new Map<string, LayoutResult>();\n  private presetsList = new Map<string, Preset>();\n  private emailVerificationsList = new Map<string, EmailVerification>();\n  private pendingRegistrationsList = new Map<string, PendingRegistration>();\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return this.usersByEmail.get(email);\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const existingUser = userData.id ? this.users.get(userData.id) : undefined;\n    \n    const user: User = {\n      id: userData.id || randomUUID(),\n      email: userData.email || null,\n      firstName: userData.firstName || null,\n      lastName: userData.lastName || null,\n      profileImageUrl: userData.profileImageUrl || null,\n      isGuest: userData.isGuest ?? false,\n      passwordHash: userData.passwordHash || null,\n      authProvider: userData.authProvider || 'email',\n      isEmailVerified: userData.isEmailVerified ?? false,\n      createdAt: existingUser?.createdAt || new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.users.set(user.id, user);\n    if (user.email) {\n      this.usersByEmail.set(user.email, user);\n    }\n    return user;\n  }\n\n  async createUser(userData: UpsertUser): Promise<User> {\n    const id = userData.id || randomUUID();\n    const user: User = {\n      id,\n      email: userData.email || null,\n      firstName: userData.firstName || null,\n      lastName: userData.lastName || null,\n      profileImageUrl: userData.profileImageUrl || null,\n      isGuest: userData.isGuest ?? false,\n      passwordHash: userData.passwordHash || null,\n      authProvider: userData.authProvider || 'email',\n      isEmailVerified: userData.isEmailVerified ?? false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.users.set(user.id, user);\n    if (user.email) {\n      this.usersByEmail.set(user.email, user);\n    }\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const existingUser = this.users.get(id);\n    if (!existingUser) {\n      throw new Error(`User with id ${id} not found`);\n    }\n\n    const user: User = {\n      ...existingUser,\n      ...updates,\n      updatedAt: new Date(),\n    };\n\n    this.users.set(user.id, user);\n    if (user.email) {\n      this.usersByEmail.set(user.email, user);\n    }\n    return user;\n  }\n\n  async saveEmailVerification(verification: InsertEmailVerification): Promise<EmailVerification> {\n    const id = randomUUID();\n    const emailVerification: EmailVerification = {\n      id,\n      email: verification.email,\n      verificationCode: verification.verificationCode,\n      expiresAt: verification.expiresAt,\n      used: false,\n      createdAt: new Date(),\n    };\n    this.emailVerificationsList.set(id, emailVerification);\n    return emailVerification;\n  }\n\n  async getEmailVerification(email: string, code: string): Promise<EmailVerification | undefined> {\n    const now = new Date();\n    for (const verification of this.emailVerificationsList.values()) {\n      if (\n        verification.email === email &&\n        verification.verificationCode === code &&\n        !verification.used &&\n        verification.expiresAt > now\n      ) {\n        return verification;\n      }\n    }\n    return undefined;\n  }\n\n  async markEmailVerificationAsUsed(id: string): Promise<void> {\n    const verification = this.emailVerificationsList.get(id);\n    if (verification) {\n      verification.used = true;\n      this.emailVerificationsList.set(id, verification);\n    }\n  }\n\n  async deleteExpiredVerifications(): Promise<void> {\n    const now = new Date();\n    for (const [id, verification] of this.emailVerificationsList.entries()) {\n      if (!verification.used && verification.expiresAt <= now) {\n        this.emailVerificationsList.delete(id);\n      }\n    }\n  }\n\n  async savePendingRegistration(registration: InsertPendingRegistration): Promise<PendingRegistration> {\n    await this.deletePendingRegistration(registration.email);\n    \n    const id = randomUUID();\n    const pendingRegistration: PendingRegistration = {\n      id,\n      email: registration.email,\n      firstName: registration.firstName,\n      lastName: registration.lastName,\n      passwordHash: registration.passwordHash,\n      verificationCode: registration.verificationCode,\n      expiresAt: registration.expiresAt,\n      createdAt: new Date(),\n    };\n    this.pendingRegistrationsList.set(id, pendingRegistration);\n    return pendingRegistration;\n  }\n\n  async getPendingRegistration(email: string, code: string): Promise<PendingRegistration | undefined> {\n    const now = new Date();\n    for (const registration of this.pendingRegistrationsList.values()) {\n      if (\n        registration.email === email &&\n        registration.verificationCode === code &&\n        registration.expiresAt > now\n      ) {\n        return registration;\n      }\n    }\n    return undefined;\n  }\n\n  async deletePendingRegistration(email: string): Promise<void> {\n    for (const [id, registration] of this.pendingRegistrationsList.entries()) {\n      if (registration.email === email) {\n        this.pendingRegistrationsList.delete(id);\n      }\n    }\n  }\n\n  async deleteExpiredPendingRegistrations(): Promise<void> {\n    const now = new Date();\n    for (const [id, registration] of this.pendingRegistrationsList.entries()) {\n      if (registration.expiresAt <= now) {\n        this.pendingRegistrationsList.delete(id);\n      }\n    }\n  }\n\n  async saveUploadedImage(image: InsertUploadedImage): Promise<UploadedImage> {\n    const id = randomUUID();\n    const uploadedImage: UploadedImage = {\n      id,\n      userId: image.userId || null,\n      filename: image.filename,\n      originalName: image.originalName,\n      mimeType: image.mimeType,\n      size: image.size,\n      uploadedAt: new Date(),\n      backgroundRemovedFilename: image.backgroundRemovedFilename || null,\n    };\n    this.images.set(id, uploadedImage);\n    return uploadedImage;\n  }\n\n  async getUploadedImage(id: string): Promise<UploadedImage | undefined> {\n    return this.images.get(id);\n  }\n\n  async updateUploadedImage(id: string, updates: Partial<UploadedImage>): Promise<UploadedImage> {\n    const existingImage = this.images.get(id);\n    if (!existingImage) {\n      throw new Error(`Image with id ${id} not found`);\n    }\n\n    const updatedImage: UploadedImage = {\n      ...existingImage,\n      ...updates,\n    };\n    this.images.set(id, updatedImage);\n    return updatedImage;\n  }\n\n  async getUserImages(userId: string): Promise<UploadedImage[]> {\n    const userImages: UploadedImage[] = [];\n    for (const image of this.images.values()) {\n      if (image.userId === userId) {\n        userImages.push(image);\n      }\n    }\n    return userImages.sort((a, b) => b.uploadedAt.getTime() - a.uploadedAt.getTime());\n  }\n\n  async saveLayoutResult(result: InsertLayoutResult): Promise<LayoutResult> {\n    const id = randomUUID();\n    const layoutResult: LayoutResult = {\n      id,\n      imageId: result.imageId,\n      settings: result.settings as any,\n      cropSettings: result.cropSettings || null,\n      photosPerRow: result.photosPerRow,\n      totalRows: result.totalRows,\n      pageUtilization: result.pageUtilization,\n      processedImageUrl: result.processedImageUrl,\n      borderWidth: result.borderWidth ?? 0,\n    };\n    this.layouts.set(id, layoutResult);\n    return layoutResult;\n  }\n\n  async getLayoutResult(imageId: string): Promise<LayoutResult | undefined> {\n    const layouts: LayoutResult[] = [];\n    for (const layout of this.layouts.values()) {\n      if (layout.imageId === imageId) {\n        layouts.push(layout);\n      }\n    }\n    return layouts.sort((a, b) => b.id.localeCompare(a.id))[0];\n  }\n\n  async getLayoutResultById(id: string): Promise<LayoutResult | undefined> {\n    return this.layouts.get(id);\n  }\n\n  async deleteUploadedImage(id: string): Promise<void> {\n    for (const [layoutId, layout] of this.layouts.entries()) {\n      if (layout.imageId === id) {\n        this.layouts.delete(layoutId);\n      }\n    }\n    this.images.delete(id);\n  }\n\n  async getAllPresets(userId?: string): Promise<Preset[]> {\n    const presets: Preset[] = [];\n    for (const preset of this.presetsList.values()) {\n      if (!userId || preset.userId === userId) {\n        presets.push(preset);\n      }\n    }\n    return presets.sort((a, b) => a.createdAt!.getTime() - b.createdAt!.getTime());\n  }\n\n  async savePreset(preset: InsertPreset): Promise<Preset> {\n    const id = randomUUID();\n    const savedPreset: Preset = {\n      id,\n      userId: preset.userId || null,\n      name: preset.name,\n      description: preset.description || null,\n      settings: preset.settings as any,\n      borderWidth: preset.borderWidth ?? 0,\n      createdAt: new Date(),\n    };\n    this.presetsList.set(id, savedPreset);\n    return savedPreset;\n  }\n\n  async deletePreset(id: string): Promise<void> {\n    this.presetsList.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":18363},"client/src/pages/landing.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Camera, Sparkles, Users, Shield, Zap, CheckCircle, Mail, UserPlus } from \"lucide-react\";\nimport { ThemeToggle } from \"@/components/ui/theme-toggle\";\nimport { FaGoogle } from \"react-icons/fa\";\nimport { EmailSignup } from \"@/components/auth/EmailSignup.tsx\";\nimport { EmailLogin } from \"@/components/auth/EmailLogin.tsx\";\nimport { LoadingScreen, PageTransition } from \"@/components/ui/loading-screen\";\nimport { Link } from \"wouter\";\n\nexport default function Landing() {\n  const [showAuthDialog, setShowAuthDialog] = useState(false);\n  const [authMode, setAuthMode] = useState<'login' | 'signup'>('login');\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n\n  const handleGoogleLogin = () => {\n    setIsLoading(true);\n    setLoadingMessage(\"Connecting to Google...\");\n    window.location.href = \"/api/login\";\n  };\n\n  const handleGuestLogin = async () => {\n    setIsLoading(true);\n    setLoadingMessage(\"Setting up your guest session...\");\n    \n    try {\n      const response = await fetch('/api/login/guest', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.ok) {\n        setLoadingMessage(\"Welcome! Redirecting to your workspace...\");\n        // Refresh the page to update authentication state\n        window.location.reload();\n      } else {\n        console.error('Guest login failed');\n        setIsLoading(false);\n      }\n    } catch (error) {\n      console.error('Guest login error:', error);\n      setIsLoading(false);\n    }\n  };\n\n  const handleEmailAuth = () => {\n    setShowAuthDialog(true);\n  };\n\n  const handleAuthSuccess = () => {\n    setShowAuthDialog(false);\n    setIsLoading(true);\n    setLoadingMessage(\"Welcome! Setting up your workspace...\");\n    window.location.reload();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-muted relative\">\n      {/* Loading Screen Overlay */}\n      {isLoading && (\n        <LoadingScreen \n          message={loadingMessage}\n          submessage=\"We're preparing your passport photo workspace...\"\n          show={true}\n        />\n      )}\n      \n      {/* Header */}\n      <header className=\"bg-white/90 dark:bg-slate-900/95 backdrop-blur-xl border-b border-border/50 dark:border-slate-700/50 shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-gradient-primary p-2 rounded-xl shadow-primary\">\n                <Camera className=\"h-6 w-6 text-white\" />\n              </div>\n              <h1 className=\"text-xl sm:text-2xl font-bold bg-gradient-to-r from-primary to-blue-600 bg-clip-text text-transparent\">\n                Passport Photo Creator\n              </h1>\n            </div>\n            <div className=\"flex flex-wrap items-center justify-center gap-2 sm:gap-3\">\n              <ThemeToggle />\n              <Button \n                onClick={handleGuestLogin} \n                variant=\"outline\" \n                size=\"sm\"\n                className=\"border-primary/30 hover:bg-primary/10 text-xs sm:text-sm px-3 py-2\"\n              >\n                <span className=\"hidden sm:inline\">Continue as </span>Guest\n              </Button>\n              <Button \n                onClick={handleEmailAuth} \n                variant=\"outline\" \n                size=\"sm\"\n                className=\"border-primary/30 hover:bg-primary/10 text-xs sm:text-sm px-3 py-2\"\n              >\n                <Mail className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2\" />\n                Email\n              </Button>\n              <Button \n                onClick={handleGoogleLogin} \n                size=\"sm\"\n                className=\"bg-gradient-primary hover:shadow-primary transition-all text-xs sm:text-sm px-3 py-2\"\n              >\n                <FaGoogle className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2\" />\n                Google\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 sm:py-16\">\n        {/* Hero */}\n        <div className=\"text-center mb-16\">\n          <div className=\"mb-8\">\n            <div className=\"inline-block bg-primary/10 dark:bg-primary/20 px-4 py-2 rounded-full mb-4\">\n              <span className=\"text-primary font-medium text-sm flex items-center\">\n                <Sparkles className=\"h-4 w-4 mr-2\" />\n                AI-Powered Photo Processing\n              </span>\n            </div>\n            <h1 className=\"text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 dark:text-slate-100 mb-6 leading-tight\">\n              Professional Passport Photos\n              <br />\n              <span className=\"bg-gradient-to-r from-primary to-blue-600 bg-clip-text text-transparent\">\n                In Minutes\n              </span>\n            </h1>\n            <p className=\"text-lg sm:text-xl text-gray-600 dark:text-slate-400 mb-8 max-w-3xl mx-auto px-4\">\n              Create perfect passport photos with AI background removal, custom sizing, and professional layouts. \n              Save time and money with our automated photo processing.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center w-full max-w-2xl mx-auto px-4\">\n              <Button \n                onClick={handleGoogleLogin} \n                size=\"lg\" \n                className=\"bg-gradient-primary hover:shadow-primary transition-all px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg w-full sm:w-auto\"\n              >\n                <FaGoogle className=\"h-4 w-4 sm:h-5 sm:w-5 mr-2 sm:mr-3\" />\n                Get Started with Google\n              </Button>\n              <Button \n                onClick={() => { setAuthMode('signup'); handleEmailAuth(); }} \n                size=\"lg\" \n                variant=\"outline\"\n                className=\"border-primary/30 hover:bg-primary/10 px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg w-full sm:w-auto\"\n              >\n                <UserPlus className=\"h-4 w-4 sm:h-5 sm:w-5 mr-2 sm:mr-3\" />\n                Create Account\n              </Button>\n              <Button \n                onClick={handleGuestLogin} \n                size=\"lg\" \n                variant=\"ghost\"\n                className=\"hover:bg-primary/5 px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg w-full sm:w-auto\"\n              >\n                Try as Guest\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid md:grid-cols-3 gap-8 mb-16\">\n          <Card className=\"border-0 bg-white/60 dark:bg-slate-800/80 backdrop-blur-sm shadow-card dark:shadow-slate-900/50\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"bg-gradient-primary p-4 rounded-2xl w-16 h-16 mx-auto mb-6 shadow-primary\">\n                <Zap className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-slate-100\">Lightning Fast</h3>\n              <p className=\"text-gray-600 dark:text-slate-400\">\n                Upload your photo and get professional results in seconds. No waiting, no delays.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-0 bg-white/60 dark:bg-slate-800/80 backdrop-blur-sm shadow-card dark:shadow-slate-900/50\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"bg-gradient-primary p-4 rounded-2xl w-16 h-16 mx-auto mb-6 shadow-primary\">\n                <Sparkles className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-slate-100\">AI Background Removal</h3>\n              <p className=\"text-gray-600 dark:text-slate-400\">\n                Automatically remove backgrounds and add custom colors for perfect passport photos.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-0 bg-white/60 dark:bg-slate-800/80 backdrop-blur-sm shadow-card dark:shadow-slate-900/50\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"bg-gradient-primary p-4 rounded-2xl w-16 h-16 mx-auto mb-6 shadow-primary\">\n                <Shield className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-slate-100\">Secure & Private</h3>\n              <p className=\"text-gray-600 dark:text-slate-400\">\n                Your photos are processed securely and stored safely. Delete anytime with one click.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Features List */}\n        <div className=\"bg-white/60 dark:bg-slate-800/80 backdrop-blur-sm rounded-3xl p-12 shadow-card dark:shadow-slate-900/50\">\n          <h2 className=\"text-3xl font-bold text-center mb-12 text-gray-900 dark:text-slate-100\">\n            Everything You Need for Perfect Photos\n          </h2>\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <div className=\"space-y-6\">\n              {[\n                \"Multiple standard sizes (35x45mm, 51x51mm, etc.)\",\n                \"Custom photo dimensions and quantities\",\n                \"Professional black borders and spacing\",\n                \"Real-time preview with instant feedback\"\n              ].map((feature, index) => (\n                <div key={index} className=\"flex items-start space-x-3\">\n                  <div className=\"bg-green-100 dark:bg-green-900/30 p-1 rounded-full mt-1\">\n                    <CheckCircle className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                  </div>\n                  <p className=\"text-gray-700 dark:text-slate-300\">{feature}</p>\n                </div>\n              ))}\n            </div>\n            <div className=\"space-y-6\">\n              {[\n                \"Save custom presets for future use\",\n                \"Download as PDF, PNG, or JPG formats\",\n                \"Crop and position tools for perfect framing\",\n                \"History of all your processed photos\"\n              ].map((feature, index) => (\n                <div key={index} className=\"flex items-start space-x-3\">\n                  <div className=\"bg-green-100 dark:bg-green-900/30 p-1 rounded-full mt-1\">\n                    <CheckCircle className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                  </div>\n                  <p className=\"text-gray-700 dark:text-slate-300\">{feature}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* CTA Section */}\n        <div className=\"text-center mt-16\">\n          <h2 className=\"text-3xl font-bold mb-6 text-gray-900 dark:text-slate-100\">\n            Ready to Create Professional Photos?\n          </h2>\n          <p className=\"text-xl text-gray-600 dark:text-slate-400 mb-8\">\n            Join thousands of users who trust our AI-powered photo processing\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n            <Button \n              onClick={handleGoogleLogin} \n              size=\"lg\" \n              className=\"bg-gradient-primary hover:shadow-primary transition-all px-8 py-4 text-lg\"\n            >\n              <FaGoogle className=\"h-5 w-5 mr-3\" />\n              Sign in with Google\n            </Button>\n            \n            <div className=\"mt-2 text-xs text-gray-500 dark:text-slate-400 text-center max-w-md mx-auto\">\n              <p>If you see \"This app isn't verified\" or \"blocked by Google's policies\", click \"Advanced\" ‚Üí \"Go to workspace.jijosem565.repl.co (unsafe)\" to continue.</p>\n            </div>\n            <Button \n              onClick={() => { setAuthMode('login'); handleEmailAuth(); }} \n              size=\"lg\" \n              variant=\"outline\"\n              className=\"border-primary/30 hover:bg-primary/10 px-8 py-4 text-lg\"\n            >\n              <Mail className=\"h-5 w-5 mr-3\" />\n              Sign in with Email\n            </Button>\n            <Button \n              onClick={handleGuestLogin} \n              size=\"lg\" \n              variant=\"ghost\"\n              className=\"hover:bg-primary/5 px-8 py-4 text-lg\"\n            >\n              Try as Guest\n            </Button>\n          </div>\n        </div>\n      </main>\n\n      {/* Simple Footer */}\n      <footer className=\"border-t border-border/50 dark:border-slate-700/50 mt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center text-gray-500 dark:text-slate-500\">\n            <p>&copy; 2025 Passport Photo Creator. Professional photos made simple.</p>\n            <div className=\"mt-4\">\n              <Link href=\"/privacy-policy\">\n                <a data-testid=\"link-privacy-policy\" className=\"text-primary hover:text-primary/80 underline transition-colors\">\n                  Privacy Policy\n                </a>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </footer>\n\n      {/* Authentication Dialog */}\n      <Dialog open={showAuthDialog} onOpenChange={setShowAuthDialog}>\n        <DialogContent className=\"sm:max-w-[500px] p-0\">\n          <div className=\"p-6\">\n            <DialogHeader className=\"text-center mb-6\">\n              <DialogTitle className=\"text-2xl font-bold\">Join Passport Photo Maker</DialogTitle>\n            </DialogHeader>\n            \n            <Tabs value={authMode} onValueChange={(value) => setAuthMode(value as 'login' | 'signup')} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n                <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n                <TabsTrigger value=\"signup\">Create Account</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"login\" className=\"mt-0\">\n                <EmailLogin \n                  onSuccess={handleAuthSuccess}\n                  onSwitchToSignup={() => setAuthMode('signup')}\n                />\n              </TabsContent>\n              \n              <TabsContent value=\"signup\" className=\"mt-0\">\n                <EmailSignup \n                  onSuccess={handleAuthSuccess}\n                  onSwitchToLogin={() => setAuthMode('login')}\n                />\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"flex items-center justify-center my-6\">\n              <div className=\"border-t border-border flex-grow\"></div>\n              <span className=\"px-4 text-sm text-muted-foreground\">or</span>\n              <div className=\"border-t border-border flex-grow\"></div>\n            </div>\n\n            <div className=\"space-y-3\">\n              <Button \n                onClick={handleGoogleLogin} \n                variant=\"outline\" \n                className=\"w-full border-primary/30 hover:bg-primary/10\"\n              >\n                <FaGoogle className=\"h-4 w-4 mr-2\" />\n                Continue with Google\n              </Button>\n              \n              <div className=\"mt-2 text-xs text-gray-500 dark:text-slate-400 text-center\">\n                <p>If blocked by Google, click \"Advanced\" ‚Üí \"Go to workspace.jijosem565.repl.co (unsafe)\"</p>\n              </div>\n              \n              <Button \n                onClick={handleGuestLogin} \n                variant=\"ghost\" \n                className=\"w-full hover:bg-primary/5\"\n              >\n                Continue as Guest\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":16114},"client/src/components/auth/EmailVerification.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { emailVerificationSchema, type EmailVerificationRequest } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2, Mail, ArrowLeft, RotateCcw, CheckCircle2, Clock, Sparkles } from 'lucide-react';\nimport { InputOTP, InputOTPGroup, InputOTPSlot } from '@/components/ui/input-otp';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\n\ninterface EmailVerificationProps {\n  email: string;\n  onSuccess?: () => void;\n  onBack?: () => void;\n}\n\nexport function EmailVerification({ email, onSuccess, onBack }: EmailVerificationProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isResending, setIsResending] = useState(false);\n  const [verificationSuccess, setVerificationSuccess] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<EmailVerificationRequest>({\n    resolver: zodResolver(emailVerificationSchema),\n    defaultValues: {\n      email,\n      verificationCode: '',\n    },\n  });\n\n  const onSubmit = async (data: EmailVerificationRequest) => {\n    setIsLoading(true);\n    try {\n      const response = await apiRequest('POST', '/api/auth/verify-email', data);\n      const result = await response.json();\n\n      if (result.success) {\n        // Show success animation first\n        setVerificationSuccess(true);\n        \n        // Invalidate auth cache to refetch user data\n        queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n        \n        toast({\n          title: 'üéâ Email Verified Successfully!',\n          description: 'Welcome to Passport Photo Generator! You can now create professional passport photos.',\n          duration: 5000,\n        });\n        \n        // Delay the transition to show the success animation\n        setTimeout(() => {\n          onSuccess?.();\n        }, 2500);\n      } else {\n        toast({\n          title: 'Verification Failed',\n          description: result.message,\n          variant: 'destructive',\n        });\n      }\n    } catch (error: any) {\n      toast({\n        title: 'Verification Failed',\n        description: error.message || 'An unexpected error occurred',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleResendCode = async () => {\n    setIsResending(true);\n    try {\n      const response = await apiRequest('POST', '/api/auth/resend-verification', { email });\n      const result = await response.json();\n\n      if (result.success) {\n        toast({\n          title: 'Code Sent!',\n          description: result.message,\n        });\n        form.reset({ email, verificationCode: '' });\n      } else {\n        toast({\n          title: 'Failed to Resend',\n          description: result.message,\n          variant: 'destructive',\n        });\n      }\n    } catch (error: any) {\n      toast({\n        title: 'Failed to Resend',\n        description: error.message || 'An unexpected error occurred',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsResending(false);\n    }\n  };\n\n  // Success animation screen\n  if (verificationSuccess) {\n    return (\n      <Card className=\"w-full max-w-md mx-auto border-0 shadow-2xl bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-950 dark:to-emerald-950 animate-in fade-in-0 duration-500\">\n        <CardContent className=\"p-20 text-center\">\n          <div className=\"space-y-8\">\n            {/* Animated checkmark */}\n            <div className=\"mx-auto relative\">\n              <div className=\"w-24 h-24 mx-auto bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center animate-in zoom-in-50 duration-700 delay-100 shadow-2xl\">\n                <CheckCircle2 className=\"w-12 h-12 text-white animate-in zoom-in-50 duration-500 delay-300\" />\n              </div>\n              \n              {/* Celebration particles */}\n              <div className=\"absolute -top-2 -left-2 w-4 h-4 bg-yellow-400 rounded-full celebration-bounce delay-500 shadow-lg\"></div>\n              <div className=\"absolute -top-4 -right-1 w-3 h-3 bg-blue-400 rounded-full celebration-bounce delay-700 shadow-lg\"></div>\n              <div className=\"absolute -bottom-1 -left-4 w-2 h-2 bg-pink-400 rounded-full celebration-bounce delay-1000 shadow-lg\"></div>\n              <div className=\"absolute -bottom-3 -right-3 w-3 h-3 bg-purple-400 rounded-full celebration-bounce delay-1200 shadow-lg\"></div>\n              <div className=\"absolute top-6 -left-6 w-2 h-2 bg-green-400 rounded-full celebration-bounce delay-300 shadow-lg\"></div>\n              <div className=\"absolute top-8 -right-4 w-3 h-3 bg-orange-400 rounded-full celebration-bounce delay-900 shadow-lg\"></div>\n              \n              {/* Expanding ring effect */}\n              <div className=\"absolute inset-0 border-4 border-green-300 rounded-full animate-ping opacity-75\"></div>\n              <div className=\"absolute inset-2 border-2 border-green-400 rounded-full animate-ping opacity-50 animation-delay-150\"></div>\n            </div>\n\n            {/* Success message */}\n            <div className=\"space-y-4 animate-in slide-in-from-bottom-4 duration-700 delay-500\">\n              <h2 className=\"text-3xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent\">\n                Email Verified!\n              </h2>\n              <p className=\"text-lg text-green-700 dark:text-green-300\">\n                Welcome to Passport Photo Generator\n              </p>\n              <p className=\"text-green-600 dark:text-green-400\">\n                Redirecting you to create professional photos...\n              </p>\n            </div>\n\n            {/* Loading dots */}\n            <div className=\"flex justify-center space-x-2 animate-in fade-in-0 duration-500 delay-1000\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-bounce\"></div>\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-bounce delay-100\"></div>\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-bounce delay-200\"></div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto border-0 shadow-2xl bg-gradient-to-br from-white to-gray-50 dark:from-gray-900 dark:to-gray-800\">\n      <CardHeader className=\"space-y-6 text-center pb-8\">\n        <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center shadow-lg\">\n          <Mail className=\"w-8 h-8 text-white\" />\n        </div>\n        <div className=\"space-y-2\">\n          <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n            Check Your Email\n          </CardTitle>\n          <CardDescription className=\"text-base leading-relaxed\">\n            We've sent a 6-digit verification code to<br />\n            <span className=\"font-semibold text-foreground bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded-md mt-2 inline-block\">\n              {email}\n            </span>\n          </CardDescription>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-8\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n            <FormField\n              control={form.control}\n              name=\"verificationCode\"\n              render={({ field }) => (\n                <FormItem className=\"space-y-4\">\n                  <FormLabel className=\"text-center block text-lg font-medium\">\n                    Enter Verification Code\n                  </FormLabel>\n                  <FormControl>\n                    <div className=\"flex justify-center\">\n                      <InputOTP\n                        maxLength={6}\n                        value={field.value}\n                        onChange={field.onChange}\n                        className=\"gap-3\"\n                      >\n                        <InputOTPGroup className=\"gap-3\">\n                          <InputOTPSlot \n                            index={0} \n                            className=\"w-12 h-12 text-2xl font-bold border-2 border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-800 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800 transition-all duration-200 shadow-sm\" \n                          />\n                          <InputOTPSlot \n                            index={1} \n                            className=\"w-12 h-12 text-2xl font-bold border-2 border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-800 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800 transition-all duration-200 shadow-sm\" \n                          />\n                          <InputOTPSlot \n                            index={2} \n                            className=\"w-12 h-12 text-2xl font-bold border-2 border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-800 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800 transition-all duration-200 shadow-sm\" \n                          />\n                          <InputOTPSlot \n                            index={3} \n                            className=\"w-12 h-12 text-2xl font-bold border-2 border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-800 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800 transition-all duration-200 shadow-sm\" \n                          />\n                          <InputOTPSlot \n                            index={4} \n                            className=\"w-12 h-12 text-2xl font-bold border-2 border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-800 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800 transition-all duration-200 shadow-sm\" \n                          />\n                          <InputOTPSlot \n                            index={5} \n                            className=\"w-12 h-12 text-2xl font-bold border-2 border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-800 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800 transition-all duration-200 shadow-sm\" \n                          />\n                        </InputOTPGroup>\n                      </InputOTP>\n                    </div>\n                  </FormControl>\n                  <FormMessage className=\"text-center\" />\n                </FormItem>\n              )}\n            />\n\n            <Button \n              type=\"submit\" \n              className=\"w-full h-12 text-lg font-semibold bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-[1.02]\" \n              disabled={isLoading || form.watch('verificationCode').length !== 6}\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                  Verifying...\n                </>\n              ) : (\n                <>\n                  <CheckCircle2 className=\"mr-2 h-5 w-5\" />\n                  Verify Email\n                </>\n              )}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n\n      <CardFooter className=\"flex flex-col space-y-6 pt-8\">\n        <div className=\"flex items-center justify-center space-x-6\">\n          <button \n            onClick={handleResendCode}\n            disabled={isResending}\n            className=\"flex items-center gap-2 px-6 py-3 rounded-full bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-all duration-200 font-medium text-sm disabled:opacity-50 hover:shadow-md\"\n          >\n            {isResending ? (\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n            ) : (\n              <RotateCcw className=\"h-4 w-4\" />\n            )}\n            Resend Code\n          </button>\n          \n          {onBack && (\n            <button \n              onClick={onBack}\n              className=\"flex items-center gap-2 px-6 py-3 rounded-full border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800 transition-all duration-200 font-medium text-sm hover:shadow-md\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n              Back\n            </button>\n          )}\n        </div>\n        \n        <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/30 dark:to-purple-950/30 rounded-xl p-4 border border-blue-100 dark:border-blue-800\">\n          <div className=\"flex items-start gap-3\">\n            <Clock className=\"h-5 w-5 text-blue-600 dark:text-blue-400 mt-0.5 flex-shrink-0\" />\n            <div className=\"space-y-1\">\n              <p className=\"text-sm font-medium text-blue-900 dark:text-blue-100\">\n                Code expires in 15 minutes\n              </p>\n              <p className=\"text-xs text-blue-700 dark:text-blue-300\">\n                Check your spam folder if you don't see the email. The code is case-sensitive.\n              </p>\n            </div>\n          </div>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":13654},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Hide Vite error overlay */\n#vite-error-overlay,\n.vite-error-overlay,\n[data-vite-error-overlay],\nvite-error-overlay {\n  display: none !important;\n  visibility: hidden !important;\n  opacity: 0 !important;\n  pointer-events: none !important;\n}\n\n/* Hide runtime error modal overlay */\n[id*=\"error-overlay\"],\n[class*=\"error-overlay\"],\n[data-testid*=\"error-overlay\"] {\n  display: none !important;\n}\n\n:root {\n  --background: hsl(220, 20%, 97%);\n  --foreground: hsl(240, 10%, 10%);\n  --muted: hsl(240, 10%, 96%);\n  --muted-foreground: hsl(240, 4%, 46%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(240, 10%, 10%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(240, 10%, 10%);\n  --border: hsl(240, 10%, 88%);\n  --input: hsl(240, 10%, 92%);\n  --primary: hsl(262, 90%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 8%, 94%);\n  --secondary-foreground: hsl(240, 6%, 10%);\n  --accent: hsl(262, 90%, 96%);\n  --accent-foreground: hsl(262, 90%, 40%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --ring: hsl(262, 90%, 60%);\n  --success: hsl(142, 76%, 42%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --gradient-primary: linear-gradient(135deg, hsl(262, 90%, 60%) 0%, hsl(213, 94%, 65%) 50%, hsl(180, 90%, 55%) 100%);\n  --gradient-secondary: linear-gradient(135deg, hsl(262, 90%, 96%) 0%, hsl(213, 94%, 96%) 100%);\n  --gradient-accent: linear-gradient(135deg, hsl(313, 90%, 65%) 0%, hsl(262, 90%, 60%) 100%);\n  --shadow-primary: 0 20px 25px -5px rgba(139, 92, 246, 0.15), 0 10px 10px -5px rgba(139, 92, 246, 0.08);\n  --shadow-card: 0 10px 15px -3px rgba(0, 0, 0, 0.08), 0 4px 6px -2px rgba(0, 0, 0, 0.04);\n  --shadow-elevated: 0 25px 50px -12px rgba(0, 0, 0, 0.15);\n  --radius: 0.875rem;\n}\n\n.dark {\n  --background: hsl(240, 20%, 6%);\n  --foreground: hsl(210, 40%, 98%);\n  --muted: hsl(240, 15%, 12%);\n  --muted-foreground: hsl(215, 20%, 70%);\n  --popover: hsl(240, 20%, 8%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --card: hsl(240, 18%, 8%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsl(240, 15%, 18%);\n  --input: hsl(240, 15%, 16%);\n  --primary: hsl(262, 85%, 65%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 15%, 15%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(240, 15%, 18%);\n  --accent-foreground: hsl(262, 85%, 70%);\n  --destructive: hsl(0, 72%, 55%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --ring: hsl(262, 85%, 65%);\n  --success: hsl(142, 76%, 50%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --gradient-primary: linear-gradient(135deg, hsl(262, 85%, 65%) 0%, hsl(213, 94%, 70%) 50%, hsl(180, 85%, 60%) 100%);\n  --gradient-secondary: linear-gradient(135deg, hsl(240, 15%, 15%) 0%, hsl(240, 15%, 12%) 100%);\n  --gradient-accent: linear-gradient(135deg, hsl(313, 85%, 65%) 0%, hsl(262, 85%, 65%) 100%);\n  --shadow-primary: 0 20px 25px -5px rgba(139, 92, 246, 0.3), 0 10px 10px -5px rgba(139, 92, 246, 0.2);\n  --shadow-card: 0 10px 15px -3px rgba(0, 0, 0, 0.6), 0 4px 6px -2px rgba(0, 0, 0, 0.4);\n  --shadow-elevated: 0 25px 50px -12px rgba(0, 0, 0, 0.8);\n  --radius: 0.875rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .bg-success {\n    background-color: var(--success);\n  }\n  \n  .text-success {\n    color: var(--success);\n  }\n  \n  .border-success {\n    border-color: var(--success);\n  }\n  \n  .hover\\:bg-success:hover {\n    background-color: var(--success);\n  }\n\n  .bg-gradient-primary {\n    background: var(--gradient-primary);\n  }\n\n  .bg-gradient-secondary {\n    background: var(--gradient-secondary);\n  }\n\n  .bg-gradient-accent {\n    background: var(--gradient-accent);\n  }\n\n  .shadow-primary {\n    box-shadow: var(--shadow-primary);\n  }\n\n  .shadow-card {\n    box-shadow: var(--shadow-card);\n  }\n\n  .shadow-elevated {\n    box-shadow: var(--shadow-elevated);\n  }\n\n  .glass-effect {\n    background: rgba(255, 255, 255, 0.65);\n    backdrop-filter: blur(20px) saturate(180%);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n  }\n\n  .dark .glass-effect {\n    background: rgba(20, 20, 40, 0.7);\n    backdrop-filter: blur(20px) saturate(180%);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .hover-lift {\n    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1), box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .hover-lift:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.15), 0 10px 10px -5px rgba(0, 0, 0, 0.1);\n  }\n\n  .hover-scale {\n    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .hover-scale:hover {\n    transform: scale(1.05);\n  }\n\n  .hover-glow {\n    transition: box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .hover-glow:hover {\n    box-shadow: 0 0 20px rgba(139, 92, 246, 0.4), 0 0 40px rgba(139, 92, 246, 0.2);\n  }\n\n  /* Animation delays for success transition */\n  .animation-delay-150 {\n    animation-delay: 150ms;\n  }\n\n  .delay-100 {\n    animation-delay: 100ms;\n  }\n\n  .delay-200 {\n    animation-delay: 200ms;\n  }\n\n  .delay-300 {\n    animation-delay: 300ms;\n  }\n\n  .delay-500 {\n    animation-delay: 500ms;\n  }\n\n  .delay-700 {\n    animation-delay: 700ms;\n  }\n\n  .delay-1000 {\n    animation-delay: 1000ms;\n  }\n\n  .delay-1200 {\n    animation-delay: 1200ms;\n  }\n\n  /* Success animation styles */\n  @keyframes celebration-bounce {\n    0%, 20%, 53%, 80%, 100% {\n      transform: translate3d(0, 0, 0);\n    }\n    40%, 43% {\n      transform: translate3d(0, -15px, 0);\n    }\n    70% {\n      transform: translate3d(0, -7px, 0);\n    }\n    90% {\n      transform: translate3d(0, -2px, 0);\n    }\n  }\n\n  .celebration-bounce {\n    animation: celebration-bounce 2s ease-in-out infinite;\n  }\n\n  /* Loading screen animations */\n  @keyframes blob {\n    0% {\n      transform: translate(0px, 0px) scale(1);\n    }\n    33% {\n      transform: translate(30px, -50px) scale(1.1);\n    }\n    66% {\n      transform: translate(-20px, 20px) scale(0.9);\n    }\n    100% {\n      transform: translate(0px, 0px) scale(1);\n    }\n  }\n\n  @keyframes float {\n    0%, 100% {\n      transform: translateY(0px);\n    }\n    50% {\n      transform: translateY(-20px);\n    }\n  }\n\n  @keyframes loading-bar {\n    0% {\n      transform: translateX(-100%);\n    }\n    50% {\n      transform: translateX(0%);\n    }\n    100% {\n      transform: translateX(100%);\n    }\n  }\n\n  @keyframes spin-slow {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n\n  @keyframes spin-reverse {\n    from {\n      transform: rotate(360deg);\n    }\n    to {\n      transform: rotate(0deg);\n    }\n  }\n\n  .animate-blob {\n    animation: blob 7s infinite;\n  }\n\n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n\n  .animate-loading-bar {\n    animation: loading-bar 2s ease-in-out infinite;\n  }\n\n  .animate-spin-slow {\n    animation: spin-slow 3s linear infinite;\n  }\n\n  .animate-spin-reverse {\n    animation: spin-reverse 1s linear infinite;\n  }\n\n  .animation-delay-2000 {\n    animation-delay: 2s;\n  }\n\n  .animation-delay-4000 {\n    animation-delay: 4s;\n  }\n\n  /* Grid pattern background */\n  .bg-grid-white\\/5 {\n    background-image: linear-gradient(rgba(255,255,255,0.05) 1px, transparent 1px),\n                      linear-gradient(90deg, rgba(255,255,255,0.05) 1px, transparent 1px);\n  }\n\n  /* Performance optimizations for animations */\n  .animate-blob,\n  .animate-float,\n  .animate-loading-bar,\n  .animate-spin-slow,\n  .animate-spin-reverse {\n    will-change: transform;\n    transform-origin: center;\n  }\n\n  /* Smooth transitions for loading states */\n  .loading-fade-in {\n    animation: fadeIn 0.3s ease-in-out;\n  }\n\n  .loading-fade-out {\n    animation: fadeOut 0.3s ease-in-out;\n  }\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n      transform: scale(0.95);\n    }\n    to {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n\n  @keyframes fadeOut {\n    from {\n      opacity: 1;\n      transform: scale(1);\n    }\n    to {\n      opacity: 0;\n      transform: scale(0.95);\n    }\n  }\n\n  /* Delay classes for staggered animations */\n  .delay-500 {\n    animation-delay: 0.5s;\n  }\n\n  .delay-1000 {\n    animation-delay: 1s;\n  }\n\n  .delay-1500 {\n    animation-delay: 1.5s;\n  }\n\n  .delay-2000 {\n    animation-delay: 2s;\n  }\n\n  .delay-3000 {\n    animation-delay: 3s;\n  }\n\n  /* Enhanced entrance animations */\n  @keyframes slideInUp {\n    from {\n      opacity: 0;\n      transform: translateY(30px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes slideInDown {\n    from {\n      opacity: 0;\n      transform: translateY(-30px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes slideInLeft {\n    from {\n      opacity: 0;\n      transform: translateX(-30px);\n    }\n    to {\n      opacity: 1;\n      transform: translateX(0);\n    }\n  }\n\n  @keyframes slideInRight {\n    from {\n      opacity: 0;\n      transform: translateX(30px);\n    }\n    to {\n      opacity: 1;\n      transform: translateX(0);\n    }\n  }\n\n  @keyframes scaleIn {\n    from {\n      opacity: 0;\n      transform: scale(0.9);\n    }\n    to {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n\n  @keyframes pulse-glow {\n    0%, 100% {\n      box-shadow: 0 0 10px rgba(139, 92, 246, 0.3);\n    }\n    50% {\n      box-shadow: 0 0 20px rgba(139, 92, 246, 0.6);\n    }\n  }\n\n  @keyframes shimmer {\n    0% {\n      background-position: -1000px 0;\n    }\n    100% {\n      background-position: 1000px 0;\n    }\n  }\n\n  @keyframes bounce-subtle {\n    0%, 100% {\n      transform: translateY(0);\n    }\n    50% {\n      transform: translateY(-10px);\n    }\n  }\n\n  .animate-slide-in-up {\n    animation: slideInUp 0.6s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .animate-slide-in-down {\n    animation: slideInDown 0.6s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .animate-slide-in-left {\n    animation: slideInLeft 0.6s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .animate-slide-in-right {\n    animation: slideInRight 0.6s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .animate-scale-in {\n    animation: scaleIn 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .animate-pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite;\n  }\n\n  .animate-shimmer {\n    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);\n    background-size: 1000px 100%;\n    animation: shimmer 2s infinite;\n  }\n\n  .animate-bounce-subtle {\n    animation: bounce-subtle 3s ease-in-out infinite;\n  }\n\n  /* Smooth transitions for all interactive elements */\n  button, a, input, select, textarea {\n    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n}\n","size_bytes":10638},"client/src/pages/passport-generator.tsx":{"content":"import { useState, useRef, useCallback, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { PhotoSettings, UploadedImage, LayoutResult, Preset, CropSettings, BackgroundSettings } from \"@shared/schema\";\nimport { FileUpload } from \"@/components/ui/file-upload\";\nimport { Upload, Settings, FileText, Download, RotateCcw, Search, SearchCheck, Image, ZoomIn, ZoomOut, RotateCw, Save, Trash2, BookOpen, Crop, Move, RotateCw as Rotate, Scissors, Palette, Camera, Sparkles, LogOut, History, User as UserIcon } from \"lucide-react\";\nimport { ThemeToggle } from \"@/components/ui/theme-toggle\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { User } from \"@shared/schema\";\nimport { PageTransition } from \"@/components/ui/loading-screen\";\n\nexport default function PassportGenerator() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const { user } = useAuth() as { user: User | null };\n  \n  const [uploadedImage, setUploadedImage] = useState<UploadedImage | null>(null);\n  const [photoSettings, setPhotoSettings] = useState<PhotoSettings>({\n    width: 35,\n    height: 45,\n    quantity: 8,\n    layout: 'auto',\n    spacing: 5,\n    topMargin: 10\n  });\n  const [borderWidth, setBorderWidth] = useState<number>(0);\n  const [savePresetDialog, setSavePresetDialog] = useState<boolean>(false);\n  const [presetName, setPresetName] = useState<string>(\"\");\n  const [presetDescription, setPresetDescription] = useState<string>(\"\");\n  const [cropSettings, setCropSettings] = useState({\n    x: 0,\n    y: 0,\n    width: 100,\n    height: 100,\n    scale: 1,\n    rotation: 0\n  });\n  const [layoutResult, setLayoutResult] = useState<LayoutResult | null>(null);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [autoPreview, setAutoPreview] = useState<boolean>(true);\n  const [backgroundSettings, setBackgroundSettings] = useState<BackgroundSettings>({\n    removeBackground: false,\n    backgroundColor: '#ffffff',\n    backgroundImage: undefined\n  });\n  const [backgroundRemovedUrl, setBackgroundRemovedUrl] = useState<string | null>(null);\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragStart, setDragStart] = useState<{ x: number; y: number } | null>(null);\n  const [isResizing, setIsResizing] = useState<boolean>(false);\n  const [resizeHandle, setResizeHandle] = useState<string>('');\n\n  const cropPreviewRef = useRef<HTMLDivElement>(null);\n\n  // Upload mutation\n  const uploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      console.log('Uploading file:', file.name, file.size, file.type);\n      const formData = new FormData();\n      formData.append('image', file);\n      \n      // Log FormData contents\n      console.log('FormData created with image file');\n      \n      const response = await apiRequest('POST', '/api/upload', formData);\n      return response.json();\n    },\n    onSuccess: (data: UploadedImage) => {\n      setUploadedImage(data);\n      \n      toast({\n        title: \"Success\",\n        description: \"Image uploaded successfully!\",\n      });\n      // Trigger initial layout generation\n      generateLayoutMutation.mutate({ imageId: data.id, settings: photoSettings, borderWidth, cropSettings });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Upload failed\",\n        description: error.message || \"Failed to upload image\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Background removal mutation\n  const backgroundRemovalMutation = useMutation({\n    mutationFn: async ({ imageId, backgroundColor }: { imageId: string; backgroundColor: string }) => {\n      const response = await apiRequest('POST', '/api/remove-background', {\n        imageId,\n        backgroundColor\n      });\n      return response.json();\n    },\n    onSuccess: (data: { backgroundRemovedUrl: string; updatedImage: UploadedImage }) => {\n      setBackgroundRemovedUrl(data.backgroundRemovedUrl);\n      setUploadedImage(data.updatedImage);\n      \n      toast({\n        title: \"Success\",\n        description: \"Background removed successfully!\",\n      });\n      // Automatically regenerate layout with the background-removed image\n      generateLayoutMutation.mutate({ imageId: data.updatedImage.id, settings: photoSettings, borderWidth, cropSettings });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Background removal failed\",\n        description: error.message || \"Failed to remove background\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Generate layout mutation\n  const generateLayoutMutation = useMutation({\n    mutationFn: async ({ imageId, settings, borderWidth, cropSettings }: { imageId: string; settings: PhotoSettings; borderWidth?: number; cropSettings?: CropSettings }) => {\n      const response = await apiRequest('POST', '/api/generate-layout', { imageId, settings, borderWidth, cropSettings });\n      return response.json();\n    },\n    onSuccess: (data: LayoutResult) => {\n      setLayoutResult(data);\n      // Remove toast for automatic updates to avoid spam\n    },\n    onError: (error) => {\n      toast({\n        title: \"Generation failed\",\n        description: error.message || \"Failed to generate layout\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Download PDF mutation\n  const downloadPdfMutation = useMutation({\n    mutationFn: async ({ imageId, layoutId }: { imageId: string; layoutId?: string }) => {\n      const response = await apiRequest('POST', '/api/generate-pdf', { imageId, layoutId });\n      return response.blob();\n    },\n    onSuccess: (blob: Blob) => {\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `passport-photos-${uploadedImage?.originalName || 'photo'}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Success\",\n        description: \"PDF downloaded successfully!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Download failed\",\n        description: error.message || \"Failed to download PDF\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Download Image mutations (PNG/JPG)\n  const downloadImageMutation = useMutation({\n    mutationFn: async ({ imageId, format, layoutId }: { imageId: string; format: 'png' | 'jpg'; layoutId?: string }) => {\n      const response = await apiRequest('POST', '/api/generate-image', { imageId, format, layoutId });\n      const blob = await response.blob();\n      return { blob, format };\n    },\n    onSuccess: ({ blob, format }: { blob: Blob; format: string }) => {\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `passport-photos-${uploadedImage?.originalName || 'photo'}.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Success\",\n        description: `${format.toUpperCase()} downloaded successfully!`,\n      });\n    },\n    onError: (error) => {\n      console.error('Download image error:', error);\n      toast({\n        title: \"Download failed\",\n        description: error.message || \"Failed to download image\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Presets query (with authentication error handling)\n  const { data: presets = [], refetch: refetchPresets } = useQuery({\n    queryKey: ['/api/presets'],\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error as Error)) {\n        return false;\n      }\n      return failureCount < 3;\n    },\n  }) as { data: Preset[], refetch: () => void };\n\n  // Get user image history\n  const { data: imageHistory = [] } = useQuery({\n    queryKey: ['/api/images/history'],\n    retry: (failureCount, error) => {\n      if (isUnauthorizedError(error as Error)) {\n        return false;\n      }\n      return failureCount < 3;\n    },\n  });\n\n  // Save preset mutation\n  const savePresetMutation = useMutation({\n    mutationFn: async ({ name, description, settings, borderWidth }: { name: string; description: string; settings: PhotoSettings; borderWidth: number }) => {\n      const response = await apiRequest('POST', '/api/presets', { name, description, settings, borderWidth });\n      return response.json();\n    },\n    onSuccess: () => {\n      refetchPresets();\n      setSavePresetDialog(false);\n      setPresetName(\"\");\n      setPresetDescription(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Preset saved successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Save failed\",\n        description: error.message || \"Failed to save preset\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete preset mutation\n  const deletePresetMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/presets/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      refetchPresets();\n      toast({\n        title: \"Success\",\n        description: \"Preset deleted successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Delete failed\",\n        description: error.message || \"Failed to delete preset\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Save cropped photo mutation\n  const saveCroppedMutation = useMutation({\n    mutationFn: async ({ imageId, cropSettings, photoSettings }: { imageId: string; cropSettings: CropSettings; photoSettings: PhotoSettings }) => {\n      const response = await apiRequest('POST', '/api/save-cropped-photo', { \n        imageId, \n        cropSettings, \n        width: photoSettings.width,\n        height: photoSettings.height,\n        replaceOriginal: true\n      });\n      return response.json();\n    },\n    onSuccess: (data: UploadedImage) => {\n      // Update the uploaded image with the new cropped version\n      setUploadedImage(data);\n      \n      // Reset crop settings since the image is now cropped\n      setCropSettings({\n        x: 0,\n        y: 0,\n        width: 100,\n        height: 100,\n        scale: 1,\n        rotation: 0\n      });\n      \n      // Regenerate layout with the new cropped image\n      if (autoPreview) {\n        generateLayoutMutation.mutate({ imageId: data.id, settings: photoSettings, borderWidth, cropSettings: {\n          x: 0, y: 0, width: 100, height: 100, scale: 1, rotation: 0\n        }});\n      }\n      \n      toast({\n        title: \"Success\",\n        description: \"Photo cropped and preview updated!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Save failed\",\n        description: error.message || \"Failed to save cropped photo\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileUpload = useCallback((file: File) => {\n    uploadMutation.mutate(file);\n  }, [uploadMutation]);\n\n  const handleGenerateLayout = () => {\n    if (!uploadedImage) {\n      toast({\n        title: \"No image\",\n        description: \"Please upload an image first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    generateLayoutMutation.mutate({ imageId: uploadedImage.id, settings: photoSettings, borderWidth, cropSettings });\n  };\n\n  // Auto-generate layout when settings change (only if auto preview is enabled)\n  useEffect(() => {\n    if (!uploadedImage || !autoPreview) return;\n    \n    const timeoutId = setTimeout(() => {\n      generateLayoutMutation.mutate({ imageId: uploadedImage.id, settings: photoSettings, borderWidth, cropSettings });\n    }, 100); // Instant preview with minimal debounce\n\n    return () => clearTimeout(timeoutId);\n  }, [uploadedImage, photoSettings, borderWidth, cropSettings, autoPreview]);\n\n  const handleDownloadPdf = () => {\n    if (!uploadedImage || !layoutResult) return;\n    downloadPdfMutation.mutate({ imageId: uploadedImage.id, layoutId: layoutResult.id });\n  };\n\n  const handleDownloadImage = (format: 'png' | 'jpg') => {\n    if (!uploadedImage || !layoutResult) return;\n    downloadImageMutation.mutate({ imageId: uploadedImage.id, format, layoutId: layoutResult.id });\n  };\n\n  const handleReset = () => {\n    setUploadedImage(null);\n    setLayoutResult(null);\n    setBorderWidth(0);\n    setCropSettings({\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 100,\n      scale: 1,\n      rotation: 0\n    });\n    setPhotoSettings({\n      width: 35,\n      height: 45,\n      quantity: 8,\n      layout: 'auto',\n      spacing: 5,\n      topMargin: 10\n    });\n  };\n\n  const handleSavePreset = () => {\n    if (!presetName.trim()) {\n      toast({\n        title: \"Invalid name\",\n        description: \"Please enter a preset name\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    savePresetMutation.mutate({\n      name: presetName.trim(),\n      description: presetDescription.trim(),\n      settings: photoSettings,\n      borderWidth\n    });\n  };\n\n  const handleLoadPreset = (preset: Preset) => {\n    setPhotoSettings(preset.settings);\n    setBorderWidth(preset.borderWidth);\n    toast({\n      title: \"Preset loaded\",\n      description: `\"${preset.name}\" settings applied successfully`,\n    });\n  };\n\n  const handleDeletePreset = (preset: Preset) => {\n    if (confirm(`Are you sure you want to delete the preset \"${preset.name}\"?`)) {\n      deletePresetMutation.mutate(preset.id);\n    }\n  };\n\n  const handleSaveCroppedPhoto = () => {\n    if (!uploadedImage) {\n      toast({\n        title: \"No image\",\n        description: \"Please upload an image first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    saveCroppedMutation.mutate({ \n      imageId: uploadedImage.id, \n      cropSettings, \n      photoSettings \n    });\n  };\n\n  const handleCropChange = (property: keyof typeof cropSettings, value: number) => {\n    setCropSettings(prev => ({\n      ...prev,\n      [property]: value\n    }));\n    \n    // Force immediate preview update for crop changes\n    if (uploadedImage && autoPreview) {\n      setTimeout(() => {\n        generateLayoutMutation.mutate({ imageId: uploadedImage.id, settings: photoSettings, borderWidth, cropSettings: { ...cropSettings, [property]: value } });\n      }, 100);\n    }\n  };\n\n  // Helper function to get touch/mouse coordinates\n  const getEventCoordinates = (e: React.MouseEvent | React.TouchEvent | MouseEvent | TouchEvent) => {\n    if ('touches' in e && e.touches.length > 0) {\n      return { clientX: e.touches[0].clientX, clientY: e.touches[0].clientY };\n    } else if ('clientX' in e) {\n      return { clientX: e.clientX, clientY: e.clientY };\n    }\n    return { clientX: 0, clientY: 0 };\n  };\n\n  // Manual crop drag handlers (supports both mouse and touch)\n  const handleCropStart = (e: React.MouseEvent | React.TouchEvent) => {\n    e.preventDefault();\n    const rect = cropPreviewRef.current?.getBoundingClientRect();\n    if (!rect) return;\n    \n    const { clientX, clientY } = getEventCoordinates(e);\n    const x = ((clientX - rect.left) / rect.width) * 100;\n    const y = ((clientY - rect.top) / rect.height) * 100;\n    \n    const currentLeft = (100 - cropSettings.width) / 2 + cropSettings.x / 2;\n    const currentTop = (100 - cropSettings.height) / 2 + cropSettings.y / 2;\n    \n    setIsDragging(true);\n    setDragStart({ x: x - currentLeft, y: y - currentTop });\n  };\n\n  const handleCropMove = useCallback((e: MouseEvent | TouchEvent) => {\n    if (!isDragging || !dragStart || !cropPreviewRef.current) return;\n    \n    const rect = cropPreviewRef.current.getBoundingClientRect();\n    const { clientX, clientY } = getEventCoordinates(e);\n    const x = ((clientX - rect.left) / rect.width) * 100;\n    const y = ((clientY - rect.top) / rect.height) * 100;\n    \n    const newLeft = Math.max(0, Math.min(100 - cropSettings.width, x - dragStart.x));\n    const newTop = Math.max(0, Math.min(100 - cropSettings.height, y - dragStart.y));\n    \n    const newCenterX = newLeft + cropSettings.width / 2;\n    const newCenterY = newTop + cropSettings.height / 2;\n    \n    setCropSettings(prev => ({\n      ...prev,\n      x: (newCenterX - 50) * 2,\n      y: (newCenterY - 50) * 2\n    }));\n  }, [isDragging, dragStart, cropSettings.width, cropSettings.height]);\n\n  const handleCropEnd = useCallback(() => {\n    setIsDragging(false);\n    setDragStart(null);\n    setIsResizing(false);\n    setResizeHandle('');\n    \n    // Trigger preview update after drag/resize ends\n    if (uploadedImage && autoPreview) {\n      setTimeout(() => {\n        generateLayoutMutation.mutate({ imageId: uploadedImage.id, settings: photoSettings, borderWidth, cropSettings });\n      }, 100);\n    }\n  }, [uploadedImage, autoPreview, photoSettings, borderWidth, cropSettings]);\n\n  // Resize handlers (supports both mouse and touch)\n  const handleResizeStart = (e: React.MouseEvent | React.TouchEvent, handle: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsResizing(true);\n    setResizeHandle(handle);\n  };\n\n  const handleResizeMove = useCallback((e: MouseEvent | TouchEvent) => {\n    if (!isResizing || !cropPreviewRef.current) return;\n    \n    const rect = cropPreviewRef.current.getBoundingClientRect();\n    const { clientX, clientY } = getEventCoordinates(e);\n    const x = ((clientX - rect.left) / rect.width) * 100;\n    const y = ((clientY - rect.top) / rect.height) * 100;\n    \n    // Calculate current crop boundaries\n    const currentLeft = (100 - cropSettings.width) / 2 + cropSettings.x / 2;\n    const currentTop = (100 - cropSettings.height) / 2 + cropSettings.y / 2;\n    const currentRight = currentLeft + cropSettings.width;\n    const currentBottom = currentTop + cropSettings.height;\n    \n    let newLeft = currentLeft;\n    let newTop = currentTop;\n    let newRight = currentRight;\n    let newBottom = currentBottom;\n    \n    // Handle resize based on which handle is being dragged\n    if (resizeHandle.includes('left')) {\n      newLeft = Math.max(0, Math.min(currentRight - 20, x));\n    }\n    if (resizeHandle.includes('right')) {\n      newRight = Math.max(currentLeft + 20, Math.min(100, x));\n    }\n    if (resizeHandle.includes('top')) {\n      newTop = Math.max(0, Math.min(currentBottom - 20, y));\n    }\n    if (resizeHandle.includes('bottom')) {\n      newBottom = Math.max(currentTop + 20, Math.min(100, y));\n    }\n    \n    // Calculate new width, height, x, and y from boundaries\n    const newWidth = newRight - newLeft;\n    const newHeight = newBottom - newTop;\n    const newCenterX = newLeft + newWidth / 2;\n    const newCenterY = newTop + newHeight / 2;\n    \n    setCropSettings(prev => ({\n      ...prev,\n      width: newWidth,\n      height: newHeight,\n      x: (newCenterX - 50) * 2,\n      y: (newCenterY - 50) * 2\n    }));\n  }, [isResizing, resizeHandle, cropSettings]);\n\n  // Add event listeners for manual crop (both mouse and touch)\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener('mousemove', handleCropMove);\n      document.addEventListener('mouseup', handleCropEnd);\n      document.addEventListener('touchmove', handleCropMove, { passive: false });\n      document.addEventListener('touchend', handleCropEnd);\n    }\n    if (isResizing) {\n      document.addEventListener('mousemove', handleResizeMove);\n      document.addEventListener('mouseup', handleCropEnd);\n      document.addEventListener('touchmove', handleResizeMove, { passive: false });\n      document.addEventListener('touchend', handleCropEnd);\n    }\n    \n    return () => {\n      document.removeEventListener('mousemove', handleCropMove);\n      document.removeEventListener('mouseup', handleCropEnd);\n      document.removeEventListener('touchmove', handleCropMove);\n      document.removeEventListener('touchend', handleCropEnd);\n      document.removeEventListener('mousemove', handleResizeMove);\n    };\n  }, [isDragging, isResizing, handleCropMove, handleCropEnd, handleResizeMove]);\n\n  const resetCrop = () => {\n    const resetSettings = {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 100,\n      scale: 1,\n      rotation: 0\n    };\n    setCropSettings(resetSettings);\n    \n    // Trigger immediate preview update after reset\n    if (uploadedImage && autoPreview) {\n      setTimeout(() => {\n        generateLayoutMutation.mutate({ imageId: uploadedImage.id, settings: photoSettings, borderWidth, cropSettings: resetSettings });\n      }, 100);\n    }\n  };\n\n  const setPresetSize = (width: number, height: number) => {\n    setPhotoSettings(prev => ({ ...prev, width, height }));\n  };\n\n  const handleZoomIn = () => {\n    setZoomLevel(prev => Math.min(prev + 0.25, 3)); // Max 3x zoom\n  };\n\n  const handleZoomOut = () => {\n    setZoomLevel(prev => Math.max(prev - 0.25, 0.5)); // Min 0.5x zoom\n  };\n\n  const handleResetZoom = () => {\n    setZoomLevel(1);\n  };\n\n  // Draw high-quality canvas preview\n  useEffect(() => {\n    if (!layoutResult || !canvasRef.current) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Use device pixel ratio for crisp rendering\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    \n    // A4 dimensions in mm converted to pixels at 150 DPI for preview\n    const DPI = 150;\n    const MM_TO_PIXELS = DPI / 25.4;\n    const A4_WIDTH_MM = 210;\n    const A4_HEIGHT_MM = 297;\n    \n    // Calculate actual A4 size in pixels\n    const a4WidthPx = A4_WIDTH_MM * MM_TO_PIXELS;\n    const a4HeightPx = A4_HEIGHT_MM * MM_TO_PIXELS;\n    \n    // Scale to fit in container while maintaining aspect ratio\n    const containerWidth = canvas.parentElement?.offsetWidth || 400;\n    const containerHeight = canvas.parentElement?.offsetHeight || 566;\n    \n    // Calculate scale to fit properly in the available space, then apply zoom\n    const baseScale = Math.min(containerWidth / a4WidthPx, containerHeight / a4HeightPx);\n    const scale = baseScale * zoomLevel;\n    \n    // Set canvas size for crisp rendering\n    const displayWidth = a4WidthPx * scale;\n    const displayHeight = a4HeightPx * scale;\n    \n    canvas.style.width = displayWidth + 'px';\n    canvas.style.height = displayHeight + 'px';\n    \n    // Scale for device pixel ratio\n    canvas.width = displayWidth * devicePixelRatio;\n    canvas.height = displayHeight * devicePixelRatio;\n    \n    // Scale the drawing context\n    ctx.scale(devicePixelRatio, devicePixelRatio);\n    \n    // Enable image smoothing for better quality\n    ctx.imageSmoothingEnabled = true;\n    ctx.imageSmoothingQuality = 'high';\n\n    // Clear canvas with white background\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(0, 0, displayWidth, displayHeight);\n\n    // Draw page border\n    ctx.strokeStyle = '#e5e7eb';\n    ctx.lineWidth = 1;\n    ctx.strokeRect(0, 0, displayWidth, displayHeight);\n\n    // Load and draw images\n    const img = new window.Image();\n    img.crossOrigin = 'anonymous';\n    img.onload = () => {\n      const { settings, photosPerRow, totalRows } = layoutResult;\n      \n      // Calculate photo dimensions and spacing in preview scale\n      const photoWidthPx = settings.width * MM_TO_PIXELS * scale;\n      const photoHeightPx = settings.height * MM_TO_PIXELS * scale;\n      const marginPx = 10 * MM_TO_PIXELS * scale; // 10mm margin\n      \n      const availableWidth = displayWidth - (2 * marginPx);\n      const availableHeight = displayHeight - (2 * marginPx);\n      \n      // Calculate positioning based on layout type\n      let startX: number, startY: number, spacingX: number, spacingY: number;\n      \n      // Always use user-defined spacing (consistent with server logic)\n      const spacingMm = settings.spacing || 5;\n      spacingX = spacingMm * MM_TO_PIXELS * scale;\n      spacingY = spacingMm * MM_TO_PIXELS * scale;\n      \n      // Calculate total grid dimensions\n      const totalGridWidth = photosPerRow * photoWidthPx + (photosPerRow - 1) * spacingX;\n      const totalGridHeight = totalRows * photoHeightPx + (totalRows - 1) * spacingY;\n      \n      if (settings.layout === 'auto') {\n        // Auto layout - center the grid\n        startX = (displayWidth - totalGridWidth) / 2;\n        startY = (displayHeight - totalGridHeight) / 2;\n      } else {\n        // Specific position layout\n        if (settings.layout.includes('left')) {\n          startX = marginPx;\n        } else if (settings.layout.includes('right')) {\n          startX = displayWidth - marginPx - totalGridWidth;\n        } else { // middle\n          startX = (displayWidth - totalGridWidth) / 2;\n        }\n        \n        if (settings.layout.includes('top')) {\n          startY = marginPx;\n        } else if (settings.layout.includes('down')) {\n          startY = displayHeight - marginPx - totalGridHeight;\n        } else { // middle\n          startY = (displayHeight - totalGridHeight) / 2;\n        }\n      }\n\n      // Simply draw the complete layout image from server (no duplicate layout logic)\n      ctx.drawImage(img, 0, 0, displayWidth, displayHeight);\n      \n\n    };\n    // Use the preview endpoint to show exact same layout as downloads\n    // Add layout result ID to ensure preview uses the latest layout data\n    img.src = `/api/generate-preview/${uploadedImage?.id}?layoutId=${layoutResult.id}&t=${Date.now()}`;\n  }, [layoutResult, zoomLevel]);\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-muted relative\">\n      {/* Header */}\n      <header className=\"bg-white/90 dark:bg-slate-900/95 backdrop-blur-xl border-b border-border/50 dark:border-slate-700/50 shadow-card dark:shadow-slate-900/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"bg-gradient-primary p-3 rounded-2xl shadow-primary\">\n                <Camera className=\"h-7 w-7 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold bg-gradient-to-r from-primary to-blue-600 bg-clip-text text-transparent\">\n                  Passport Photo Creator\n                </h1>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Professional photos in minutes with AI background removal\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              {user && (\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    {user.profileImageUrl ? (\n                      <img\n                        src={user.profileImageUrl}\n                        alt=\"Profile\"\n                        className=\"h-8 w-8 rounded-full object-cover\"\n                      />\n                    ) : (\n                      <div className=\"h-8 w-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                        <UserIcon className=\"h-4 w-4 text-primary\" />\n                      </div>\n                    )}\n                    <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      {user.isGuest ? 'Guest User' : (user.firstName || user.email || 'User')}\n                    </span>\n                  </div>\n                  <Button\n                    onClick={handleLogout}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex items-center space-x-2\"\n                  >\n                    <LogOut className=\"h-4 w-4\" />\n                    <span>Logout</span>\n                  </Button>\n                </div>\n              )}\n              <div className=\"hidden sm:flex items-center space-x-2 text-sm text-muted-foreground bg-muted/50 dark:bg-slate-800/70 px-4 py-2 rounded-full border border-transparent dark:border-slate-600/30 dark:shadow-lg\">\n                <Sparkles className=\"h-4 w-4 text-primary\" />\n                <span>AI-Powered Processing</span>\n              </div>\n              <ThemeToggle />\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-6 py-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 min-h-[calc(100vh-200px)]\">\n          \n          {/* Left Panel: Upload and Basic Settings */}\n          <div className=\"space-y-6\">\n            \n            {/* Image Upload */}\n            <Card className=\"shadow-card dark:shadow-slate-900/50 border-0 bg-white/60 dark:bg-slate-800/80 backdrop-blur-sm dark:backdrop-blur-md\">\n              <CardContent className=\"p-8\">\n                <h2 className=\"text-2xl font-semibold text-foreground mb-6 flex items-center justify-center\">\n                  <div className=\"bg-gradient-primary p-3 rounded-lg mr-3 shadow-primary\">\n                    <Upload className=\"text-white h-6 w-6\" />\n                  </div>\n                  <span>Upload Your Photo</span>\n                </h2>\n                \n                <FileUpload\n                  onFileUpload={handleFileUpload}\n                  isUploading={uploadMutation.isPending}\n                  uploadedFile={uploadedImage}\n                  onRemoveFile={() => setUploadedImage(null)}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Presets Section */}\n            <Card className=\"shadow-card dark:shadow-slate-900/50 border-0 bg-white/60 dark:bg-slate-800/80 backdrop-blur-sm dark:backdrop-blur-md\">\n              <CardContent className=\"p-8\">\n                <h2 className=\"text-2xl font-semibold text-foreground mb-6 flex items-center justify-between\">\n                  <span className=\"flex items-center\">\n                    <div className=\"bg-gradient-primary p-3 rounded-lg mr-4 shadow-primary\">\n                      <BookOpen className=\"text-white h-6 w-6\" />\n                    </div>\n                    Saved Presets\n                  </span>\n                  <Dialog open={savePresetDialog} onOpenChange={setSavePresetDialog}>\n                    <DialogTrigger asChild>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Save className=\"h-4 w-4 mr-1\" />\n                        Save Current\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Save Settings as Preset</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4 py-4\">\n                        <div>\n                          <Label htmlFor=\"presetName\">Preset Name *</Label>\n                          <Input\n                            id=\"presetName\"\n                            value={presetName}\n                            onChange={(e) => setPresetName(e.target.value)}\n                            placeholder=\"e.g., US Passport, UK Visa Photo\"\n                            className=\"mt-1 border-gray-300 dark:border-slate-600\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"presetDescription\">Description (optional)</Label>\n                          <Textarea\n                            id=\"presetDescription\"\n                            value={presetDescription}\n                            onChange={(e) => setPresetDescription(e.target.value)}\n                            placeholder=\"Brief description of this preset...\"\n                            className=\"mt-1 border-gray-300 dark:border-slate-600\"\n                            rows={3}\n                          />\n                        </div>\n                        <div className=\"text-sm text-gray-600 dark:text-slate-400 p-3 bg-gray-50 dark:bg-slate-800 rounded border border-gray-300 dark:border-slate-600\">\n                          <strong>Current settings:</strong><br />\n                          Size: {photoSettings.width}√ó{photoSettings.height}mm<br />\n                          Quantity: {photoSettings.quantity}<br />\n                          Layout: {photoSettings.layout}<br />\n                          Spacing: {photoSettings.spacing}mm<br />\n                          Border: {borderWidth}mm\n                        </div>\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button variant=\"outline\" onClick={() => setSavePresetDialog(false)}>\n                            Cancel\n                          </Button>\n                          <Button \n                            onClick={handleSavePreset}\n                          >\n                            <Save className=\"h-4 w-4 mr-1\" />\n                            Save Preset\n                          </Button>\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </h2>\n\n                {presets.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <BookOpen className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">No saved presets yet.</p>\n                    <p className=\"text-xs\">Save your current settings to create your first preset.</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                    {presets.map((preset: Preset) => (\n                      <div key={preset.id} className=\"flex items-center justify-between p-3 border border-gray-300 dark:border-slate-600 rounded-lg hover:bg-gray-50 dark:hover:bg-slate-800\">\n                        <div className=\"flex-1 cursor-pointer\" onClick={() => handleLoadPreset(preset)}>\n                          <div className=\"font-medium text-sm\">{preset.name}</div>\n                          {preset.description && (\n                            <div className=\"text-xs text-gray-600 dark:text-slate-400 mt-1\">{preset.description}</div>\n                          )}\n                          <div className=\"text-xs text-gray-500 dark:text-slate-400 mt-1\">\n                            {preset.settings.width}√ó{preset.settings.height}mm ‚Ä¢ {preset.settings.quantity} photos ‚Ä¢ {preset.borderWidth}mm border\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleDeletePreset(preset);\n                          }}\n                          className=\"ml-2 h-8 w-8 p-0 text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Photo Controls */}\n            <Card className=\"shadow-card dark:shadow-slate-900/50 border-0 bg-white/60 dark:bg-slate-800/80 backdrop-blur-sm dark:backdrop-blur-md\">\n              <CardContent className=\"p-8\">\n                <h2 className=\"text-2xl font-semibold text-foreground mb-6 flex items-center\">\n                  <div className=\"bg-gradient-primary p-3 rounded-lg mr-4 shadow-primary\">\n                    <Settings className=\"text-white h-6 w-6\" />\n                  </div>\n                  Photo Settings\n                </h2>\n                \n                <div className=\"space-y-8\">\n                  {/* Dimensions */}\n                  <div>\n                    <Label className=\"text-lg font-medium text-gray-700 dark:text-slate-300 mb-4 block\">Photo Dimensions (mm)</Label>\n                    <div className=\"grid grid-cols-2 gap-6\">\n                      <div>\n                        <Label className=\"text-sm text-gray-600 dark:text-slate-400 mb-2 block\">Width</Label>\n                        <div className=\"relative\">\n                          <Input\n                            type=\"number\"\n                            value={photoSettings.width}\n                            min={10}\n                            max={100}\n                            onChange={(e) => setPhotoSettings(prev => ({ ...prev, width: parseInt(e.target.value) || 35 }))}\n                            className=\"pr-10 h-12 text-lg border-gray-300 dark:border-slate-600\"\n                          />\n                          <span className=\"absolute right-3 top-3 text-md text-gray-500 dark:text-slate-400\">mm</span>\n                        </div>\n                      </div>\n                      <div>\n                        <Label className=\"text-sm text-gray-600 dark:text-slate-400 mb-2 block\">Height</Label>\n                        <div className=\"relative\">\n                          <Input\n                            type=\"number\"\n                            value={photoSettings.height}\n                            min={10}\n                            max={150}\n                            onChange={(e) => setPhotoSettings(prev => ({ ...prev, height: parseInt(e.target.value) || 45 }))}\n                            className=\"pr-10 h-12 text-lg border-gray-300 dark:border-slate-600\"\n                          />\n                          <span className=\"absolute right-3 top-3 text-md text-gray-500 dark:text-slate-400\">mm</span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"mt-4 grid grid-cols-3 gap-3\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"default\"\n                        onClick={() => setPresetSize(35, 45)}\n                        className=\"text-sm py-3 bg-gradient-to-r from-primary/10 to-primary/5 border-primary/20 hover:from-primary/20 hover:to-primary/10\"\n                      >\n                        Passport (35√ó45)\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"default\"\n                        onClick={() => setPresetSize(51, 51)}\n                        className=\"text-sm py-3 bg-gradient-to-r from-primary/10 to-primary/5 border-primary/20 hover:from-primary/20 hover:to-primary/10\"\n                      >\n                        Visa (51√ó51)\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"default\"\n                        onClick={() => setPresetSize(25, 35)}\n                        className=\"text-sm py-3 bg-gradient-to-r from-primary/10 to-primary/5 border-primary/20 hover:from-primary/20 hover:to-primary/10\"\n                      >\n                        ID Card (25√ó35)\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Layout Position */}\n                  <div>\n                    <Label className=\"text-lg font-medium text-gray-700 dark:text-slate-300 mb-4\">Layout Position</Label>\n                    <select\n                      value={photoSettings.layout}\n                      onChange={(e) => setPhotoSettings(prev => ({ ...prev, layout: e.target.value as any }))}\n                      className=\"w-full px-4 py-3 border border-gray-300 dark:border-slate-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-purple-500 text-lg bg-white dark:bg-black text-gray-900 dark:text-white h-12\"\n                    >\n                      <option value=\"auto\">Auto Layout</option>\n                      <optgroup label=\"Top Positions\">\n                        <option value=\"top-left\">Top Left</option>\n                        <option value=\"top-middle\">Top Middle</option>\n                        <option value=\"top-right\">Top Right</option>\n                      </optgroup>\n                      <optgroup label=\"Middle Positions\">\n                        <option value=\"middle-left\">Middle Left</option>\n                        <option value=\"middle-middle\">Middle Center</option>\n                        <option value=\"middle-right\">Middle Right</option>\n                      </optgroup>\n                      <optgroup label=\"Bottom Positions\">\n                        <option value=\"down-left\">Bottom Left</option>\n                        <option value=\"down-middle\">Bottom Middle</option>\n                        <option value=\"down-right\">Bottom Right</option>\n                      </optgroup>\n                    </select>\n                    \n                    {/* Layout Diagram */}\n                    {photoSettings.layout !== 'auto' && (\n                      <div className=\"mt-3 p-3 bg-gray-50 dark:bg-slate-800 rounded-lg border border-gray-300 dark:border-slate-600\">\n                        <div className=\"text-xs text-gray-600 dark:text-slate-400 mb-2\">Position Preview:</div>\n                        <div className=\"w-full h-16 border-2 border-gray-300 dark:border-slate-600 rounded relative bg-white dark:bg-slate-900\">\n                          <div \n                            className={`absolute w-4 h-4 bg-blue-500 rounded-sm transition-all duration-200 ${\n                              photoSettings.layout === 'top-left' ? 'top-1 left-1' :\n                              photoSettings.layout === 'top-middle' ? 'top-1 left-1/2 transform -translate-x-1/2' :\n                              photoSettings.layout === 'top-right' ? 'top-1 right-1' :\n                              photoSettings.layout === 'middle-left' ? 'top-1/2 left-1 transform -translate-y-1/2' :\n                              photoSettings.layout === 'middle-middle' ? 'top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2' :\n                              photoSettings.layout === 'middle-right' ? 'top-1/2 right-1 transform -translate-y-1/2' :\n                              photoSettings.layout === 'down-left' ? 'bottom-1 left-1' :\n                              photoSettings.layout === 'down-middle' ? 'bottom-1 left-1/2 transform -translate-x-1/2' :\n                              photoSettings.layout === 'down-right' ? 'bottom-1 right-1' : ''\n                            }`}\n                          />\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Quantity Slider */}\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700 mb-3 flex items-center justify-between\">\n                      <span>Photos per A4 page</span>\n                      <span className=\"text-primary font-semibold\">{photoSettings.quantity}</span>\n                    </Label>\n                    <Slider\n                      value={[photoSettings.quantity]}\n                      onValueChange={(value) => setPhotoSettings(prev => ({ ...prev, quantity: value[0] }))}\n                      min={1}\n                      max={20}\n                      step={1}\n                      className=\"w-full\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                      <span>1</span>\n                      <span>20</span>\n                    </div>\n                  </div>\n\n                  {/* Photo Spacing Slider */}\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700 mb-3 flex items-center justify-between\">\n                      <span>Distance between photos</span>\n                      <span className=\"text-primary font-semibold\">{photoSettings.spacing}mm</span>\n                    </Label>\n                    <Slider\n                      value={[photoSettings.spacing]}\n                      onValueChange={(value) => setPhotoSettings(prev => ({ ...prev, spacing: value[0] }))}\n                      min={0}\n                      max={20}\n                      step={1}\n                      className=\"w-full\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                      <span>0mm</span>\n                      <span>20mm</span>\n                    </div>\n                  </div>\n\n                  {/* Top Margin Slider */}\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700 mb-3 flex items-center justify-between\">\n                      <span>Distance from top</span>\n                      <span className=\"text-primary font-semibold\">{photoSettings.topMargin}mm</span>\n                    </Label>\n                    <Slider\n                      value={[photoSettings.topMargin]}\n                      onValueChange={(value) => setPhotoSettings(prev => ({ ...prev, topMargin: value[0] }))}\n                      min={5}\n                      max={50}\n                      step={1}\n                      className=\"w-full\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                      <span>5mm</span>\n                      <span>50mm</span>\n                    </div>\n                  </div>\n\n                  {/* Border Width Slider */}\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700 mb-3 flex items-center justify-between\">\n                      <span>Photo border width</span>\n                      <span className=\"text-primary font-semibold\">{borderWidth}mm</span>\n                    </Label>\n                    <Slider\n                      value={[borderWidth]}\n                      onValueChange={(value) => setBorderWidth(value[0])}\n                      min={0}\n                      max={6}\n                      step={0.1}\n                      className=\"w-full\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                      <span>0mm (no border)</span>\n                      <div className=\"flex space-x-2 text-xs\">\n                        <span>1mm</span>\n                        <span>2mm</span>\n                        <span>3mm</span>\n                        <span>4mm</span>\n                        <span>5mm</span>\n                      </div>\n                      <span>6mm</span>\n                    </div>\n                  </div>\n\n                  {/* Auto Preview Settings */}\n                  <div className=\"border-t pt-6\">\n                    <Label className=\"text-sm font-medium text-gray-700 dark:text-slate-300 mb-4 flex items-center\">\n                      <SearchCheck className=\"text-primary mr-2 h-4 w-4\" />\n                      Preview Settings\n                    </Label>\n                    \n                    <div className=\"flex items-center justify-between p-3 border border-gray-300 dark:border-slate-600 rounded-lg\">\n                      <div className=\"flex-1\">\n                        <Label className=\"text-sm font-medium\">Auto Preview</Label>\n                        <p className=\"text-xs text-gray-600 dark:text-slate-400 mt-1\">Automatically update preview when settings change</p>\n                      </div>\n                      <Switch\n                        checked={autoPreview}\n                        onCheckedChange={setAutoPreview}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Action Buttons */}\n            <Card className=\"shadow-card dark:shadow-slate-900/50 border-0 bg-white/60 dark:bg-slate-800/80 backdrop-blur-sm dark:backdrop-blur-md\">\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-3\">\n                  \n\n\n                  {/* Auto-update Status */}\n                  <div className=\"text-center text-sm text-gray-600 dark:text-green-300 bg-green-50 dark:bg-green-900/30 border border-green-200 dark:border-green-700/50 rounded-lg py-3 px-4\">\n                    <div className=\"flex items-center justify-center space-x-2\">\n                      <SearchCheck className=\"h-4 w-4 text-green-600\" />\n                      <span>Auto-preview enabled ‚Ä¢ Real-time updates</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <div className=\"text-center p-4 border rounded-lg bg-gray-50 dark:bg-slate-800 border-gray-200 dark:border-slate-600\">\n                      <div className=\"text-sm text-gray-600 dark:text-slate-400 mb-2\">Ready to download?</div>\n                      <div className=\"text-xs text-gray-500 dark:text-slate-500\">Use the export options in the right panel to download your photos in PDF, PNG, or JPG format</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={handleReset}\n                      className=\"text-gray-600 hover:text-gray-800\"\n                    >\n                      <RotateCcw className=\"mr-2 h-4 w-4\" />\n                      Reset All Settings\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content Area: Preview and Settings */}\n          <div className=\"space-y-8 max-w-2xl mx-auto\">\n            {/* Center Panel: A4 Preview */}\n            <Card className=\"shadow-card dark:shadow-slate-900/50 border-0 bg-white/60 dark:bg-slate-800/80 backdrop-blur-sm dark:backdrop-blur-md\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex flex-col items-center mb-4\">\n                <h2 className=\"text-xl font-semibold text-foreground flex items-center justify-center\">\n                  <div className=\"bg-gradient-primary p-2 rounded-lg mr-3 shadow-primary\">\n                    <FileText className=\"text-white h-5 w-5\" />\n                  </div>\n                  <span>A4 Preview</span>\n                </h2>\n                \n                {/* Zoom Controls Below Title */}\n                <div className=\"flex items-center space-x-2 mt-3\">\n                  {layoutResult && (\n                    <div className=\"flex items-center space-x-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={handleZoomOut}\n                        disabled={zoomLevel <= 0.5}\n                        className=\"h-8 w-8 p-0\"\n                        data-testid=\"button-zoom-out\"\n                      >\n                        <ZoomOut className=\"h-4 w-4\" />\n                      </Button>\n                      <span className=\"text-xs text-gray-600 dark:text-gray-400 px-2\">\n                        {Math.round(zoomLevel * 100)}%\n                      </span>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={handleZoomIn}\n                        disabled={zoomLevel >= 3}\n                        className=\"h-8 w-8 p-0\"\n                        data-testid=\"button-zoom-in\"\n                      >\n                        <ZoomIn className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={handleResetZoom}\n                        className=\"h-8 w-8 p-0\"\n                        data-testid=\"button-reset-zoom\"\n                      >\n                        <RotateCw className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  )}\n                  <div className=\"text-sm text-gray-500 dark:text-gray-400 ml-2\">210 √ó 297 mm</div>\n                </div>\n              </div>\n\n              {/* A4 Canvas */}\n              <div className=\"relative bg-white dark:bg-slate-900 rounded-lg shadow-inner dark:shadow-slate-950/50 w-[400px] h-[566px] mx-auto overflow-hidden border border-gray-300 dark:border-slate-600\">\n                \n                {/* Empty State */}\n                {!layoutResult && (\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <div className=\"text-center space-y-4 p-8\">\n                      <div className=\"bg-gray-50 dark:bg-slate-800 rounded-full w-20 h-20 flex items-center justify-center mx-auto\">\n                        <Image className=\"h-8 w-8 text-gray-400 dark:text-slate-500\" />\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600 dark:text-slate-300 font-medium\">Upload a photo to see preview</p>\n                        <p className=\"text-sm text-gray-500 dark:text-slate-400\">Your passport photos will appear here in high quality</p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Canvas Preview */}\n                {layoutResult && (\n                  <canvas\n                    ref={canvasRef}\n                    className=\"rounded-sm w-full h-full\"\n                  />\n                )}\n\n                {/* Page Info */}\n                {layoutResult && (\n                  <div className=\"absolute bottom-4 left-4 text-xs text-gray-500 dark:text-slate-400 bg-white dark:bg-slate-800 px-3 py-1 rounded-full shadow-sm border dark:border-slate-600\">\n                    Page 1 of 1 ‚Ä¢ Zoom: {Math.round(zoomLevel * 100)}%\n                  </div>\n                )}\n              </div>\n\n              {/* Preview Stats */}\n              {layoutResult && (\n                <div className=\"mt-4 grid grid-cols-3 gap-4 text-center\">\n                  <div className=\"bg-gray-50 dark:bg-slate-800 rounded-lg p-3 border border-gray-300 dark:border-slate-600\">\n                    <div className=\"text-lg font-semibold text-gray-900 dark:text-slate-100\">{photoSettings.quantity}</div>\n                    <div className=\"text-xs text-gray-600 dark:text-slate-400\">Photos</div>\n                  </div>\n                  <div className=\"bg-gray-50 dark:bg-slate-800 rounded-lg p-3 border border-gray-300 dark:border-slate-600\">\n                    <div className=\"text-lg font-semibold text-gray-900 dark:text-slate-100\">{photoSettings.width}√ó{photoSettings.height}mm</div>\n                    <div className=\"text-xs text-gray-600 dark:text-slate-400\">Size</div>\n                  </div>\n                  <div className=\"bg-gray-50 dark:bg-slate-800 rounded-lg p-3 border border-gray-300 dark:border-slate-600\">\n                    <div className=\"text-lg font-semibold text-gray-900 dark:text-slate-100\">{Math.round(layoutResult.pageUtilization * 100)}%</div>\n                    <div className=\"text-xs text-gray-600 dark:text-slate-400\">Paper Usage</div>\n                  </div>\n                </div>\n              )}\n\n\n            </CardContent>\n          </Card>\n\n            {/* Instructions Card */}\n            <Card className=\"bg-blue-50 dark:bg-slate-900 border-blue-200 dark:border-slate-700\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-blue-900 dark:text-slate-100 mb-3 flex items-center\">\n              <FileText className=\"text-blue-600 dark:text-purple-400 mr-2 h-5 w-5\" />\n              How to Use\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-blue-600 dark:bg-purple-600 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-semibold\">1</div>\n                <div>\n                  <h4 className=\"font-medium text-blue-900 dark:text-slate-200\">Upload Photo</h4>\n                  <p className=\"text-sm text-blue-700 dark:text-slate-400\">Choose a clear, high-quality photo with good lighting</p>\n                </div>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-blue-600 dark:bg-purple-600 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-semibold\">2</div>\n                <div>\n                  <h4 className=\"font-medium text-blue-900 dark:text-slate-200\">Set Dimensions</h4>\n                  <p className=\"text-sm text-blue-700 dark:text-slate-400\">Adjust width and height according to your requirements</p>\n                </div>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-blue-600 dark:bg-purple-600 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-semibold\">3</div>\n                <div>\n                  <h4 className=\"font-medium text-blue-900 dark:text-slate-200\">Choose Quantity</h4>\n                  <p className=\"text-sm text-blue-700 dark:text-slate-400\">Select how many photos you want per A4 page</p>\n                </div>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-blue-600 dark:bg-purple-600 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-semibold\">4</div>\n                <div>\n                  <h4 className=\"font-medium text-blue-900 dark:text-slate-200\">Download</h4>\n                  <p className=\"text-sm text-blue-700 dark:text-slate-400\">Generate and download your A4 layout as PDF</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n            {/* Advanced Settings & Controls */}\n            \n            {/* Crop and Position Tools */}\n          {uploadedImage && (\n            <Card className=\"shadow-card dark:shadow-slate-900/50 border-0 bg-white/60 dark:bg-slate-800/80 backdrop-blur-sm dark:backdrop-blur-md\">\n              <CardContent className=\"p-8\">\n                <h2 className=\"text-2xl font-semibold text-foreground mb-6 flex items-center\">\n                  <div className=\"bg-gradient-primary p-3 rounded-lg mr-4 shadow-primary\">\n                    <Crop className=\"text-white h-6 w-6\" />\n                  </div>\n                  Crop & Position\n                </h2>\n                \n                <div className=\"space-y-8\">\n                  {/* Position Controls */}\n                  <div>\n                    <Label className=\"text-lg font-medium mb-4 block\">Position Controls</Label>\n                    <div className=\"space-y-6\">\n                      <div>\n                        <Label htmlFor=\"cropX\" className=\"text-sm text-gray-600 dark:text-slate-400 mb-3 block\">X Position: {cropSettings.x}%</Label>\n                        <Slider\n                          id=\"cropX\"\n                          min={-50}\n                          max={50}\n                          step={1}\n                          value={[cropSettings.x]}\n                          onValueChange={(value) => handleCropChange('x', value[0])}\n                          className=\"mt-1\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"cropY\" className=\"text-sm text-gray-600 dark:text-slate-400 mb-3 block\">Y Position: {cropSettings.y}%</Label>\n                        <Slider\n                          id=\"cropY\"\n                          min={-50}\n                          max={50}\n                          step={1}\n                          value={[cropSettings.y]}\n                          onValueChange={(value) => handleCropChange('y', value[0])}\n                          className=\"mt-1\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Transform Controls */}\n                  <div>\n                    <Label className=\"text-lg font-medium mb-4 block\">Transform Controls</Label>\n                    <div className=\"space-y-6\">\n                      <div>\n                        <Label htmlFor=\"cropScale\" className=\"text-sm text-gray-600 dark:text-slate-400 mb-3 block\">Scale: {cropSettings.scale.toFixed(2)}x</Label>\n                        <Slider\n                          id=\"cropScale\"\n                          min={0.5}\n                          max={3}\n                          step={0.1}\n                          value={[cropSettings.scale]}\n                          onValueChange={(value) => handleCropChange('scale', value[0])}\n                          className=\"mt-1\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"cropRotation\" className=\"text-sm text-gray-600 dark:text-slate-400 mb-3 block\">Rotation: {cropSettings.rotation}¬∞</Label>\n                        <Slider\n                          id=\"cropRotation\"\n                          min={-180}\n                          max={180}\n                          step={1}\n                          value={[cropSettings.rotation]}\n                          onValueChange={(value) => handleCropChange('rotation', value[0])}\n                          className=\"mt-1\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Crop Size Controls */}\n                  <div>\n                    <Label className=\"text-lg font-medium mb-4 block\">Crop Size</Label>\n                    <div className=\"space-y-6\">\n                      <div>\n                        <Label htmlFor=\"cropWidth\" className=\"text-sm text-gray-600 dark:text-slate-400 mb-3 block\">Width: {cropSettings.width}%</Label>\n                        <Slider\n                          id=\"cropWidth\"\n                          min={20}\n                          max={100}\n                          step={1}\n                          value={[cropSettings.width]}\n                          onValueChange={(value) => handleCropChange('width', value[0])}\n                          className=\"mt-1\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"cropHeight\" className=\"text-sm text-gray-600 dark:text-slate-400 mb-3 block\">Height: {cropSettings.height}%</Label>\n                        <Slider\n                          id=\"cropHeight\"\n                          min={20}\n                          max={100}\n                          step={1}\n                          value={[cropSettings.height]}\n                          onValueChange={(value) => handleCropChange('height', value[0])}\n                          className=\"mt-1\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Quick Actions */}\n                  <div className=\"flex gap-4 flex-wrap\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"default\"\n                      onClick={resetCrop}\n                      className=\"flex-1 h-12\"\n                    >\n                      <RotateCcw className=\"h-5 w-5 mr-2\" />\n                      Reset\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"default\"\n                      onClick={() => handleCropChange('rotation', cropSettings.rotation + 90)}\n                      className=\"flex-1 h-12\"\n                    >\n                      <Rotate className=\"h-5 w-5 mr-2\" />\n                      Rotate 90¬∞\n                    </Button>\n                  </div>\n                  \n                  <Button \n                    size=\"lg\"\n                    onClick={handleSaveCroppedPhoto}\n                    disabled={!uploadedImage}\n                    className=\"w-full h-14 text-lg bg-primary text-white hover:bg-primary/90\"\n                  >\n                    <Save className=\"h-5 w-5 mr-2\" />\n                    Save Cropped Photo\n                  </Button>\n\n                  {/* Live Crop Preview */}\n                  <div className=\"mt-8 p-6 bg-gray-50 dark:bg-slate-800 rounded-lg\">\n                    <Label className=\"text-lg font-medium mb-4 block\">Live Preview</Label>\n                    <div \n                      ref={cropPreviewRef}\n                      className=\"relative mx-auto bg-white dark:bg-slate-900 border-2 border-dashed border-gray-300 dark:border-slate-600 rounded select-none\" \n                      style={{ \n                        width: '180px', \n                        height: `${180 * (photoSettings.height / photoSettings.width)}px`,\n                        maxHeight: '240px'\n                      }}\n                    >\n                      {uploadedImage && (\n                        <div className=\"absolute inset-0 overflow-hidden rounded\">\n                          <img\n                            src={`/api/images/${uploadedImage.filename}`}\n                            alt=\"Crop preview\"\n                            className=\"absolute pointer-events-none\"\n                            style={{\n                              transform: `\n                                scale(${cropSettings.scale}) \n                                rotate(${cropSettings.rotation}deg)\n                              `,\n                              transformOrigin: 'center',\n                              width: '100%',\n                              height: '100%',\n                              left: '0%',\n                              top: '0%',\n                              objectFit: 'cover'\n                            }}\n                          />\n                          {/* Interactive Crop frame overlay */}\n                          <div \n                            className=\"absolute border-2 border-blue-500 dark:border-blue-400 bg-blue-500 bg-opacity-10 cursor-move\"\n                            style={{\n                              left: `${(100 - cropSettings.width) / 2 + cropSettings.x / 2}%`,\n                              top: `${(100 - cropSettings.height) / 2 + cropSettings.y / 2}%`,\n                              width: `${cropSettings.width}%`,\n                              height: `${cropSettings.height}%`,\n                            }}\n                            onMouseDown={handleCropStart}\n                            onTouchStart={handleCropStart}\n                          >\n                            <div className=\"absolute -top-6 left-0 text-xs text-blue-600 dark:text-blue-400 bg-white dark:bg-slate-800 px-2 py-1 rounded pointer-events-none\">\n                              Drag to Move\n                            </div>\n                            \n                            {/* Resize handles */}\n                            <div \n                              className=\"absolute -top-1 -left-1 w-3 h-3 bg-blue-500 dark:bg-blue-400 border border-white dark:border-slate-800 cursor-nw-resize\"\n                              onMouseDown={(e) => handleResizeStart(e, 'top-left')}\n                              onTouchStart={(e) => handleResizeStart(e, 'top-left')}\n                            />\n                            <div \n                              className=\"absolute -top-1 -right-1 w-3 h-3 bg-blue-500 dark:bg-blue-400 border border-white dark:border-slate-800 cursor-ne-resize\"\n                              onMouseDown={(e) => handleResizeStart(e, 'top-right')}\n                              onTouchStart={(e) => handleResizeStart(e, 'top-right')}\n                            />\n                            <div \n                              className=\"absolute -bottom-1 -left-1 w-3 h-3 bg-blue-500 dark:bg-blue-400 border border-white dark:border-slate-800 cursor-sw-resize\"\n                              onMouseDown={(e) => handleResizeStart(e, 'bottom-left')}\n                              onTouchStart={(e) => handleResizeStart(e, 'bottom-left')}\n                            />\n                            <div \n                              className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-blue-500 dark:bg-blue-400 border border-white dark:border-slate-800 cursor-se-resize\"\n                              onMouseDown={(e) => handleResizeStart(e, 'bottom-right')}\n                              onTouchStart={(e) => handleResizeStart(e, 'bottom-right')}\n                            />\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Background Settings */}\n          <Card className=\"shadow-card dark:shadow-slate-900/50 border-0 bg-white/60 dark:bg-slate-800/80 backdrop-blur-sm dark:backdrop-blur-md\">\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-xl font-semibold text-foreground mb-4 flex items-center\">\n                <div className=\"bg-gradient-primary p-2 rounded-lg mr-3 shadow-primary\">\n                  <Palette className=\"text-white h-5 w-5\" />\n                </div>\n                Background & Style\n              </h2>\n              \n              <div className=\"space-y-6\">\n                {/* Background Removal */}\n                <div className=\"flex items-center justify-between p-4 border border-gray-300 dark:border-slate-600 rounded-lg\">\n                  <div>\n                    <Label htmlFor=\"removeBackground\" className=\"text-sm font-medium\">AI Background Removal</Label>\n                    <p className=\"text-xs text-gray-600 dark:text-slate-400 mt-1\">\n                      Automatically remove background and replace with solid color\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"removeBackground\"\n                    checked={backgroundSettings.removeBackground}\n                    onCheckedChange={(checked) => \n                      setBackgroundSettings(prev => ({ ...prev, removeBackground: checked }))\n                    }\n                  />\n                </div>\n\n                {/* Background Color */}\n                <div>\n                  <Label className=\"text-sm font-medium mb-3 block\">Background Color</Label>\n                  <div className=\"flex items-center space-x-3\">\n                    <div \n                      className=\"w-10 h-10 rounded border-2 border-gray-300 dark:border-slate-600 cursor-pointer\"\n                      style={{ backgroundColor: backgroundSettings.backgroundColor }}\n                      onClick={() => document.getElementById('colorPicker')?.click()}\n                    />\n                    <input\n                      id=\"colorPicker\"\n                      type=\"color\"\n                      value={backgroundSettings.backgroundColor}\n                      onChange={(e) => setBackgroundSettings(prev => ({ ...prev, backgroundColor: e.target.value }))}\n                      className=\"hidden\"\n                    />\n                    <Input\n                      type=\"text\"\n                      value={backgroundSettings.backgroundColor}\n                      onChange={(e) => setBackgroundSettings(prev => ({ ...prev, backgroundColor: e.target.value }))}\n                      className=\"flex-1 font-mono text-sm border-gray-300 dark:border-slate-600\"\n                      placeholder=\"#ffffff\"\n                    />\n                  </div>\n                  \n                  {/* Color Presets */}\n                  <div className=\"grid grid-cols-6 gap-2 mt-3\">\n                    {['#ffffff', '#f8f9fa', '#e9ecef', '#dee2e6', '#adb5bd', '#6c757d'].map((color) => (\n                      <button\n                        key={color}\n                        className=\"w-8 h-8 rounded border-2 border-gray-300 dark:border-slate-600 hover:scale-110 transition-transform\"\n                        style={{ backgroundColor: color }}\n                        onClick={() => setBackgroundSettings(prev => ({ ...prev, backgroundColor: color }))}\n                      />\n                    ))}\n                  </div>\n                </div>\n\n                {/* Border Width */}\n                <div>\n                  <Label className=\"text-sm font-medium mb-3 block\">Border Width: {borderWidth}mm</Label>\n                  <Slider\n                    min={0}\n                    max={5}\n                    step={0.5}\n                    value={[borderWidth]}\n                    onValueChange={(value) => setBorderWidth(value[0])}\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                {/* Apply Background Settings */}\n                {uploadedImage && (\n                  <Button\n                    onClick={() => {\n                      if (backgroundSettings.removeBackground) {\n                        backgroundRemovalMutation.mutate({\n                          imageId: uploadedImage.id,\n                          backgroundColor: backgroundSettings.backgroundColor\n                        });\n                      }\n                    }}\n                    disabled={backgroundRemovalMutation.isPending}\n                    className=\"w-full bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white\"\n                  >\n                    {backgroundRemovalMutation.isPending ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <Scissors className=\"h-4 w-4 mr-2\" />\n                        Apply Background Settings\n                      </>\n                    )}\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions & Export */}\n          <Card className=\"shadow-card dark:shadow-slate-900/50 border-0 bg-white/60 dark:bg-slate-800/80 backdrop-blur-sm dark:backdrop-blur-md\">\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-xl font-semibold text-foreground mb-4 flex items-center\">\n                <div className=\"bg-gradient-primary p-2 rounded-lg mr-3 shadow-primary\">\n                  <Download className=\"text-white h-5 w-5\" />\n                </div>\n                Export & Actions\n              </h2>\n              \n              <div className=\"space-y-4\">\n                {/* Download Options */}\n                <div className=\"space-y-3\">\n                  <Button\n                    onClick={handleDownloadPdf}\n                    disabled={!layoutResult || downloadPdfMutation.isPending}\n                    className=\"w-full bg-gradient-to-r from-red-600 to-rose-600 hover:from-red-700 hover:to-rose-700 text-white\"\n                  >\n                    {downloadPdfMutation.isPending ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                        Generating...\n                      </>\n                    ) : (\n                      <>\n                        <Download className=\"mr-2 h-4 w-4\" />\n                        Download PDF\n                      </>\n                    )}\n                  </Button>\n                  \n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <Button\n                      onClick={() => handleDownloadImage('png')}\n                      disabled={!layoutResult}\n                      variant=\"outline\"\n                      className=\"bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900/30 dark:to-blue-800/30 border-blue-200 dark:border-blue-600/50 hover:from-blue-100 hover:to-blue-200 dark:hover:from-blue-800/40 dark:hover:to-blue-700/40 text-blue-700 dark:text-blue-300\"\n                    >\n                      <Download className=\"mr-1 h-4 w-4\" />\n                      PNG\n                    </Button>\n                    <Button\n                      onClick={() => handleDownloadImage('jpg')}\n                      disabled={!layoutResult}\n                      variant=\"outline\"\n                      className=\"bg-gradient-to-r from-green-50 to-green-100 dark:from-green-900/30 dark:to-green-800/30 border-green-200 dark:border-green-600/50 hover:from-green-100 hover:to-green-200 dark:hover:from-green-800/40 dark:hover:to-green-700/40 text-green-700 dark:text-green-300\"\n                    >\n                      <Download className=\"mr-1 h-4 w-4\" />\n                      JPG\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Reset */}\n                <div className=\"border-t pt-4\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleReset}\n                    className=\"w-full text-gray-600 hover:text-gray-800 dark:text-slate-400 dark:hover:text-slate-200\"\n                  >\n                    <RotateCcw className=\"mr-2 h-4 w-4\" />\n                    Reset All Settings\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n","size_bytes":79000},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"server/emailServiceFree.ts":{"content":"import nodemailer from 'nodemailer';\nimport { secretsManager } from './secretsManager';\n\n// Create a free email service using Gmail SMTP or other free providers\nclass FreeEmailService {\n  private transporter: nodemailer.Transporter | null = null;\n\n  constructor() {\n    this.initializeTransporter();\n  }\n\n  private async initializeTransporter() {\n    // Try multiple free email options\n    const emailConfig = this.getEmailConfig();\n    \n    if (emailConfig) {\n      try {\n        this.transporter = nodemailer.createTransport(emailConfig);\n        \n        // Verify connection\n        await this.transporter?.verify();\n        console.log('‚úÖ Free email service initialized successfully');\n      } catch (error) {\n        console.warn('‚ö†Ô∏è Failed to initialize email service:', error);\n        this.transporter = null;\n      }\n    } else {\n      console.log('‚ÑπÔ∏è No email credentials configured - using console output for verification codes');\n    }\n  }\n\n  private getEmailConfig() {\n    // Check for Gmail credentials\n    const gmailUser = secretsManager.getSecret('GMAIL_USER') || process.env.GMAIL_USER;\n    const gmailPass = secretsManager.getSecret('GMAIL_APP_PASSWORD') || process.env.GMAIL_APP_PASSWORD;\n    \n    if (gmailUser && gmailPass) {\n      return {\n        service: 'gmail',\n        auth: {\n          user: gmailUser,\n          pass: gmailPass // This should be an App Password, not regular password\n        }\n      };\n    }\n\n    // Check for other SMTP providers\n    const smtpHost = secretsManager.getSecret('SMTP_HOST') || process.env.SMTP_HOST;\n    const smtpPort = secretsManager.getSecret('SMTP_PORT') || process.env.SMTP_PORT;\n    const smtpUser = secretsManager.getSecret('SMTP_USER') || process.env.SMTP_USER;\n    const smtpPass = secretsManager.getSecret('SMTP_PASS') || process.env.SMTP_PASS;\n\n    if (smtpHost && smtpUser && smtpPass) {\n      return {\n        host: smtpHost,\n        port: parseInt(smtpPort || '587'),\n        secure: false,\n        auth: {\n          user: smtpUser,\n          pass: smtpPass\n        }\n      };\n    }\n\n    return null;\n  }\n\n  // Generate a 6-digit verification code\n  static generateVerificationCode(): string {\n    return Math.floor(100000 + Math.random() * 900000).toString();\n  }\n\n  // Send verification email or log to console\n  async sendVerificationEmail(email: string, verificationCode: string): Promise<boolean> {\n    if (!this.transporter) {\n      // Fallback: Log verification code to console for development\n      console.log('üìß EMAIL VERIFICATION CODE (Console Fallback)');\n      console.log('='.repeat(50));\n      console.log(`Email: ${email}`);\n      console.log(`Verification Code: ${verificationCode}`);\n      console.log('='.repeat(50));\n      \n      // In development, we can return true to simulate successful email sending\n      return true;\n    }\n\n    try {\n      const senderEmail = secretsManager.getSecret('GMAIL_USER') || \n                         secretsManager.getSecret('SMTP_USER') || \n                         'noreply@passport-photos.com';\n\n      const mailOptions = {\n        from: `\"Passport Photo Generator\" <${senderEmail}>`,\n        to: email,\n        subject: 'üîê Verify Your Email - Passport Photo Generator',\n        text: `Your verification code is: ${verificationCode}`,\n        html: `\n          <!DOCTYPE html>\n          <html lang=\"en\">\n          <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>Verify Your Email - Passport Photo Generator</title>\n          </head>\n          <body style=\"margin: 0; padding: 0; background-color: #f3f4f6; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\">\n            <div style=\"max-width: 600px; margin: 0 auto; background-color: #ffffff; box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\">\n              \n              <!-- Header with beautiful gradient -->\n              <div style=\"background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 50%, #ec4899 100%); padding: 0; text-align: center; position: relative; overflow: hidden;\">\n                <div style=\"background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%); padding: 50px 30px;\">\n                  <!-- Icon -->\n                  <div style=\"display: inline-block; width: 80px; height: 80px; background: rgba(255,255,255,0.2); border-radius: 50%; margin-bottom: 20px; position: relative;\">\n                    <div style=\"position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 40px; height: 40px;\">\n                      <svg width=\"40\" height=\"40\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M4 4H20C21.1 4 22 4.9 22 6V18C22 19.1 21.1 20 20 20H4C2.9 20 2 19.1 2 18V6C2 4.9 2.9 4 4 4Z\" stroke=\"white\" stroke-width=\"2\" fill=\"none\"/>\n                        <path d=\"M22 6L12 13L2 6\" stroke=\"white\" stroke-width=\"2\" fill=\"none\"/>\n                      </svg>\n                    </div>\n                  </div>\n                  \n                  <h1 style=\"color: white; margin: 0; font-size: 32px; font-weight: 700; text-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\n                    Passport Photo Generator\n                  </h1>\n                  <p style=\"color: rgba(255,255,255,0.9); margin: 10px 0 0 0; font-size: 18px; font-weight: 400;\">\n                    Professional photos made simple\n                  </p>\n                </div>\n              </div>\n              \n              <!-- Main content -->\n              <div style=\"padding: 60px 40px; background: white;\">\n                <div style=\"text-align: center; margin-bottom: 40px;\">\n                  <h2 style=\"color: #1f2937; margin: 0 0 16px 0; font-size: 28px; font-weight: 700;\">\n                    Verify Your Email\n                  </h2>\n                  <p style=\"color: #6b7280; font-size: 18px; line-height: 1.6; margin: 0;\">\n                    Enter this verification code to complete your account setup\n                  </p>\n                </div>\n                \n                <!-- Verification code section -->\n                <div style=\"text-align: center; margin: 50px 0;\">\n                  <div style=\"background: linear-gradient(135deg, #f0f9ff 0%, #e0e7ff 100%); border: 3px solid #ddd6fe; border-radius: 20px; padding: 40px; display: inline-block; position: relative; box-shadow: 0 10px 25px rgba(139, 92, 246, 0.15);\">\n                    <p style=\"color: #4c1d95; font-size: 14px; font-weight: 600; margin: 0 0 15px 0; text-transform: uppercase; letter-spacing: 1px;\">\n                      Your Verification Code\n                    </p>\n                    <div style=\"font-size: 42px; font-weight: 800; color: #5b21b6; letter-spacing: 12px; font-family: 'Monaco', 'Consolas', monospace; text-shadow: 0 2px 4px rgba(91, 33, 182, 0.2);\">\n                      ${verificationCode}\n                    </div>\n                    <div style=\"position: absolute; top: -10px; right: -10px; width: 20px; height: 20px; background: linear-gradient(135deg, #10b981, #059669); border-radius: 50%; box-shadow: 0 4px 8px rgba(16, 185, 129, 0.3);\"></div>\n                  </div>\n                </div>\n                \n                <!-- Info sections -->\n                <div style=\"background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%); border-left: 4px solid #f59e0b; border-radius: 12px; padding: 20px; margin: 40px 0;\">\n                  <div style=\"display: flex; align-items: flex-start;\">\n                    <div style=\"margin-right: 15px; margin-top: 2px;\">\n                      <div style=\"width: 24px; height: 24px; background: #f59e0b; border-radius: 50%; display: flex; align-items: center; justify-content: center;\">\n                        <div style=\"color: white; font-weight: bold; font-size: 14px;\">!</div>\n                      </div>\n                    </div>\n                    <div>\n                      <p style=\"color: #92400e; font-weight: 600; margin: 0 0 8px 0; font-size: 16px;\">\n                        Important Security Notice\n                      </p>\n                      <p style=\"color: #b45309; margin: 0; font-size: 14px; line-height: 1.5;\">\n                        This verification code expires in <strong>15 minutes</strong> for your security. \n                        Enter it exactly as shown above - it's case sensitive.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div style=\"background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%); border-left: 4px solid #10b981; border-radius: 12px; padding: 20px; margin: 30px 0;\">\n                  <div style=\"display: flex; align-items: flex-start;\">\n                    <div style=\"margin-right: 15px; margin-top: 2px;\">\n                      <div style=\"width: 24px; height: 24px; background: #10b981; border-radius: 50%; display: flex; align-items: center; justify-content: center;\">\n                        <div style=\"color: white; font-weight: bold; font-size: 12px;\">‚úì</div>\n                      </div>\n                    </div>\n                    <div>\n                      <p style=\"color: #065f46; font-weight: 600; margin: 0 0 8px 0; font-size: 16px;\">\n                        What's Next?\n                      </p>\n                      <p style=\"color: #047857; margin: 0; font-size: 14px; line-height: 1.5;\">\n                        After verification, you'll have full access to create professional passport photos with our advanced AI tools.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <!-- Security note -->\n              <div style=\"background: #f9fafb; padding: 30px; border-top: 1px solid #e5e7eb;\">\n                <p style=\"color: #6b7280; font-size: 14px; text-align: center; margin: 0 0 10px 0; line-height: 1.5;\">\n                  If you didn't create an account with Passport Photo Generator, please ignore this email.\n                </p>\n                <p style=\"color: #9ca3af; font-size: 12px; text-align: center; margin: 0;\">\n                  This is an automated message. Please do not reply to this email.\n                </p>\n              </div>\n              \n              <!-- Footer -->\n              <div style=\"background: linear-gradient(135deg, #1f2937 0%, #374151 100%); padding: 40px 30px; text-align: center;\">\n                <div style=\"margin-bottom: 20px;\">\n                  <div style=\"display: inline-block; width: 50px; height: 50px; background: rgba(255,255,255,0.1); border-radius: 50%; margin-bottom: 15px;\">\n                    <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;\">\n                      <div style=\"width: 24px; height: 24px; background: white; border-radius: 6px;\"></div>\n                    </div>\n                  </div>\n                  <h3 style=\"color: white; margin: 0; font-size: 18px; font-weight: 600;\">\n                    Passport Photo Generator\n                  </h3>\n                  <p style=\"color: #9ca3af; margin: 5px 0 0 0; font-size: 14px;\">\n                    AI-powered professional passport photos\n                  </p>\n                </div>\n                \n                <div style=\"border-top: 1px solid #4b5563; padding-top: 20px;\">\n                  <p style=\"color: #9ca3af; font-size: 12px; margin: 0;\">\n                    ¬© 2025 Passport Photo Generator. All rights reserved.\n                  </p>\n                </div>\n              </div>\n              \n            </div>\n          </body>\n          </html>\n        `\n      };\n\n      await this.transporter.sendMail(mailOptions);\n      console.log('‚úÖ Verification email sent successfully to:', email);\n      return true;\n    } catch (error) {\n      console.error('‚ùå Failed to send verification email:', error);\n      \n      // Fallback to console logging\n      console.log('üìß EMAIL VERIFICATION CODE (SMTP Failed - Console Fallback)');\n      console.log('='.repeat(50));\n      console.log(`Email: ${email}`);\n      console.log(`Verification Code: ${verificationCode}`);\n      console.log('='.repeat(50));\n      \n      return true; // Return true in development to continue the flow\n    }\n  }\n\n  // Send welcome email\n  async sendWelcomeEmail(email: string, firstName: string): Promise<boolean> {\n    if (!this.transporter) {\n      console.log(`üìß Welcome email would be sent to: ${email} (${firstName})`);\n      return true;\n    }\n\n    try {\n      const senderEmail = secretsManager.getSecret('GMAIL_USER') || \n                         secretsManager.getSecret('SMTP_USER') || \n                         'noreply@passport-photos.com';\n\n      const mailOptions = {\n        from: `\"Passport Photo Generator\" <${senderEmail}>`,\n        to: email,\n        subject: 'üéâ Welcome to Passport Photo Generator - You\\'re All Set!',\n        text: `Welcome ${firstName}! Your account has been successfully created.`,\n        html: `\n          <!DOCTYPE html>\n          <html lang=\"en\">\n          <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>Welcome to Passport Photo Generator!</title>\n          </head>\n          <body style=\"margin: 0; padding: 0; background-color: #f3f4f6; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\">\n            <div style=\"max-width: 600px; margin: 0 auto; background-color: #ffffff; box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\">\n              \n              <!-- Celebration Header -->\n              <div style=\"background: linear-gradient(135deg, #10b981 0%, #059669 50%, #047857 100%); padding: 0; text-align: center; position: relative; overflow: hidden;\">\n                <div style=\"background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%); padding: 50px 30px;\">\n                  <!-- Success Icon -->\n                  <div style=\"display: inline-block; width: 80px; height: 80px; background: rgba(255,255,255,0.2); border-radius: 50%; margin-bottom: 20px; position: relative;\">\n                    <div style=\"position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 40px; height: 40px;\">\n                      <svg width=\"40\" height=\"40\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M9 12L11 14L15 10\" stroke=\"white\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                        <circle cx=\"12\" cy=\"12\" r=\"9\" stroke=\"white\" stroke-width=\"2\" fill=\"none\"/>\n                      </svg>\n                    </div>\n                  </div>\n                  \n                  <h1 style=\"color: white; margin: 0; font-size: 32px; font-weight: 700; text-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\n                    Welcome to Passport Photo Generator!\n                  </h1>\n                  <p style=\"color: rgba(255,255,255,0.9); margin: 10px 0 0 0; font-size: 18px; font-weight: 400;\">\n                    Your account is ready to use\n                  </p>\n                </div>\n              </div>\n              \n              <!-- Main content -->\n              <div style=\"padding: 60px 40px; background: white;\">\n                <div style=\"text-align: center; margin-bottom: 40px;\">\n                  <h2 style=\"color: #1f2937; margin: 0 0 16px 0; font-size: 28px; font-weight: 700;\">\n                    Hi ${firstName}! üéâ\n                  </h2>\n                  <p style=\"color: #6b7280; font-size: 18px; line-height: 1.6; margin: 0;\">\n                    Your account has been successfully created and verified! You're all set to create professional passport photos.\n                  </p>\n                </div>\n                \n                <!-- Feature Cards -->\n                <div style=\"margin: 50px 0;\">\n                  <!-- Upload Feature -->\n                  <div style=\"background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%); border-left: 4px solid #3b82f6; border-radius: 12px; padding: 25px; margin: 20px 0;\">\n                    <div style=\"display: flex; align-items: flex-start;\">\n                      <div style=\"margin-right: 20px; margin-top: 2px;\">\n                        <div style=\"width: 40px; height: 40px; background: #3b82f6; border-radius: 12px; display: flex; align-items: center; justify-content: center;\">\n                          <div style=\"color: white; font-weight: bold; font-size: 20px;\">üì∏</div>\n                        </div>\n                      </div>\n                      <div>\n                        <h3 style=\"color: #1e40af; font-weight: 600; margin: 0 0 8px 0; font-size: 18px;\">\n                          Smart Photo Upload\n                        </h3>\n                        <p style=\"color: #1e3a8a; margin: 0; font-size: 14px; line-height: 1.5;\">\n                          Upload your photos and our AI will automatically remove backgrounds with professional quality.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <!-- Layout Feature -->\n                  <div style=\"background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%); border-left: 4px solid #10b981; border-radius: 12px; padding: 25px; margin: 20px 0;\">\n                    <div style=\"display: flex; align-items: flex-start;\">\n                      <div style=\"margin-right: 20px; margin-top: 2px;\">\n                        <div style=\"width: 40px; height: 40px; background: #10b981; border-radius: 12px; display: flex; align-items: center; justify-content: center;\">\n                          <div style=\"color: white; font-weight: bold; font-size: 20px;\">üìã</div>\n                        </div>\n                      </div>\n                      <div>\n                        <h3 style=\"color: #065f46; font-weight: 600; margin: 0 0 8px 0; font-size: 18px;\">\n                          Professional Layouts\n                        </h3>\n                        <p style=\"color: #047857; margin: 0; font-size: 14px; line-height: 1.5;\">\n                          Generate perfect passport photo layouts with customizable dimensions and quantities.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <!-- Download Feature -->\n                  <div style=\"background: linear-gradient(135deg, #fdf4ff 0%, #fae8ff 100%); border-left: 4px solid #8b5cf6; border-radius: 12px; padding: 25px; margin: 20px 0;\">\n                    <div style=\"display: flex; align-items: flex-start;\">\n                      <div style=\"margin-right: 20px; margin-top: 2px;\">\n                        <div style=\"width: 40px; height: 40px; background: #8b5cf6; border-radius: 12px; display: flex; align-items: center; justify-content: center;\">\n                          <div style=\"color: white; font-weight: bold; font-size: 20px;\">üíæ</div>\n                        </div>\n                      </div>\n                      <div>\n                        <h3 style=\"color: #581c87; font-weight: 600; margin: 0 0 8px 0; font-size: 18px;\">\n                          Multiple Formats\n                        </h3>\n                        <p style=\"color: #6b21a8; margin: 0; font-size: 14px; line-height: 1.5;\">\n                          Download your photos in PDF, PNG, or JPG formats - perfect for any application.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <!-- Call to Action -->\n                <div style=\"text-align: center; margin: 50px 0 30px 0;\">\n                  <div style=\"background: linear-gradient(135deg, #3b82f6, #8b5cf6); padding: 30px; border-radius: 20px; color: white;\">\n                    <h3 style=\"margin: 0 0 15px 0; font-size: 22px; font-weight: 700;\">\n                      Ready to Get Started?\n                    </h3>\n                    <p style=\"margin: 0; font-size: 16px; opacity: 0.9;\">\n                      Create your first professional passport photo in just a few clicks!\n                    </p>\n                  </div>\n                </div>\n              </div>\n              \n              <!-- Thank you note -->\n              <div style=\"background: #f9fafb; padding: 30px; border-top: 1px solid #e5e7eb;\">\n                <p style=\"color: #6b7280; font-size: 16px; text-align: center; margin: 0 0 10px 0; line-height: 1.5;\">\n                  Thank you for choosing Passport Photo Generator for your professional photo needs!\n                </p>\n                <p style=\"color: #9ca3af; font-size: 14px; text-align: center; margin: 0;\">\n                  If you have any questions, we're here to help make your experience perfect.\n                </p>\n              </div>\n              \n              <!-- Footer -->\n              <div style=\"background: linear-gradient(135deg, #1f2937 0%, #374151 100%); padding: 40px 30px; text-align: center;\">\n                <div style=\"margin-bottom: 20px;\">\n                  <div style=\"display: inline-block; width: 50px; height: 50px; background: rgba(255,255,255,0.1); border-radius: 50%; margin-bottom: 15px;\">\n                    <div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;\">\n                      <div style=\"width: 24px; height: 24px; background: white; border-radius: 6px;\"></div>\n                    </div>\n                  </div>\n                  <h3 style=\"color: white; margin: 0; font-size: 18px; font-weight: 600;\">\n                    Passport Photo Generator\n                  </h3>\n                  <p style=\"color: #9ca3af; margin: 5px 0 0 0; font-size: 14px;\">\n                    AI-powered professional passport photos\n                  </p>\n                </div>\n                \n                <div style=\"border-top: 1px solid #4b5563; padding-top: 20px;\">\n                  <p style=\"color: #9ca3af; font-size: 12px; margin: 0;\">\n                    ¬© 2025 Passport Photo Generator. All rights reserved.\n                  </p>\n                </div>\n              </div>\n              \n            </div>\n          </body>\n          </html>\n        `\n      };\n\n      await this.transporter.sendMail(mailOptions);\n      console.log('‚úÖ Welcome email sent successfully to:', email);\n      return true;\n    } catch (error) {\n      console.error('‚ùå Failed to send welcome email:', error);\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const freeEmailService = new FreeEmailService();\nexport { FreeEmailService };","size_bytes":22988},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"server/dbSetup.ts":{"content":"import { pool } from './db';\n\nexport async function ensureDatabaseSchema(): Promise<void> {\n  try {\n    console.log('üîß Checking database schema...');\n    \n    const schema = `\n      CREATE EXTENSION IF NOT EXISTS pgcrypto;\n\n      CREATE TABLE IF NOT EXISTS sessions (\n        sid            varchar PRIMARY KEY,\n        sess           jsonb    NOT NULL,\n        expire         timestamp NOT NULL\n      );\n\n      CREATE INDEX IF NOT EXISTS idx_session_expire ON sessions(expire);\n\n      CREATE TABLE IF NOT EXISTS users (\n        id                  varchar PRIMARY KEY DEFAULT gen_random_uuid(),\n        email               varchar UNIQUE,\n        first_name          varchar,\n        last_name           varchar,\n        profile_image_url   varchar,\n        is_guest            boolean DEFAULT false,\n        password_hash       varchar,\n        auth_provider       varchar DEFAULT 'email',\n        is_email_verified   boolean DEFAULT false,\n        created_at          timestamp DEFAULT now(),\n        updated_at          timestamp DEFAULT now()\n      );\n\n      CREATE TABLE IF NOT EXISTS email_verifications (\n        id                 varchar PRIMARY KEY DEFAULT gen_random_uuid(),\n        email              varchar NOT NULL,\n        verification_code  varchar NOT NULL,\n        expires_at         timestamp NOT NULL,\n        used               boolean DEFAULT false,\n        created_at         timestamp DEFAULT now()\n      );\n\n      CREATE TABLE IF NOT EXISTS pending_registrations (\n        id                 varchar PRIMARY KEY DEFAULT gen_random_uuid(),\n        email              varchar UNIQUE NOT NULL,\n        first_name         varchar NOT NULL,\n        last_name          varchar NOT NULL,\n        password_hash      varchar NOT NULL,\n        verification_code  varchar NOT NULL,\n        expires_at         timestamp NOT NULL,\n        created_at         timestamp DEFAULT now()\n      );\n\n      CREATE TABLE IF NOT EXISTS uploaded_images (\n        id                          text PRIMARY KEY,\n        user_id                     varchar REFERENCES users(id) ON DELETE CASCADE,\n        filename                    text NOT NULL,\n        original_name               text NOT NULL,\n        mime_type                   text NOT NULL,\n        size                        integer NOT NULL,\n        uploaded_at                 timestamp NOT NULL DEFAULT now(),\n        background_removed_filename text\n      );\n\n      CREATE TABLE IF NOT EXISTS layout_results (\n        id                  text PRIMARY KEY,\n        image_id            text NOT NULL REFERENCES uploaded_images(id) ON DELETE CASCADE,\n        settings            json NOT NULL,\n        crop_settings       json,\n        photos_per_row      integer NOT NULL,\n        total_rows          integer NOT NULL,\n        page_utilization    real NOT NULL,\n        processed_image_url text NOT NULL,\n        border_width        real NOT NULL DEFAULT 0\n      );\n\n      CREATE TABLE IF NOT EXISTS presets (\n        id           text PRIMARY KEY,\n        user_id      varchar REFERENCES users(id) ON DELETE CASCADE,\n        name         text NOT NULL,\n        description  text,\n        settings     json NOT NULL,\n        border_width real NOT NULL DEFAULT 0,\n        created_at   timestamp NOT NULL DEFAULT now()\n      );\n    `;\n\n    await pool.query(schema);\n    console.log('‚úÖ Database schema is ready');\n  } catch (error) {\n    console.error('‚ùå Failed to set up database schema:', error);\n    throw error;\n  }\n}\n","size_bytes":3487},"server/routes.ts":{"content":"import type { Express, Request } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport multer from \"multer\";\nimport sharp from \"sharp\";\nimport { photoSettingsSchema, layoutResultSchema, cropSettingsSchema, backgroundRemovalRequestSchema, emailSignupSchema, emailLoginSchema, emailVerificationSchema, resendVerificationSchema } from \"@shared/schema\";\nimport { EmailAuthService } from \"./emailAuth\";\nimport { z } from \"zod\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { jsPDF } from \"jspdf\";\nimport { SitemapStream, streamToPromise } from \"sitemap\";\nimport { Readable } from \"stream\";\n\ninterface MulterRequest extends Request {\n  file?: Express.Multer.File;\n}\n\n// Configure multer for file uploads\nconst upload = multer({\n  dest: 'uploads/',\n  fileFilter: (req: any, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only JPEG and PNG are allowed.'));\n    }\n  },\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Import and setup Google authentication\n  const { setupGoogleAuth, isAuthenticated } = await import('./googleAuth');\n  await setupGoogleAuth(app);\n\n  // Ensure uploads directory exists\n  if (!fs.existsSync('uploads')) {\n    fs.mkdirSync('uploads');\n  }\n\n  // Authentication routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      console.log('Auth check - Session ID:', req.sessionID);\n      console.log('Auth check - User in session:', !!req.user, req.user?.id);\n      // req.user now contains the full user object from Google auth\n      res.json(req.user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Email authentication routes\n  app.post('/api/auth/signup', async (req, res) => {\n    try {\n      const signupData = emailSignupSchema.parse(req.body);\n      const result = await EmailAuthService.registerUser(signupData);\n      \n      if (result.success) {\n        res.status(201).json(result);\n      } else {\n        res.status(400).json(result);\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          success: false, \n          message: 'Invalid input data',\n          errors: error.errors \n        });\n      } else {\n        console.error('Signup error:', error);\n        res.status(500).json({ \n          success: false, \n          message: 'Registration failed. Please try again.' \n        });\n      }\n    }\n  });\n\n  app.post('/api/auth/verify-email', async (req, res) => {\n    try {\n      const verificationData = emailVerificationSchema.parse(req.body);\n      const result = await EmailAuthService.verifyEmail(verificationData.email, verificationData.verificationCode);\n      \n      if (result.success && result.user) {\n        // Set user session for immediate login after verification\n        (req as any).login(result.user, (err: any) => {\n          if (err) {\n            console.error('Session error:', err);\n            res.status(200).json(result); // Still return success even if session fails\n          } else {\n            res.json(result);\n          }\n        });\n      } else {\n        res.status(400).json(result);\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          success: false, \n          message: 'Invalid verification data',\n          errors: error.errors \n        });\n      } else {\n        console.error('Email verification error:', error);\n        res.status(500).json({ \n          success: false, \n          message: 'Verification failed. Please try again.' \n        });\n      }\n    }\n  });\n\n  app.post('/api/auth/resend-verification', async (req, res) => {\n    try {\n      const resendData = resendVerificationSchema.parse(req.body);\n      const result = await EmailAuthService.resendVerificationCode(resendData.email);\n      \n      if (result.success) {\n        res.json(result);\n      } else {\n        res.status(400).json(result);\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          success: false, \n          message: 'Invalid email address',\n          errors: error.errors \n        });\n      } else {\n        console.error('Resend verification error:', error);\n        res.status(500).json({ \n          success: false, \n          message: 'Failed to resend verification code.' \n        });\n      }\n    }\n  });\n\n  // Test email service endpoint\n  app.post('/api/test-email', async (req, res) => {\n    try {\n      const { email } = req.body;\n      if (!email) {\n        return res.status(400).json({ success: false, message: 'Email is required' });\n      }\n\n      const { EmailService } = await import('./emailService');\n      const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();\n      console.log('üß™ Testing email service...');\n      \n      const emailSent = await EmailService.sendVerificationEmail(email, verificationCode);\n      \n      if (emailSent) {\n        res.json({ \n          success: true, \n          message: 'Test email sent successfully! Check console for verification code.',\n          verificationCode: verificationCode // In development, we can return it for testing\n        });\n      } else {\n        res.status(500).json({ success: false, message: 'Failed to send test email' });\n      }\n    } catch (error) {\n      console.error('Test email error:', error);\n      res.status(500).json({ success: false, message: 'Test email failed' });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const loginData = emailLoginSchema.parse(req.body);\n      console.log('Login attempt for email:', loginData.email);\n      \n      const result = await EmailAuthService.loginUser(loginData);\n      console.log('Login result:', { success: result.success, message: result.message });\n      \n      if (result.success && result.user) {\n        // Set user session\n        (req as any).login(result.user, (err: any) => {\n          if (err) {\n            console.error('Login session error:', err);\n            res.status(500).json({ \n              success: false, \n              message: 'Login failed. Please try again.' \n            });\n          } else {\n            res.json(result);\n          }\n        });\n      } else {\n        res.status(401).json(result);\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          success: false, \n          message: 'Invalid login data',\n          errors: error.errors \n        });\n      } else {\n        console.error('Login error:', error);\n        res.status(500).json({ \n          success: false, \n          message: 'Login failed. Please try again.' \n        });\n      }\n    }\n  });\n\n  // Upload image endpoint (authentication optional for guests)\n  app.post('/api/upload', upload.single('image'), async (req: MulterRequest & any, res) => {\n    try {\n      if (!req.file) {\n        console.error('No file in request');\n        return res.status(400).json({ message: 'No file uploaded' });\n      }\n\n      console.log('File uploaded:', req.file);\n      const userId = req.user?.id || 'guest';\n\n      const uploadedImage = await storage.saveUploadedImage({\n        userId,\n        filename: req.file.filename,\n        originalName: req.file.originalname,\n        mimeType: req.file.mimetype,\n        size: req.file.size,\n      });\n\n      res.json(uploadedImage);\n    } catch (error) {\n      console.error('Upload error:', error);\n      res.status(500).json({ message: 'Upload failed' });\n    }\n  });\n\n  // Generate layout endpoint\n  app.post('/api/generate-layout', async (req, res) => {\n    try {\n      const { imageId, settings, borderWidth = 0, cropSettings } = req.body;\n      const validatedSettings = photoSettingsSchema.parse(settings);\n      const validatedCropSettings = cropSettings ? cropSettingsSchema.parse(cropSettings) : null;\n\n      const image = await storage.getUploadedImage(imageId);\n      if (!image) {\n        return res.status(404).json({ message: 'Image not found' });\n      }\n\n      // Use background-removed image if available, otherwise use original\n      const sourceFilename = image.backgroundRemovedFilename || image.filename;\n      const imagePath = path.join('uploads', sourceFilename);\n      if (!fs.existsSync(imagePath)) {\n        return res.status(404).json({ message: 'Image file not found' });\n      }\n\n      // Calculate A4 dimensions in pixels (300 DPI)\n      const A4_WIDTH_MM = 210;\n      const A4_HEIGHT_MM = 297;\n      const DPI = 300;\n      const MM_TO_PIXELS = DPI / 25.4;\n\n      const a4WidthPx = Math.round(A4_WIDTH_MM * MM_TO_PIXELS);\n      const a4HeightPx = Math.round(A4_HEIGHT_MM * MM_TO_PIXELS);\n      \n      let photoWidthPx = Math.round(validatedSettings.width * MM_TO_PIXELS);\n      let photoHeightPx = Math.round(validatedSettings.height * MM_TO_PIXELS);\n\n      // Calculate layout - use user-defined top margin\n      const sideMargin = Math.round(10 * MM_TO_PIXELS); // 10mm side margins\n      const topMargin = Math.round((validatedSettings.topMargin || 10) * MM_TO_PIXELS); // User-defined top margin\n      const bottomMargin = Math.round(10 * MM_TO_PIXELS); // 10mm bottom margin\n      const availableWidth = a4WidthPx - (2 * sideMargin);\n      const availableHeight = a4HeightPx - topMargin - bottomMargin;\n\n      let photosPerRow: number;\n      let totalRows: number;\n      let actualQuantity: number;\n\n      // Calculate optimal layout - arrange photos properly across multiple rows\n      actualQuantity = validatedSettings.quantity;\n      const spacingPx = Math.round((validatedSettings.spacing || 5) * MM_TO_PIXELS);\n      \n      // Calculate how many photos can fit per row at full size\n      const maxPhotosPerRowAtFullSize = Math.floor((availableWidth + spacingPx) / (photoWidthPx + spacingPx));\n      \n      // Prefer horizontal layout but maintain good photo size\n      if (actualQuantity <= 3) {\n        // 1-3 photos: always use single horizontal row\n        const singleRowWidth = (actualQuantity * photoWidthPx) + ((actualQuantity - 1) * spacingPx);\n        \n        if (singleRowWidth <= availableWidth) {\n          photosPerRow = actualQuantity;\n          totalRows = 1;\n          console.log(`Layout: ${actualQuantity} photos fit in one row at full size`);\n        } else {\n          // Scale down to fit in one row\n          const scaleToFitHorizontal = availableWidth / singleRowWidth;\n          photoWidthPx = Math.round(photoWidthPx * scaleToFitHorizontal);\n          photoHeightPx = Math.round(photoHeightPx * scaleToFitHorizontal);\n          photosPerRow = actualQuantity;\n          totalRows = 1;\n          console.log(`Layout: ${actualQuantity} photos scaled to fit in one row, scale: ${scaleToFitHorizontal.toFixed(3)}`);\n        }\n      } else if (actualQuantity <= 8) {\n        // 4-8 photos: use horizontal row layout as requested\n        const singleRowWidth = (actualQuantity * photoWidthPx) + ((actualQuantity - 1) * spacingPx);\n        const scaleToFitHorizontal = availableWidth / singleRowWidth;\n        \n        // Scale photos to fit in horizontal row\n        photoWidthPx = Math.round(photoWidthPx * scaleToFitHorizontal);\n        photoHeightPx = Math.round(photoHeightPx * scaleToFitHorizontal);\n        photosPerRow = actualQuantity;\n        totalRows = 1;\n        console.log(`Layout: ${actualQuantity} photos in horizontal row, scale: ${scaleToFitHorizontal.toFixed(3)}`);\n      } else {\n        // For more than 8 photos, use multi-row layouts\n        // Use maximum photos per row that fit, then calculate rows needed\n        photosPerRow = Math.min(maxPhotosPerRowAtFullSize, actualQuantity);\n        totalRows = Math.ceil(actualQuantity / photosPerRow);\n      }\n      \n      // Check if photos fit with current size and spacing \n      const totalRequiredWidth = (photosPerRow * photoWidthPx) + ((photosPerRow - 1) * spacingPx);\n      const totalRequiredHeight = (totalRows * photoHeightPx) + ((totalRows - 1) * spacingPx);\n      \n      // Only scale down if photos absolutely don't fit on the page (for multi-row layouts only)\n      if (totalRows > 1 && (totalRequiredWidth > availableWidth || totalRequiredHeight > availableHeight)) {\n        const widthScale = availableWidth / totalRequiredWidth;\n        const heightScale = availableHeight / totalRequiredHeight;\n        const scale = Math.min(widthScale, heightScale) * 0.98; // Minimal scaling to preserve photo quality\n        \n        photoWidthPx = Math.round(photoWidthPx * scale);\n        photoHeightPx = Math.round(photoHeightPx * scale);\n      }\n      \n      const pageUtilization = (actualQuantity * photoWidthPx * photoHeightPx) / (availableWidth * availableHeight);\n\n      // Process the image with crop settings if provided\n      let imageProcessor = sharp(imagePath);\n      \n      if (validatedCropSettings) {\n        // Get image metadata to calculate crop positions\n        const metadata = await imageProcessor.metadata();\n        const originalWidth = metadata.width || 1;\n        const originalHeight = metadata.height || 1;\n        \n        // Calculate crop dimensions\n        const cropWidth = Math.round((originalWidth * validatedCropSettings.width) / 100);\n        const cropHeight = Math.round((originalHeight * validatedCropSettings.height) / 100);\n        const cropLeft = Math.round((originalWidth - cropWidth) / 2 + (originalWidth * validatedCropSettings.x) / 100);\n        const cropTop = Math.round((originalHeight - cropHeight) / 2 + (originalHeight * validatedCropSettings.y) / 100);\n        \n        // Apply crop\n        imageProcessor = imageProcessor.extract({\n          left: Math.max(0, Math.min(cropLeft, originalWidth - cropWidth)),\n          top: Math.max(0, Math.min(cropTop, originalHeight - cropHeight)),\n          width: cropWidth,\n          height: cropHeight\n        });\n        \n        // Apply rotation if specified\n        if (validatedCropSettings.rotation !== 0) {\n          imageProcessor = imageProcessor.rotate(validatedCropSettings.rotation, { background: { r: 255, g: 255, b: 255 } });\n        }\n      }\n      \n      const processedBuffer = await imageProcessor\n        .resize(photoWidthPx, photoHeightPx, { fit: 'cover' })\n        .jpeg({ quality: 95 })\n        .toBuffer();\n\n      // Save processed image\n      const processedFilename = `processed_${image.filename}.jpg`;\n      const processedPath = path.join('uploads', processedFilename);\n      fs.writeFileSync(processedPath, processedBuffer);\n\n      const layoutResult = await storage.saveLayoutResult({\n        imageId,\n        settings: validatedSettings,\n        cropSettings: validatedCropSettings,\n        photosPerRow,\n        totalRows,\n        pageUtilization,\n        processedImageUrl: `/api/images/${processedFilename}`,\n        borderWidth,\n      });\n\n      res.json(layoutResult);\n    } catch (error) {\n      console.error('Layout generation error:', error);\n      res.status(500).json({ message: 'Layout generation failed' });\n    }\n  });\n\n  // Background removal endpoint with API key fallback\n  app.post('/api/remove-background', async (req, res) => {\n    try {\n      const { imageId, backgroundColor = '#ffffff' } = backgroundRemovalRequestSchema.parse(req.body);\n      \n      const image = await storage.getUploadedImage(imageId);\n      if (!image) {\n        return res.status(404).json({ message: 'Image not found' });\n      }\n\n      const imagePath = path.join('uploads', image.filename);\n      if (!fs.existsSync(imagePath)) {\n        return res.status(404).json({ message: 'Image file not found' });\n      }\n\n      // Get all available Remove.bg API keys\n      const apiKeys = [\n        process.env.REMOVEBG_API_KEY,\n        process.env.REMOVEBG_API_KEY_2,\n        process.env.REMOVEBG_API_KEY_3,\n        process.env.REMOVEBG_API_KEY_4,\n        process.env.REMOVEBG_API_KEY_5,\n        process.env.REMOVEBG_API_KEY_6,\n        process.env.REMOVEBG_API_KEY_7,\n        process.env.REMOVEBG_API_KEY_8,\n        process.env.REMOVEBG_API_KEY_9,\n        process.env.REMOVEBG_API_KEY_10\n      ].filter(key => key && key.trim() !== '');\n\n      if (apiKeys.length === 0) {\n        return res.status(500).json({ message: 'No Remove.bg API keys configured' });\n      }\n\n      console.log(`Found ${apiKeys.length} Remove.bg API keys for fallback`);\n\n      // Read image file once\n      const imageBuffer = fs.readFileSync(imagePath);\n      let lastError = null;\n\n      // Try each API key until one succeeds\n      for (let i = 0; i < apiKeys.length; i++) {\n        const apiKey = apiKeys[i];\n        console.log(`Trying Remove.bg API key #${i + 1}...`);\n\n        try {\n          // Create fresh FormData for each attempt\n          const formData = new FormData();\n          formData.append('image_file', new Blob([imageBuffer], { type: image.mimeType }), image.originalName);\n          formData.append('size', 'auto');\n          formData.append('bg_color', backgroundColor.replace('#', ''));\n\n          // Call Remove.bg API\n          const response = await fetch('https://api.remove.bg/v1.0/removebg', {\n            method: 'POST',\n            headers: {\n              'X-Api-Key': apiKey!,\n            },\n            body: formData,\n          });\n\n          if (response.ok) {\n            console.log(`‚úì Remove.bg API key #${i + 1} succeeded`);\n            \n            // Save the processed image\n            const processedImageBuffer = Buffer.from(await response.arrayBuffer());\n            const backgroundRemovedFilename = `bg_removed_${image.filename}.png`;\n            const outputPath = path.join('uploads', backgroundRemovedFilename);\n            \n            fs.writeFileSync(outputPath, processedImageBuffer);\n\n            // Update image record with background removed filename\n            const updatedImage = await storage.updateUploadedImage(imageId, {\n              backgroundRemovedFilename\n            });\n\n            return res.json({\n              success: true,\n              backgroundRemovedUrl: `/api/images/${backgroundRemovedFilename}`,\n              updatedImage,\n              apiKeyUsed: i + 1\n            });\n          } else {\n            const errorText = await response.text();\n            const error = `API key #${i + 1} failed: ${response.status} - ${errorText}`;\n            console.warn(`‚úó ${error}`);\n            lastError = error;\n            \n            // Continue to next API key\n            continue;\n          }\n        } catch (fetchError) {\n          const error = `API key #${i + 1} error: ${fetchError instanceof Error ? fetchError.message : String(fetchError)}`;\n          console.warn(`‚úó ${error}`);\n          lastError = error;\n          continue;\n        }\n      }\n\n      // All API keys failed\n      console.error('All Remove.bg API keys failed:', lastError);\n      return res.status(500).json({ \n        message: 'Background removal failed - all API keys exhausted',\n        lastError \n      });\n\n    } catch (error) {\n      console.error('Background removal error:', error);\n      res.status(500).json({ message: 'Background removal failed' });\n    }\n  });\n\n  // Serve processed images\n  app.get('/api/images/:filename', (req, res) => {\n    const filename = req.params.filename;\n    const imagePath = path.join('uploads', filename);\n    \n    if (!fs.existsSync(imagePath)) {\n      return res.status(404).json({ message: 'Image not found' });\n    }\n\n    res.sendFile(path.resolve(imagePath));\n  });\n\n  // Generate preview image endpoint (low-res for display)\n  app.get('/api/generate-preview/:imageId', async (req, res) => {\n    try {\n      const { imageId } = req.params;\n      const { layoutId } = req.query;\n      console.log(`PREVIEW REQUEST: generating preview for imageId=${imageId}, layoutId=${layoutId}`);\n      \n      // If layoutId is provided, try to get that specific layout first\n      let layout = null;\n      if (layoutId) {\n        layout = await storage.getLayoutResultById(layoutId as string);\n      }\n      \n      // Fallback to getting latest layout by imageId\n      if (!layout) {\n        layout = await storage.getLayoutResult(imageId);\n      }\n      \n      if (!layout) {\n        return res.status(404).json({ message: 'Layout not found' });\n      }\n\n      const image = await storage.getUploadedImage(imageId);\n      if (!image) {\n        return res.status(404).json({ message: 'Image not found' });\n      }\n\n      // Use the original or background-removed image, NOT the processed layout image\n      const sourceFilename = image.backgroundRemovedFilename || image.filename;\n      const sourcePath = path.join('uploads', sourceFilename);\n      \n      if (!fs.existsSync(sourcePath)) {\n        return res.status(404).json({ message: 'Source image not found.' });\n      }\n\n      // Lower resolution for preview (faster loading)\n      const DPI = 150; // Half resolution for preview\n      const MM_TO_PIXELS = DPI / 25.4;\n      const A4_WIDTH_MM = 210;\n      const A4_HEIGHT_MM = 297;\n\n      const canvasWidth = Math.round(A4_WIDTH_MM * MM_TO_PIXELS);\n      const canvasHeight = Math.round(A4_HEIGHT_MM * MM_TO_PIXELS);\n\n      const { settings, photosPerRow, totalRows, borderWidth = 0 } = layout;\n      console.log(`PREVIEW LAYOUT: quantity=${settings.quantity}, photosPerRow=${photosPerRow}, totalRows=${totalRows}`);\n      const sideMarginPx = Math.round(10 * MM_TO_PIXELS); // 10mm side margins\n      const topMarginPx = Math.round((settings.topMargin || 10) * MM_TO_PIXELS); // User-defined top margin\n      const bottomMarginPx = Math.round(10 * MM_TO_PIXELS); // 10mm bottom margin\n      \n      const photoWidthPx = Math.round(settings.width * MM_TO_PIXELS);\n      const photoHeightPx = Math.round(settings.height * MM_TO_PIXELS);\n      \n      // Calculate positioning (same logic as download)\n      const availableWidth = canvasWidth - (2 * sideMarginPx);\n      const availableHeight = canvasHeight - topMarginPx - bottomMarginPx;\n      const spacingPx = Math.round((settings.spacing || 5) * MM_TO_PIXELS);\n      \n      let startX: number, startY: number, spacingX: number, spacingY: number;\n      \n      // Always use user-defined spacing\n      spacingX = spacingPx;\n      spacingY = spacingPx;\n      \n      const totalGridWidth = photosPerRow * photoWidthPx + (photosPerRow - 1) * spacingX;\n      const totalGridHeight = totalRows * photoHeightPx + (totalRows - 1) * spacingY;\n      \n      if (settings.layout === 'auto') {\n        // Auto layout - center horizontally, use top margin\n        startX = (canvasWidth - totalGridWidth) / 2;\n        startY = topMarginPx + (availableHeight - totalGridHeight) / 2;\n      } else {\n        // Specific position layout\n        if (settings.layout.includes('left')) {\n          startX = sideMarginPx;\n        } else if (settings.layout.includes('right')) {\n          startX = canvasWidth - sideMarginPx - totalGridWidth;\n        } else {\n          startX = (canvasWidth - totalGridWidth) / 2;\n        }\n        \n        if (settings.layout.includes('top')) {\n          startY = topMarginPx;\n        } else if (settings.layout.includes('down')) {\n          startY = canvasHeight - bottomMarginPx - totalGridHeight;\n        } else {\n          startY = topMarginPx + (availableHeight - totalGridHeight) / 2;\n        }\n      }\n\n      // Create composite image using Sharp\n      const baseImage = sharp({\n        create: {\n          width: canvasWidth,\n          height: canvasHeight,\n          channels: 3,\n          background: { r: 255, g: 255, b: 255 }\n        }\n      });\n\n      // Process the photo with border if specified (for preview)\n      let photoBuffer: Buffer;\n      if (borderWidth > 0) {\n        const borderWidthPx = Math.round(borderWidth * MM_TO_PIXELS);\n        const innerWidth = Math.max(10, photoWidthPx - (2 * borderWidthPx));\n        const innerHeight = Math.max(10, photoHeightPx - (2 * borderWidthPx));\n        \n        // Only apply border if there's enough space (at least 10px inner size)\n        if (innerWidth >= 10 && innerHeight >= 10 && borderWidthPx > 0 && borderWidthPx < photoWidthPx / 3) {\n          try {\n            console.log(`Applying ${borderWidth}mm border (${borderWidthPx}px) to preview photo`);\n            \n            // Resize image to inner dimensions first\n            const innerImageBuffer = await sharp(sourcePath)\n              .resize(innerWidth, innerHeight, { fit: 'cover' })\n              .toBuffer();\n            \n            // Create photo with black border - use JPEG format for stability\n            photoBuffer = await sharp({\n              create: {\n                width: photoWidthPx,\n                height: photoHeightPx,\n                channels: 3,\n                background: { r: 0, g: 0, b: 0 }\n              }\n            })\n            .composite([{\n              input: innerImageBuffer,\n              left: borderWidthPx,\n              top: borderWidthPx\n            }])\n            .jpeg()\n            .toBuffer();\n          } catch (error) {\n            console.error('Border processing failed, using image without border:', error);\n            // Fallback to no border if border processing fails\n            photoBuffer = await sharp(sourcePath)\n              .resize(photoWidthPx, photoHeightPx, { fit: 'cover' })\n              .jpeg()\n              .toBuffer();\n          }\n        } else {\n          console.log(`Border too large (${borderWidthPx}px) for photo size (${photoWidthPx}x${photoHeightPx}px), using without border`);\n          // Border too large, use without border\n          photoBuffer = await sharp(sourcePath)\n            .resize(photoWidthPx, photoHeightPx, { fit: 'cover' })\n            .jpeg()\n            .toBuffer();\n        }\n      } else {\n        // No border, use full dimensions\n        photoBuffer = await sharp(sourcePath)\n          .resize(photoWidthPx, photoHeightPx, { fit: 'cover' })\n          .jpeg()\n          .toBuffer();\n      }\n\n      // Create composite operations array\n      const composite = [];\n      let photoCount = 0;\n\n      for (let row = 0; row < totalRows && photoCount < settings.quantity; row++) {\n        for (let col = 0; col < photosPerRow && photoCount < settings.quantity; col++) {\n          let x: number, y: number;\n          \n          if (settings.layout === 'auto') {\n            x = Math.round(startX + (col * (photoWidthPx + spacingX)));\n            y = Math.round(startY + (row * (photoHeightPx + spacingY)));\n          } else {\n            x = Math.round(startX + (col * (photoWidthPx + spacingX)));\n            y = Math.round(startY + (row * (photoHeightPx + spacingY)));\n          }\n          \n          composite.push({\n            input: photoBuffer,\n            left: x,\n            top: y\n          });\n          \n          photoCount++;\n        }\n      }\n\n      // Generate preview image (JPEG for faster loading)  \n      console.log(`Compositing ${composite.length} photo instances`);\n      const outputBuffer = await baseImage\n        .composite(composite)\n        .jpeg({ quality: 85 })\n        .toBuffer();\n      \n      res.setHeader('Content-Type', 'image/jpeg');\n      res.send(outputBuffer);\n\n    } catch (error) {\n      console.error('Preview generation error:', error);\n      res.status(500).json({ message: 'Preview generation failed' });\n    }\n  });\n\n  // Generate high-resolution image endpoint (PNG/JPG)\n  app.post('/api/generate-image', async (req, res) => {\n    try {\n      const { imageId, format = 'png', layoutId } = req.body;\n      \n      // Use specific layout if provided, otherwise get latest\n      let layout = null;\n      if (layoutId) {\n        layout = await storage.getLayoutResultById(layoutId);\n      }\n      \n      if (!layout) {\n        layout = await storage.getLayoutResult(imageId);\n      }\n      \n      if (!layout) {\n        return res.status(404).json({ message: 'Layout not found' });\n      }\n\n      const image = await storage.getUploadedImage(imageId);\n      if (!image) {\n        return res.status(404).json({ message: 'Image not found' });\n      }\n\n      // Use the original or background-removed image, NOT the processed layout image\n      const sourceFilename = image.backgroundRemovedFilename || image.filename;\n      const sourcePath = path.join('uploads', sourceFilename);\n      \n      if (!fs.existsSync(sourcePath)) {\n        return res.status(404).json({ message: 'Source image not found.' });\n      }\n\n      // High-resolution settings for print quality\n      const DPI = 300;\n      const MM_TO_PIXELS = DPI / 25.4;\n      const A4_WIDTH_MM = 210;\n      const A4_HEIGHT_MM = 297;\n\n      const canvasWidth = Math.round(A4_WIDTH_MM * MM_TO_PIXELS);\n      const canvasHeight = Math.round(A4_HEIGHT_MM * MM_TO_PIXELS);\n\n      const { settings, photosPerRow, totalRows, borderWidth = 0 } = layout;\n      const sideMarginPx = Math.round(10 * MM_TO_PIXELS); // 10mm side margins\n      const topMarginPx = Math.round((settings.topMargin || 10) * MM_TO_PIXELS); // User-defined top margin\n      const bottomMarginPx = Math.round(10 * MM_TO_PIXELS); // 10mm bottom margin\n      \n      const photoWidthPx = Math.round(settings.width * MM_TO_PIXELS);\n      const photoHeightPx = Math.round(settings.height * MM_TO_PIXELS);\n      \n      // Calculate positioning\n      const availableWidth = canvasWidth - (2 * sideMarginPx);\n      const availableHeight = canvasHeight - topMarginPx - bottomMarginPx;\n      \n      let startX: number, startY: number, spacingX: number, spacingY: number;\n      \n      // Always use user-defined spacing\n      const spacingMm = settings.spacing || 5;\n      spacingX = Math.round(spacingMm * MM_TO_PIXELS);\n      spacingY = Math.round(spacingMm * MM_TO_PIXELS);\n      \n      const totalGridWidth = photosPerRow * photoWidthPx + (photosPerRow - 1) * spacingX;\n      const totalGridHeight = totalRows * photoHeightPx + (totalRows - 1) * spacingY;\n      \n      if (settings.layout === 'auto') {\n        // Auto layout - center horizontally, use top margin\n        startX = (canvasWidth - totalGridWidth) / 2;\n        startY = topMarginPx + (availableHeight - totalGridHeight) / 2;\n      } else {\n        // Specific position layout\n        if (settings.layout.includes('left')) {\n          startX = sideMarginPx;\n        } else if (settings.layout.includes('right')) {\n          startX = canvasWidth - sideMarginPx - totalGridWidth;\n        } else {\n          startX = (canvasWidth - totalGridWidth) / 2;\n        }\n        \n        if (settings.layout.includes('top')) {\n          startY = topMarginPx;\n        } else if (settings.layout.includes('down')) {\n          startY = canvasHeight - bottomMarginPx - totalGridHeight;\n        } else {\n          startY = topMarginPx + (availableHeight - totalGridHeight) / 2;\n        }\n      }\n\n      // Create composite image using Sharp\n      const baseImage = sharp({\n        create: {\n          width: canvasWidth,\n          height: canvasHeight,\n          channels: 3,\n          background: { r: 255, g: 255, b: 255 }\n        }\n      });\n\n      // Process the photo with border if specified (for high-res download)\n      let photoBuffer: Buffer;\n      if (borderWidth > 0) {\n        const borderWidthPx = Math.round(borderWidth * MM_TO_PIXELS);\n        const innerWidth = Math.max(10, photoWidthPx - (2 * borderWidthPx));\n        const innerHeight = Math.max(10, photoHeightPx - (2 * borderWidthPx));\n        \n        // Only apply border if there's enough space\n        if (innerWidth >= 10 && innerHeight >= 10 && borderWidthPx > 0 && borderWidthPx < photoWidthPx / 3) {\n          try {\n            console.log(`Applying ${borderWidth}mm border (${borderWidthPx}px) to download image`);\n            \n            // Resize image to inner dimensions first\n            const innerImageBuffer = await sharp(sourcePath)\n              .resize(innerWidth, innerHeight, { fit: 'cover' })\n              .toBuffer();\n            \n            // Create photo with black border - explicitly set format\n            photoBuffer = await sharp({\n              create: {\n                width: photoWidthPx,\n                height: photoHeightPx,\n                channels: 3,\n                background: { r: 0, g: 0, b: 0 }\n              }\n            })\n            .composite([{\n              input: innerImageBuffer,\n              left: borderWidthPx,\n              top: borderWidthPx\n            }])\n            .jpeg({ quality: 95 })\n            .toBuffer();\n          } catch (error) {\n            console.error('Border processing failed for download, using image without border:', error);\n            // Fallback to no border if border processing fails\n            photoBuffer = await sharp(sourcePath)\n              .resize(photoWidthPx, photoHeightPx, { fit: 'cover' })\n              .jpeg({ quality: 95 })\n              .toBuffer();\n          }\n        } else {\n          console.log(`Border too large (${borderWidthPx}px) for download photo size (${photoWidthPx}x${photoHeightPx}px), using without border`);\n          // Border too large, use without border\n          photoBuffer = await sharp(sourcePath)\n            .resize(photoWidthPx, photoHeightPx, { fit: 'cover' })\n            .jpeg({ quality: 95 })\n            .toBuffer();\n        }\n      } else {\n        // No border, use full dimensions\n        photoBuffer = await sharp(sourcePath)\n          .resize(photoWidthPx, photoHeightPx, { fit: 'cover' })\n          .jpeg({ quality: 95 })\n          .toBuffer();\n      }\n\n      // Create composite operations array\n      const composite = [];\n      let photoCount = 0;\n\n      for (let row = 0; row < totalRows && photoCount < settings.quantity; row++) {\n        for (let col = 0; col < photosPerRow && photoCount < settings.quantity; col++) {\n          let x: number, y: number;\n          \n          if (settings.layout === 'auto') {\n            x = Math.round(startX + (col * (photoWidthPx + spacingX)));\n            y = Math.round(startY + (row * (photoHeightPx + spacingY)));\n          } else {\n            x = Math.round(startX + (col * (photoWidthPx + spacingX)));\n            y = Math.round(startY + (row * (photoHeightPx + spacingY)));\n          }\n          \n          composite.push({\n            input: photoBuffer,\n            left: x,\n            top: y\n          });\n          \n          photoCount++;\n        }\n      }\n\n      // Generate the final image\n      let outputProcessor = baseImage.composite(composite);\n      \n      if (format === 'jpg' || format === 'jpeg') {\n        outputProcessor = outputProcessor.jpeg({ quality: 95 });\n      } else {\n        outputProcessor = outputProcessor.png({ quality: 95 });\n      }\n\n      const outputBuffer = await outputProcessor.toBuffer();\n      \n      // Generate descriptive filename with settings\n      const timestamp = new Date().toISOString().slice(0, 10); // YYYY-MM-DD format\n      const baseFileName = image.originalName.replace(/\\.[^/.]+$/, \"\"); // Remove extension\n      const borderInfo = borderWidth > 0 ? `_border-${borderWidth}mm` : '';\n      // Normalize format extension (jpg -> jpg, jpeg -> jpg, png -> png)\n      const fileExtension = format === 'jpeg' ? 'jpg' : format;\n      const filename = `passport-photos_${baseFileName}_${settings.width}x${settings.height}mm_${settings.quantity}photos${borderInfo}_${timestamp}.${fileExtension}`;\n      \n      console.log(`Generated ${format.toUpperCase()}: ${filename}`);\n      \n      res.setHeader('Content-Type', format === 'png' ? 'image/png' : 'image/jpeg');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(outputBuffer);\n\n    } catch (error) {\n      console.error('Image generation error:', error);\n      res.status(500).json({ message: 'Image generation failed' });\n    }\n  });\n\n  // Generate PDF endpoint\n  app.post('/api/generate-pdf', async (req, res) => {\n    try {\n      const { imageId, layoutId } = req.body;\n      \n      // Use specific layout if provided, otherwise get latest\n      let layout = null;\n      if (layoutId) {\n        layout = await storage.getLayoutResultById(layoutId);\n      }\n      \n      if (!layout) {\n        layout = await storage.getLayoutResult(imageId);\n      }\n      \n      if (!layout) {\n        return res.status(404).json({ message: 'Layout not found' });\n      }\n\n      const image = await storage.getUploadedImage(imageId);\n      if (!image) {\n        return res.status(404).json({ message: 'Image not found' });\n      }\n\n      // Create PDF with A4 dimensions\n      const pdf = new jsPDF({\n        orientation: 'portrait',\n        unit: 'mm',\n        format: 'a4'\n      });\n\n      const { settings, photosPerRow, totalRows, borderWidth = 0 } = layout;\n      const sideMargin = 10; // 10mm side margins\n      const topMargin = settings.topMargin || 10; // User-defined top margin\n      const bottomMargin = 10; // 10mm bottom margin\n      \n      // Calculate positioning based on layout type\n      const availableWidth = 210 - (2 * sideMargin);\n      const availableHeight = 297 - topMargin - bottomMargin;\n      \n      let startX: number, startY: number, spacingX: number, spacingY: number;\n      \n      // Always use user-defined spacing\n      const spacingMm = settings.spacing || 5;\n      spacingX = spacingMm;\n      spacingY = spacingMm;\n      \n      const totalGridWidth = photosPerRow * settings.width + (photosPerRow - 1) * spacingX;\n      const totalGridHeight = totalRows * settings.height + (totalRows - 1) * spacingY;\n      \n      if (settings.layout === 'auto') {\n        // Auto layout - center horizontally, use top margin\n        startX = (210 - totalGridWidth) / 2;\n        startY = topMargin + (availableHeight - totalGridHeight) / 2;\n      } else {\n        // Specific position layout\n        if (settings.layout.includes('left')) {\n          startX = sideMargin;\n        } else if (settings.layout.includes('right')) {\n          startX = 210 - sideMargin - totalGridWidth;\n        } else { // middle\n          startX = (210 - totalGridWidth) / 2;\n        }\n        \n        // Calculate vertical position based on layout setting\n        if (settings.layout.includes('top')) {\n          startY = topMargin;\n        } else if (settings.layout.includes('down')) {\n          startY = 297 - bottomMargin - totalGridHeight;\n        } else { // middle\n          startY = topMargin + (availableHeight - totalGridHeight) / 2;\n        }\n      }\n\n      // Read the processed image (same as preview and PNG/JPG downloads)\n      const processedImagePath = path.join('uploads', `processed_${image.filename}.jpg`);\n      if (!fs.existsSync(processedImagePath)) {\n        return res.status(404).json({ message: 'Processed image not found. Please generate layout first.' });\n      }\n      const imageBuffer = fs.readFileSync(processedImagePath);\n      const imageBase64 = imageBuffer.toString('base64');\n\n      // Add images to PDF\n      let photoCount = 0;\n      for (let row = 0; row < totalRows && photoCount < settings.quantity; row++) {\n        for (let col = 0; col < photosPerRow && photoCount < settings.quantity; col++) {\n          let x: number, y: number;\n          \n          if (settings.layout === 'auto') {\n            // Auto layout: equal spacing between all photos\n            x = startX + (col * (settings.width + spacingX));\n            y = startY + (row * (settings.height + spacingY));\n          } else {\n            // Positioned layout: consistent spacing between adjacent photos\n            x = startX + (col * (settings.width + spacingX));\n            y = startY + (row * (settings.height + spacingY));\n          }\n          \n          pdf.addImage(imageBase64, 'JPEG', x, y, settings.width, settings.height);\n          \n          // Add border if border width is set\n          if (borderWidth > 0) {\n            pdf.setDrawColor(0, 0, 0); // Black border\n            pdf.setLineWidth(borderWidth);\n            pdf.rect(x, y, settings.width, settings.height);\n          }\n          \n          photoCount++;\n        }\n      }\n\n      const pdfBuffer = Buffer.from(pdf.output('arraybuffer'));\n      \n      // Generate descriptive filename with settings\n      const timestamp = new Date().toISOString().slice(0, 10); // YYYY-MM-DD format\n      const baseFileName = image.originalName.replace(/\\.[^/.]+$/, \"\"); // Remove extension\n      const borderInfo = borderWidth > 0 ? `_border-${borderWidth}mm` : '';\n      const filename = `passport-photos_${baseFileName}_${settings.width}x${settings.height}mm_${settings.quantity}photos${borderInfo}_${timestamp}.pdf`;\n      \n      console.log(`Generated PDF: ${filename}`);\n      \n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(pdfBuffer);\n    } catch (error) {\n      console.error('PDF generation error:', error);\n      res.status(500).json({ message: 'PDF generation failed' });\n    }\n  });\n\n  // Delete image endpoint\n  app.delete('/api/images/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const image = await storage.getUploadedImage(id);\n      \n      if (image) {\n        // Delete files\n        const originalPath = path.join('uploads', image.filename);\n        const processedPath = path.join('uploads', `processed_${image.filename}.jpg`);\n        \n        if (fs.existsSync(originalPath)) fs.unlinkSync(originalPath);\n        if (fs.existsSync(processedPath)) fs.unlinkSync(processedPath);\n        \n        // Delete from storage\n        await storage.deleteUploadedImage(id);\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Delete error:', error);\n      res.status(500).json({ message: 'Delete failed' });\n    }\n  });\n\n  // Preset endpoints (require authentication)\n  app.get('/api/presets', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const presets = await storage.getAllPresets(userId);\n      res.json(presets);\n    } catch (error) {\n      console.error('Get presets error:', error);\n      res.status(500).json({ message: 'Failed to get presets' });\n    }\n  });\n\n  app.post('/api/presets', isAuthenticated, async (req: any, res) => {\n    try {\n      const { name, description, settings, borderWidth } = req.body;\n      const userId = req.user.id;\n      const preset = await storage.savePreset({\n        userId,\n        name,\n        description,\n        settings,\n        borderWidth: borderWidth || 0\n      });\n      res.json(preset);\n    } catch (error) {\n      console.error('Save preset error:', error);\n      res.status(500).json({ message: 'Failed to save preset' });\n    }\n  });\n\n  app.delete('/api/presets/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deletePreset(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Delete preset error:', error);\n      res.status(500).json({ message: 'Failed to delete preset' });\n    }\n  });\n\n  // Get user's image history (new endpoint)\n  app.get('/api/images/history', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const images = await storage.getUserImages(userId);\n      res.json(images);\n    } catch (error) {\n      console.error('Get user images error:', error);\n      res.status(500).json({ message: 'Failed to get image history' });\n    }\n  });\n\n  // Save cropped photo endpoint\n  app.post('/api/save-cropped-photo', async (req, res) => {\n    try {\n      const { imageId, cropSettings, width, height, replaceOriginal } = req.body;\n      \n      const image = await storage.getUploadedImage(imageId);\n      if (!image) {\n        return res.status(404).json({ message: 'Image not found' });\n      }\n\n      // Use background-removed image if available, otherwise use original\n      const sourceFilename = image.backgroundRemovedFilename || image.filename;\n      const imagePath = path.join('uploads', sourceFilename);\n      if (!fs.existsSync(imagePath)) {\n        return res.status(404).json({ message: 'Image file not found' });\n      }\n\n      // Load the original image\n      let imageProcessor = sharp(imagePath);\n      \n      // Get image metadata for calculations\n      const metadata = await imageProcessor.metadata();\n      const originalWidth = metadata.width!;\n      const originalHeight = metadata.height!;\n\n      // Apply crop settings\n      const cropX = Math.round((cropSettings.x / 100) * originalWidth / 2 + (100 - cropSettings.width) / 2 * originalWidth / 100);\n      const cropY = Math.round((cropSettings.y / 100) * originalHeight / 2 + (100 - cropSettings.height) / 2 * originalHeight / 100);\n      const cropWidth = Math.round((cropSettings.width / 100) * originalWidth);\n      const cropHeight = Math.round((cropSettings.height / 100) * originalHeight);\n\n      // Apply transformations in the correct order\n      imageProcessor = imageProcessor\n        .extract({\n          left: Math.max(0, Math.min(originalWidth - cropWidth, cropX)),\n          top: Math.max(0, Math.min(originalHeight - cropHeight, cropY)),\n          width: Math.min(cropWidth, originalWidth),\n          height: Math.min(cropHeight, originalHeight)\n        });\n\n      // Apply rotation if specified\n      if (cropSettings.rotation !== 0) {\n        imageProcessor = imageProcessor.rotate(cropSettings.rotation, { background: { r: 255, g: 255, b: 255 } });\n      }\n\n      // Apply scale\n      if (cropSettings.scale !== 1) {\n        const currentMeta = await imageProcessor.metadata();\n        const newWidth = Math.round(currentMeta.width! * cropSettings.scale);\n        const newHeight = Math.round(currentMeta.height! * cropSettings.scale);\n        imageProcessor = imageProcessor.resize(newWidth, newHeight, { fit: 'cover' });\n      }\n\n      if (replaceOriginal) {\n        // Save as new file and update the image record\n        const newFilename = `cropped_${Date.now()}_${image.filename}`;\n        const newImagePath = path.join('uploads', newFilename);\n        \n        // Generate the final cropped image\n        const outputBuffer = await imageProcessor.jpeg({ quality: 95 }).toBuffer();\n        fs.writeFileSync(newImagePath, outputBuffer);\n        \n        // Get the new image size\n        const newMetadata = await sharp(newImagePath).metadata();\n        \n        // Update the image record with the new cropped file\n        const updatedImage = await storage.updateUploadedImage(imageId, {\n          filename: newFilename,\n          size: outputBuffer.length\n        });\n        \n        console.log(`Replaced original image with cropped version: ${newFilename}`);\n        res.json(updatedImage);\n        \n      } else {\n        // Download mode - calculate passport photo dimensions and resize\n        const DPI = 300;\n        const MM_TO_PIXELS = DPI / 25.4;\n        const photoWidthPx = Math.round(width * MM_TO_PIXELS);\n        const photoHeightPx = Math.round(height * MM_TO_PIXELS);\n        \n        imageProcessor = imageProcessor\n          .resize(photoWidthPx, photoHeightPx, { fit: 'cover' });\n\n        // Generate the final image as PNG for quality\n        const outputBuffer = await imageProcessor.png({ quality: 95 }).toBuffer();\n        \n        // Generate descriptive filename\n        const timestamp = new Date().toISOString().slice(0, 10);\n        const baseFileName = image.originalName.replace(/\\.[^/.]+$/, \"\");\n        const filename = `cropped-passport-photo_${baseFileName}_${width}x${height}mm_${timestamp}.png`;\n        \n        console.log(`Generated cropped passport photo: ${filename}`);\n        \n        res.setHeader('Content-Type', 'image/png');\n        res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n        res.send(outputBuffer);\n      }\n\n    } catch (error) {\n      console.error('Save cropped photo error:', error);\n      res.status(500).json({ message: 'Failed to save cropped photo' });\n    }\n  });\n\n  // Sitemap route\n  app.get('/sitemap.xml', async (req, res) => {\n    res.header('Content-Type', 'application/xml');\n    \n    try {\n      // Determine the base URL - use production URL if available, otherwise dev URL\n      const baseUrl = process.env.NODE_ENV === 'production' \n        ? 'https://passport-photo-new.onrender.com'\n        : `https://${process.env.REPLIT_DEV_DOMAIN}`;\n      \n      const smStream = new SitemapStream({ hostname: baseUrl });\n\n      // Define public URLs accessible to all users\n      const links = [\n        { url: '/', changefreq: 'daily', priority: 1.0 },\n        { url: '/privacy-policy', changefreq: 'monthly', priority: 0.5 },\n        { url: '/terms-of-service', changefreq: 'monthly', priority: 0.5 }\n      ];\n\n      // Convert links array to readable stream and pipe to sitemap\n      const data = await streamToPromise(Readable.from(links).pipe(smStream));\n      \n      res.send(data.toString());\n    } catch (error) {\n      console.error('Sitemap generation error:', error);\n      res.status(500).end();\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":49189},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/loading-screen.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { Loader2, Camera, Sparkles } from 'lucide-react';\n\ninterface LoadingScreenProps {\n  message?: string;\n  submessage?: string;\n  show?: boolean;\n}\n\nexport function LoadingScreen({ \n  message = \"Loading...\", \n  submessage = \"Please wait while we prepare everything for you\",\n  show = true \n}: LoadingScreenProps) {\n  const [dots, setDots] = useState('');\n\n  useEffect(() => {\n    if (!show) return;\n    \n    const interval = setInterval(() => {\n      setDots(prev => prev.length >= 3 ? '' : prev + '.');\n    }, 500);\n\n    return () => clearInterval(interval);\n  }, [show]);\n\n  if (!show) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-gradient-to-br from-blue-900 via-purple-900 to-pink-900 dark:from-gray-900 dark:via-gray-800 dark:to-black loading-fade-in\">\n      {/* Animated background particles */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute -top-40 -left-40 w-80 h-80 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob\"></div>\n        <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-2000\"></div>\n        <div className=\"absolute -bottom-40 -left-40 w-80 h-80 bg-pink-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-4000\"></div>\n        \n        {/* Floating geometric shapes */}\n        <div className=\"absolute top-1/4 left-1/4 w-4 h-4 bg-white/20 rounded-full animate-float delay-1000\"></div>\n        <div className=\"absolute top-1/3 right-1/4 w-3 h-3 bg-white/30 rounded-full animate-float delay-2000\"></div>\n        <div className=\"absolute bottom-1/4 left-1/3 w-2 h-2 bg-white/40 rounded-full animate-float delay-3000\"></div>\n        <div className=\"absolute bottom-1/3 right-1/3 w-5 h-5 bg-white/15 rounded-full animate-float delay-500\"></div>\n        \n        {/* Grid pattern overlay */}\n        <div className=\"absolute inset-0 bg-grid-white/5 bg-[size:50px_50px] animate-pulse\"></div>\n      </div>\n\n      {/* Main loading content */}\n      <div className=\"relative z-10 text-center px-8 max-w-md w-full\">\n        {/* Logo/Icon area */}\n        <div className=\"mb-8\">\n          <div className=\"relative mx-auto w-24 h-24 mb-6\">\n            {/* Rotating outer ring */}\n            <div className=\"absolute inset-0 border-4 border-white/20 rounded-full\"></div>\n            <div className=\"absolute inset-0 border-4 border-t-white border-r-white/50 border-b-white/20 border-l-white/20 rounded-full animate-spin\"></div>\n            \n            {/* Inner content */}\n            <div className=\"absolute inset-3 bg-gradient-to-br from-white/20 to-white/5 rounded-full backdrop-blur-sm flex items-center justify-center\">\n              <Camera className=\"w-8 h-8 text-white animate-pulse\" />\n            </div>\n            \n            {/* Orbiting sparkles */}\n            <div className=\"absolute inset-0 animate-spin-slow\">\n              <Sparkles className=\"absolute -top-2 left-1/2 transform -translate-x-1/2 w-4 h-4 text-yellow-300 animate-pulse\" />\n              <Sparkles className=\"absolute -bottom-2 left-1/2 transform -translate-x-1/2 w-3 h-3 text-blue-300 animate-pulse delay-500\" />\n              <Sparkles className=\"absolute top-1/2 -left-2 transform -translate-y-1/2 w-3 h-3 text-pink-300 animate-pulse delay-1000\" />\n              <Sparkles className=\"absolute top-1/2 -right-2 transform -translate-y-1/2 w-4 h-4 text-purple-300 animate-pulse delay-1500\" />\n            </div>\n          </div>\n        </div>\n\n        {/* Loading text */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-3xl font-bold text-white mb-2\">\n            <span className=\"bg-gradient-to-r from-white to-gray-200 bg-clip-text text-transparent\">\n              Passport Photo Generator\n            </span>\n          </h2>\n          \n          <div className=\"space-y-2\">\n            <p className=\"text-xl font-semibold text-white/90\">\n              {message}{dots}\n            </p>\n            <p className=\"text-sm text-white/70 leading-relaxed\">\n              {submessage}\n            </p>\n          </div>\n\n          {/* Progress bar */}\n          <div className=\"mt-8 w-full bg-white/20 rounded-full h-2 overflow-hidden\">\n            <div className=\"h-full bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 rounded-full animate-loading-bar\"></div>\n          </div>\n\n          {/* Feature hints */}\n          <div className=\"mt-6 text-xs text-white/50 space-y-1\">\n            <p>‚ú® AI-powered background removal</p>\n            <p>üìè Professional passport layouts</p>\n            <p>üé® Multiple download formats</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Mini loading spinner for smaller components\nexport function LoadingSpinner({ size = 'md', className = '' }: { \n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n}) {\n  const sizeClasses = {\n    sm: 'w-4 h-4',\n    md: 'w-6 h-6', \n    lg: 'w-8 h-8'\n  };\n\n  return (\n    <div className={`relative ${sizeClasses[size]} ${className}`}>\n      <div className=\"absolute inset-0 border-2 border-current border-t-transparent rounded-full animate-spin opacity-20\"></div>\n      <div className=\"absolute inset-1 border-2 border-current border-r-transparent border-b-transparent rounded-full animate-spin-reverse\"></div>\n      <Loader2 className={`${sizeClasses[size]} animate-pulse`} />\n    </div>\n  );\n}\n\n// Page transition loader\nexport function PageTransition({ isLoading, message = \"Transitioning...\" }: { \n  isLoading: boolean; \n  message?: string;\n}) {\n  if (!isLoading) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-40 bg-gradient-to-br from-blue-600/90 to-purple-600/90 backdrop-blur-sm flex items-center justify-center\">\n      {/* Animated background particles */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute top-20 left-20 w-32 h-32 bg-white/10 rounded-full animate-float delay-1000\"></div>\n        <div className=\"absolute top-32 right-20 w-24 h-24 bg-white/15 rounded-full animate-float delay-2000\"></div>\n        <div className=\"absolute bottom-20 left-32 w-20 h-20 bg-white/20 rounded-full animate-float delay-3000\"></div>\n      </div>\n\n      <div className=\"relative bg-white/10 backdrop-blur-xl rounded-2xl p-8 border border-white/20 shadow-2xl\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"relative\">\n            <LoadingSpinner size=\"lg\" className=\"text-white\" />\n            <div className=\"absolute inset-0 bg-white/20 rounded-full animate-ping\"></div>\n          </div>\n          <p className=\"text-white font-medium text-lg\">{message}</p>\n          <div className=\"w-32 h-1 bg-white/20 rounded-full overflow-hidden\">\n            <div className=\"h-full bg-white/60 rounded-full animate-loading-bar\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Router loading interceptor\nexport function NavigationLoader() {\n  const [isNavigating, setIsNavigating] = useState(false);\n  const [navMessage, setNavMessage] = useState('');\n\n  useEffect(() => {\n    // Intercept link clicks\n    const handleLinkClick = (e: Event) => {\n      const target = e.target as HTMLElement;\n      const link = target.closest('a');\n      \n      if (link && link.href) {\n        const href = link.href;\n        const isExternal = href.startsWith('http') && !href.includes(window.location.hostname);\n        const isApiRoute = href.includes('/api/');\n        \n        if (isExternal || isApiRoute) {\n          setNavMessage(isExternal ? 'Redirecting...' : 'Processing...');\n          setIsNavigating(true);\n        }\n      }\n    };\n\n    // Intercept form submissions\n    const handleFormSubmit = (e: Event) => {\n      const form = e.target as HTMLFormElement;\n      if (form.method === 'POST' || form.action.includes('/api/')) {\n        setNavMessage('Processing...');\n        setIsNavigating(true);\n      }\n    };\n\n    document.addEventListener('click', handleLinkClick);\n    document.addEventListener('submit', handleFormSubmit);\n\n    // Reset on page visibility change\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible') {\n        setIsNavigating(false);\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    return () => {\n      document.removeEventListener('click', handleLinkClick);\n      document.removeEventListener('submit', handleFormSubmit);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, []);\n\n  return <PageTransition isLoading={isNavigating} message={navMessage} />;\n}","size_bytes":8765},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/EmailTest.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { Mail, Send, CheckCircle } from 'lucide-react';\n\nexport function EmailTest() {\n  const [email, setEmail] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [verificationCode, setVerificationCode] = useState('');\n  const { toast } = useToast();\n\n  const testEmailService = async () => {\n    if (!email) {\n      toast({\n        title: \"Email Required\",\n        description: \"Please enter an email address to test the service.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/test-email', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email })\n      });\n\n      const result = await response.json();\n      \n      if (result.success) {\n        setVerificationCode(result.verificationCode);\n        toast({\n          title: \"Email Sent Successfully!\",\n          description: \"Check the console logs for the verification code (development mode).\",\n        });\n      } else {\n        toast({\n          title: \"Email Failed\",\n          description: result.message || \"Failed to send test email\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      console.error('Email test error:', error);\n      toast({\n        title: \"Request Failed\",\n        description: \"Failed to test email service\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader className=\"text-center\">\n        <div className=\"mx-auto w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mb-4\">\n          <Mail className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n        </div>\n        <CardTitle>Test Email Service</CardTitle>\n        <CardDescription>\n          Send a verification code to test the email system\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"email\">Email Address</Label>\n          <Input\n            id=\"email\"\n            type=\"email\"\n            placeholder=\"Enter email address\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          />\n        </div>\n        \n        <Button \n          onClick={testEmailService} \n          disabled={isLoading || !email}\n          className=\"w-full\"\n        >\n          {isLoading ? (\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n              Sending...\n            </div>\n          ) : (\n            <div className=\"flex items-center gap-2\">\n              <Send className=\"w-4 h-4\" />\n              Send Test Email\n            </div>\n          )}\n        </Button>\n\n        {verificationCode && (\n          <div className=\"mt-4 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg\">\n            <div className=\"flex items-center gap-2 text-green-800 dark:text-green-200 mb-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              <span className=\"font-medium\">Email Sent!</span>\n            </div>\n            <p className=\"text-sm text-green-700 dark:text-green-300 mb-2\">\n              Verification code (development mode):\n            </p>\n            <div className=\"bg-white dark:bg-gray-800 border rounded p-3 text-center\">\n              <span className=\"text-2xl font-mono font-bold text-blue-600 dark:text-blue-400 tracking-wider\">\n                {verificationCode}\n              </span>\n            </div>\n            <p className=\"text-xs text-green-600 dark:text-green-400 mt-2\">\n              In production, this code would be sent to the email address instead of displayed here.\n            </p>\n          </div>\n        )}\n\n        <div className=\"text-xs text-muted-foreground space-y-1\">\n          <p>‚Ä¢ If SMTP credentials are configured, real emails are sent</p>\n          <p>‚Ä¢ Otherwise, codes appear in console (development mode)</p>\n          <p>‚Ä¢ Perfect for testing without external dependencies</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4609},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"replit.md":{"content":"# Passport Photo Generator Application\n\n## Overview\n\nThis is a full-stack web application for generating passport-sized photos. The application allows users to upload images and automatically arrange them into a printable layout with customizable dimensions and quantities. Built with a modern React frontend and Express.js backend, it provides an intuitive interface for creating professional passport photos.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\nThe application follows a monorepo structure with clear separation between client and server code:\n\n- **Frontend**: React application with TypeScript, built with Vite\n- **Backend**: Express.js server with TypeScript \n- **Database**: PostgreSQL with Drizzle ORM (configured but not yet implemented)\n- **UI Framework**: Shadcn/ui components with Tailwind CSS styling\n- **State Management**: TanStack Query for server state management\n\n## Key Components\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite with hot module replacement\n- **Routing**: Wouter for lightweight client-side routing\n- **Styling**: Tailwind CSS with custom design system variables\n- **UI Components**: Shadcn/ui component library with Radix UI primitives\n- **Forms**: React Hook Form with Zod validation\n- **State Management**: TanStack Query for API state, React hooks for local state\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **File Handling**: Multer for multipart file uploads\n- **Image Processing**: Sharp for image manipulation and resizing\n- **PDF Generation**: jsPDF for creating printable layouts\n- **Validation**: Zod schemas shared between client and server\n\n### Data Storage\n- **Database**: PostgreSQL with Drizzle ORM (fully implemented and active)\n- **File Storage**: Local filesystem storage for uploaded images\n- **Session Storage**: In-memory storage with plans for PostgreSQL sessions\n- **Temporary Storage**: Multer uploads directory for processing\n\n## Data Flow\n\n1. **Image Upload**: User selects image files through drag-and-drop interface\n2. **File Processing**: Multer handles file upload, Sharp processes images\n3. **Layout Generation**: Server calculates optimal photo arrangement based on settings\n4. **Preview Generation**: Processed layout returned to client for preview\n5. **PDF Export**: Client can request PDF generation for printing\n\n### API Endpoints\n- `POST /api/upload` - Handle image file uploads\n- `POST /api/generate-layout` - Process images with user settings\n- `POST /api/generate-pdf` - Create printable PDF layouts\n- `DELETE /api/images/:id` - Remove uploaded images\n\n## External Dependencies\n\n### Production Dependencies\n- **UI & Styling**: @radix-ui components, tailwindcss, class-variance-authority\n- **Data Handling**: @tanstack/react-query, react-hook-form, zod\n- **Server**: express, multer, sharp, jspdf\n- **Database**: @neondatabase/serverless, drizzle-orm\n- **Utilities**: date-fns, clsx, lucide-react\n\n### Development Dependencies\n- **Build Tools**: vite, esbuild, typescript\n- **Replit Integration**: @replit/vite-plugin-runtime-error-modal\n\n## Deployment Strategy\n\nThe application is configured for deployment on Replit with the following setup:\n\n### Build Process\n- **Development**: `npm run dev` - Runs TSX server with hot reload\n- **Production Build**: `npm run build` - Vite builds client, esbuild bundles server\n- **Production Start**: `npm run start` - Runs compiled server from dist directory\n\n### Environment Configuration\n- **Database**: Configured for PostgreSQL via DATABASE_URL environment variable\n- **File Storage**: Uploads directory with automatic creation\n- **Static Assets**: Vite builds to dist/public for production serving\n\n### Database Setup\n- **Active Database**: PostgreSQL database fully implemented and running\n- **Schema Management**: Drizzle ORM with tables for uploaded images and layout results\n- **Data Models**: \n  - `uploaded_images` table storing image metadata and files\n  - `layout_results` table storing photo arrangement settings and results\n- **Relations**: Proper foreign key relationships between images and their layouts\n- **Migration**: Applied via `npm run db:push` command\n\n## Recent Changes (January 2025)\n\n### Database Implementation\n- ‚úì Added PostgreSQL database with Drizzle ORM\n- ‚úì Created database tables for uploaded images and layout results\n- ‚úì Implemented DatabaseStorage class replacing in-memory storage\n- ‚úì Added proper TypeScript types and Zod validation schemas\n- ‚úì Established foreign key relationships between tables\n- ‚úì Successfully migrated schema to production database\n\n### Background Removal & Download Options (January 28, 2025)\n- ‚úì Integrated custom background remover API with color customization\n- ‚úì Added automatic background removal workflow with user's custom API\n- ‚úì Layout generation now prioritizes background-removed images when available\n- ‚úì Added PNG and JPG download options alongside existing PDF generation\n- ‚úì Implemented high-resolution image generation using Sharp library\n- ‚úì Enhanced UI with multiple download format options and helpful descriptions\n- ‚úì Background-removed images automatically trigger layout regeneration\n\n### Border Processing & File Naming (January 29, 2025)\n- ‚úì Fixed preview quantity display to show exact number of photos set by user\n- ‚úì Added black border processing for all photo outputs (preview, PNG, JPG, PDF)\n- ‚úì Implemented proper Sharp image processing with error handling and fallbacks\n- ‚úì Enhanced filename generation with descriptive details including dimensions, quantity, and border settings\n- ‚úì Added timestamp and photo settings to downloaded file names for better organization\n- ‚úì Fixed layout calculation logic to respect user's quantity setting instead of hardcoded layouts\n\n### Background Removal Integration (January 29, 2025)\n- ‚úì Integrated Remove.bg API for professional background removal\n- ‚úì Added support for custom background color selection\n- ‚úì Maintained existing UI and workflow with reliable cloud service\n- ‚úì Background removal with automatic layout regeneration\n- ‚úì Fallback from custom API to Remove.bg for reliability\n- ‚úì Implemented multiple API key fallback system with 10 Remove.bg keys\n- ‚úì Automatic failover when API keys hit limits or fail\n- ‚úì Robust error handling and logging for API key cycling\n\n### User Experience Improvements (January 29, 2025)\n- ‚úì Real-time preview is now permanently enabled for instant feedback\n- ‚úì Removed manual preview toggle to simplify interface\n- ‚úì Save cropped photo functionality now replaces original in preview instead of downloading\n- ‚úì Streamlined UI with automatic preview updates on all setting changes\n- ‚úì Enhanced crop and position tools with instant visual feedback\n\n### Theme System Implementation (January 29, 2025)\n- ‚úì Added comprehensive light and dark theme support with smooth transitions\n- ‚úì Created attractive animated theme toggle with sun/moon icons and glow effects\n- ‚úì Implemented ThemeProvider with localStorage persistence across sessions\n- ‚úì Enhanced all UI components with proper dark mode styling\n- ‚úì Added gradient backgrounds that adapt beautifully to both themes\n\n### Authentication & Data Persistence (January 30, 2025)\n- ‚úì Implemented Google login using Replit Auth with OpenID Connect integration\n- ‚úì Added comprehensive user authentication with session management  \n- ‚úì Created secure user-specific data storage for presets and image history\n- ‚úì Built elegant landing page for non-authenticated users with feature highlights\n- ‚úì Added user profile display and logout functionality in main application header\n- ‚úì Enhanced error handling with automatic redirection for authentication failures\n- ‚úì Optimized performance by simplifying intro animations and reducing heavy transitions\n- ‚úì Enhanced Google login branding with Google icons and clear call-to-action buttons\n- ‚úì Integrated multiple Remove.bg API keys for robust background removal service\n- ‚úì Database schema successfully migrated and user authentication fully operational\n\nThe application now features complete Google authentication through Replit's secure OpenID Connect system. Users can sign in with their Google accounts, save custom presets, access their image processing history, and maintain their data across sessions. The interface includes prominent Google branding to make the authentication method clear to users, optimized for better performance while maintaining a professional, polished appearance.\n\n### Comprehensive Secrets Management System (January 30, 2025)\n- ‚úì Created automated secrets management system that initializes on first run\n- ‚úì Automatically detects and configures available environment variables (DATABASE_URL)\n- ‚úì Saves all secrets to .secrets file with automatic .gitignore integration\n- ‚úì Provides helpful setup instructions when required secrets are missing\n- ‚úì Pre-configured with 10 Remove.bg API keys for robust background removal\n- ‚úì Graceful fallbacks when optional services (Google Auth, Mailjet) aren't configured\n- ‚úì Real-time validation and status reporting of all configured secrets\n- ‚úì Auto-generated session secrets and Replit URL detection for seamless setup\n\n### Email Verification Without API Dependencies (January 30, 2025)\n- ‚úì Built free email service using nodemailer with Gmail SMTP and generic SMTP support\n- ‚úì Console-based fallback for development (verification codes display in terminal)\n- ‚úì Automatic email service with graceful degradation when SMTP isn't configured\n- ‚úì Added email verification endpoints (/api/test-email) for instant testing\n- ‚úì Created elegant email templates with professional styling and branding\n- ‚úì Integrated email service into existing authentication workflow\n- ‚úì Frontend test interface available at /test-email route for demonstration\n- ‚úì Zero external dependencies - works immediately on project remix\n\n### Two-Step Registration Process & OTP Flow Fix (August 11, 2025)\n- ‚úì Implemented secure two-step registration preventing premature account creation\n- ‚úì Added `pending_registrations` table to temporarily store unverified signup data\n- ‚úì User accounts are now created only AFTER successful OTP verification\n- ‚úì Fixed issue where incomplete registrations left \"ghost\" accounts in the database\n- ‚úì Enhanced registration flow prevents \"account already exists\" errors for unverified emails\n- ‚úì Users can re-attempt registration if they didn't complete OTP verification\n- ‚úì Proper cleanup of pending registrations after successful verification\n- ‚úì Maintained backwards compatibility with existing verified user accounts\n\nThe registration system now follows a proper two-step process:\n1. User submits registration ‚Üí Data stored in `pending_registrations` table + OTP sent\n2. User verifies OTP ‚Üí Actual user account created in `users` table + pending record deleted\n\nThis prevents the previous issue where users would see \"account already exists\" if they didn't complete OTP verification on their first attempt. Users can now safely re-register with the same email if their previous attempt was not completed, and only verified accounts are considered \"existing\" for duplicate prevention.\n\nThe email system works instantly when someone remixes this project. Users can configure Gmail or SMTP credentials for real emails, or rely on console output for development. The system includes beautiful HTML email templates and graceful fallbacks, ensuring verification codes are always accessible whether through email delivery or console logs.\n\nThe secrets management system ensures new users can run the project immediately on first startup, with automatic configuration of all available services and clear guidance for optional features. When someone remixes this project, all core secrets (database, session, Remove.bg API keys) are automatically configured, making the application instantly functional.\n\n## Environment Variables Configuration (January 30, 2025)\n\n### Current Setup Status\n- ‚úÖ **Database**: PostgreSQL fully configured and operational\n- ‚úÖ **Authentication**: Guest login working, Google OAuth credentials provided\n- ‚úÖ **Background Removal**: 10 Remove.bg API keys configured with failover\n- ‚úÖ **Email Service**: Gmail SMTP configured for verification emails\n- ‚úÖ **Session Management**: Secure session secrets auto-generated\n- ‚úÖ **Mobile Responsive**: Header buttons optimized for mobile devices\n- ‚ùå **Mailjet Service**: Removed per user request - using Gmail SMTP only\n\n### Complete Environment Variables List\nThe application uses the following environment variables (see .env.example for full configuration):\n\n**Core Required:**\n- `DATABASE_URL` - PostgreSQL connection string\n- `SESSION_SECRET` - Session encryption key (auto-generated)\n- `REPLIT_APP_URL` - Application URL for OAuth redirects\n\n**Background Removal (10 keys for redundancy):**\n- `REMOVE_BG_API_KEY_1` through `REMOVE_BG_API_KEY_10`\n\n**Authentication:**\n- `GOOGLE_CLIENT_ID` - Google OAuth client ID\n- `GOOGLE_CLIENT_SECRET` - Google OAuth client secret\n\n**Email Service:**\n- `GMAIL_USER` - Gmail address for SMTP\n- `GMAIL_APP_PASSWORD` - Gmail app-specific password\n\nAll secrets are managed through Replit's secure environment system with automatic fallbacks and graceful degradation when optional services aren't configured.","size_bytes":13489},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    staleTime: 1000 * 60 * 5, // Consider data fresh for 5 minutes\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    error,\n  };\n}","size_bytes":341},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/contexts/ThemeContext\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport PassportGenerator from \"@/pages/passport-generator\";\nimport Landing from \"@/pages/landing\";\nimport PrivacyPolicy from \"@/pages/privacy-policy\";\nimport TermsOfService from \"@/pages/terms-of-service\";\nimport { EmailTest } from \"@/components/EmailTest\";\nimport { LoadingScreen, NavigationLoader } from \"@/components/ui/loading-screen\";\n\nimport { useState, useEffect } from \"react\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [isInitialLoad, setIsInitialLoad] = useState(true);\n\n  // Prevent page reloads by stabilizing the authentication state\n  useEffect(() => {\n    if (!isLoading) {\n      const timer = setTimeout(() => setIsInitialLoad(false), 500);\n      return () => clearTimeout(timer);\n    }\n  }, [isLoading]);\n\n  // Show loading screen during initial authentication check only\n  if (isLoading || isInitialLoad) {\n    return (\n      <LoadingScreen \n        message=\"Initializing Application\"\n        submessage=\"Setting up your passport photo workspace...\"\n        show={true}\n      />\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-muted\">\n      <Switch>\n        <Route path=\"/privacy-policy\" component={PrivacyPolicy} />\n        <Route path=\"/terms-of-service\" component={TermsOfService} />\n        {!isAuthenticated ? (\n          <>\n            <Route path=\"/\" component={Landing} />\n            <Route path=\"/test-email\" component={() => (\n              <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-muted flex items-center justify-center p-4\">\n                <EmailTest />\n              </div>\n            )} />\n          </>\n        ) : (\n          <>\n            <Route path=\"/workspace\" component={PassportGenerator} />\n            <Route path=\"/\">\n              {() => <Redirect to=\"/workspace\" />}\n            </Route>\n            <Route path=\"/test-email\" component={() => (\n              <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-muted flex items-center justify-center p-4\">\n                <EmailTest />\n              </div>\n            )} />\n          </>\n        )}\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nfunction App() {\n  const [isAppLoading, setIsAppLoading] = useState(true);\n\n  // Initial app loading state\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsAppLoading(false);\n    }, 1500); // Show for 1.5 seconds minimum\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  if (isAppLoading) {\n    return (\n      <LoadingScreen \n        message=\"Starting Passport Photo Generator\"\n        submessage=\"Preparing your professional photo creation workspace...\"\n        show={true}\n      />\n    );\n  }\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <NavigationLoader />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3455},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/auth/EmailLogin.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { emailLoginSchema, type EmailLogin } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2, Mail, Lock, Eye, EyeOff } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\n\ninterface EmailLoginProps {\n  onSuccess?: () => void;\n  onSwitchToSignup?: () => void;\n}\n\nexport function EmailLogin({ onSuccess, onSwitchToSignup }: EmailLoginProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<EmailLogin>({\n    resolver: zodResolver(emailLoginSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  const onSubmit = async (data: EmailLogin) => {\n    setIsLoading(true);\n    try {\n      const response = await apiRequest('POST', '/api/auth/login', data);\n      const result = await response.json();\n\n      if (result.success) {\n        // Invalidate auth cache to refetch user data\n        queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n        \n        toast({\n          title: 'Welcome back!',\n          description: result.message,\n        });\n        \n        onSuccess?.();\n      } else {\n        toast({\n          title: 'Login Failed',\n          description: result.message,\n          variant: 'destructive',\n        });\n      }\n    } catch (error: any) {\n      toast({\n        title: 'Login Failed',\n        description: error.message || 'An unexpected error occurred',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader className=\"space-y-1\">\n        <CardTitle className=\"text-2xl font-bold text-center\">Welcome Back</CardTitle>\n        <CardDescription className=\"text-center\">\n          Sign in to your Passport Photo Maker account\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input \n                        type=\"email\" \n                        placeholder=\"john@example.com\" \n                        className=\"pl-10\" \n                        {...field} \n                      />\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input \n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Enter your password\" \n                        className=\"pl-10 pr-10\" \n                        {...field} \n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        className=\"absolute right-3 top-3 h-4 w-4 text-muted-foreground hover:text-foreground\"\n                      >\n                        {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </button>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n              {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Sign In\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n\n      <CardFooter className=\"flex flex-col space-y-2\">\n        <div className=\"text-sm text-muted-foreground text-center\">\n          Don't have an account?{' '}\n          <button \n            onClick={onSwitchToSignup}\n            className=\"text-primary hover:underline font-medium\"\n          >\n            Create account\n          </button>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":5128},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/hooks/usePageTransition.ts":{"content":"import { useState, useEffect } from 'react';\n\nexport function usePageTransition() {\n  const [isTransitioning, setIsTransitioning] = useState(false);\n  const [message, setMessage] = useState('');\n\n  const startTransition = (transitionMessage: string) => {\n    setMessage(transitionMessage);\n    setIsTransitioning(true);\n  };\n\n  const endTransition = () => {\n    setIsTransitioning(false);\n    setMessage('');\n  };\n\n  // Auto-end transition after 5 seconds to prevent getting stuck\n  useEffect(() => {\n    if (isTransitioning) {\n      const timeout = setTimeout(() => {\n        endTransition();\n      }, 5000);\n      \n      return () => clearTimeout(timeout);\n    }\n  }, [isTransitioning]);\n\n  return {\n    isTransitioning,\n    message,\n    startTransition,\n    endTransition\n  };\n}","size_bytes":781},"client/src/components/ui/file-upload.tsx":{"content":"import { useCallback, useState, useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { Upload, X, FileImage, Loader2, Clipboard } from 'lucide-react';\nimport { UploadedImage } from '@shared/schema';\n\ntype FileUploadProps = {\n  onFileUpload: (file: File) => void;\n  isUploading?: boolean;\n  uploadedFile?: UploadedImage | null;\n  onRemoveFile?: () => void;\n  className?: string;\n};\n\nexport function FileUpload({\n  onFileUpload,\n  isUploading = false,\n  uploadedFile,\n  onRemoveFile,\n  className\n}: FileUploadProps) {\n  const [showPasteHint, setShowPasteHint] = useState(false);\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    if (acceptedFiles.length > 0) {\n      onFileUpload(acceptedFiles[0]);\n    }\n  }, [onFileUpload]);\n\n  // Handle paste from clipboard (disabled automatic paste)\n  const handlePaste = useCallback(async (e: ClipboardEvent) => {\n    // Disabled automatic paste behavior to prevent file explorer from opening\n    // Users can use the Paste button instead\n    return;\n  }, [onFileUpload, isUploading, uploadedFile]);\n\n  // Handle paste manually through button click\n  const handlePasteFromClipboard = useCallback(async () => {\n    try {\n      const clipboardItems = await navigator.clipboard.read();\n      for (const clipboardItem of clipboardItems) {\n        for (const type of clipboardItem.types) {\n          if (type.startsWith('image/')) {\n            const blob = await clipboardItem.getType(type);\n            const file = new File([blob], `pasted-image-${Date.now()}.png`, {\n              type: blob.type || 'image/png'\n            });\n            onFileUpload(file);\n            return;\n          }\n        }\n      }\n      setShowPasteHint(true);\n      setTimeout(() => setShowPasteHint(false), 3000);\n    } catch (error) {\n      console.log('Failed to read clipboard:', error);\n      setShowPasteHint(true);\n      setTimeout(() => setShowPasteHint(false), 3000);\n    }\n  }, [onFileUpload]);\n\n  // Disabled automatic paste event listener to prevent file explorer opening\n  // Users can still paste using the manual Paste button\n  useEffect(() => {\n    // Event listener removed to prevent automatic paste behavior\n    return () => {};\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'image/jpeg': ['.jpg', '.jpeg'],\n      'image/png': ['.png'],\n    },\n    maxFiles: 1,\n    maxSize: 10 * 1024 * 1024, // 10MB\n  });\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  if (uploadedFile) {\n    return (\n      <div className=\"mt-4\">\n        <div className=\"flex items-center space-x-3 p-3 bg-gray-50 dark:bg-slate-900 rounded-lg border dark:border-slate-700\">\n          <FileImage className=\"h-8 w-8 text-gray-400 dark:text-white\" />\n          <div className=\"flex-1\">\n            <p className=\"font-medium text-gray-900 dark:text-white\">{uploadedFile.originalName}</p>\n            <p className=\"text-sm text-gray-500 dark:text-slate-300\">{formatFileSize(uploadedFile.size)}</p>\n          </div>\n          {onRemoveFile && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onRemoveFile}\n              className=\"text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\n      \"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center transition-colors\",\n      isDragActive && \"border-primary bg-primary/5\",\n      isUploading && \"pointer-events-none opacity-50\",\n      className\n    )}>\n      <div className=\"space-y-4\">\n        <div className=\"bg-gray-50 dark:bg-black rounded-full w-16 h-16 flex items-center justify-center mx-auto border dark:border-slate-600\">\n          {isUploading ? (\n            <Loader2 className=\"h-8 w-8 text-gray-400 dark:text-slate-400 animate-spin\" />\n          ) : (\n            <Upload className=\"h-8 w-8 text-gray-400 dark:text-slate-400\" />\n          )}\n        </div>\n        \n        {/* Dropzone area - only this section triggers file dialog */}\n        <div\n          {...getRootProps()}\n          className=\"cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-800 rounded-lg p-4 transition-colors\"\n        >\n          <input {...getInputProps()} />\n          <p className=\"text-gray-600 dark:text-slate-300 font-medium\">\n            {isDragActive ? 'Drop your photo here' : 'Drag and drop your photo here'}\n          </p>\n          <p className=\"text-sm text-gray-500 dark:text-slate-400\">or click here to browse files</p>\n        </div>\n\n        {/* Buttons area - separate from dropzone */}\n        <div className=\"flex space-x-3 justify-center\">\n          <Button\n            type=\"button\"\n            onClick={() => {\n              // Manually trigger file input\n              const input = document.querySelector('input[type=\"file\"]') as HTMLInputElement;\n              input?.click();\n            }}\n            disabled={isUploading}\n            className=\"bg-primary text-white hover:bg-blue-600\"\n          >\n            {isUploading ? 'Uploading...' : 'Choose File'}\n          </Button>\n          <Button\n            type=\"button\"\n            onClick={(e) => {\n              e.stopPropagation(); // Prevent any parent click handlers\n              handlePasteFromClipboard();\n            }}\n            disabled={isUploading}\n            variant=\"outline\"\n            className=\"border-primary text-primary hover:bg-primary/10\"\n          >\n            <Clipboard className=\"h-4 w-4 mr-2\" />\n            Paste\n          </Button>\n        </div>\n        {showPasteHint && (\n          <div className=\"text-xs text-amber-600 dark:text-amber-400 bg-amber-50 dark:bg-amber-900/30 border border-amber-200 dark:border-amber-700/50 rounded p-2\">\n            üìã No image found in clipboard. Copy an image first, then click Paste.\n          </div>\n        )}\n        <p className=\"text-xs text-gray-400 dark:text-slate-500\">\n          Supports JPG, PNG, JPEG up to 10MB ‚Ä¢ Use Paste button for clipboard images\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6487},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  \n  return session({\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":3952},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-7 w-12 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-gradient-primary data-[state=unchecked]:bg-input hover:shadow-md\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-white dark:bg-white shadow-lg ring-0 transition-all data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0.5\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1189},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/auth/EmailSignup.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { emailSignupSchema, type EmailSignup } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2, Mail, User, Lock, Eye, EyeOff } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { EmailVerification } from './EmailVerification.tsx';\n\ninterface EmailSignupProps {\n  onSuccess?: () => void;\n  onSwitchToLogin?: () => void;\n}\n\nexport function EmailSignup({ onSuccess, onSwitchToLogin }: EmailSignupProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showVerification, setShowVerification] = useState(false);\n  const [registeredEmail, setRegisteredEmail] = useState('');\n  const { toast } = useToast();\n\n  const form = useForm<EmailSignup>({\n    resolver: zodResolver(emailSignupSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n      firstName: '',\n      lastName: '',\n    },\n  });\n\n  const onSubmit = async (data: EmailSignup) => {\n    setIsLoading(true);\n    try {\n      const response = await apiRequest('POST', '/api/auth/signup', data);\n      const result = await response.json();\n\n      if (result.success) {\n        setRegisteredEmail(data.email);\n        setShowVerification(true);\n        toast({\n          title: '‚ú® Account Created Successfully!',\n          description: 'Please check your email for a verification code to complete your registration.',\n          duration: 5000,\n        });\n      } else {\n        toast({\n          title: 'Registration Failed',\n          description: result.message,\n          variant: 'destructive',\n        });\n      }\n    } catch (error: any) {\n      toast({\n        title: 'Registration Failed',\n        description: error.message || 'An unexpected error occurred',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (showVerification) {\n    return (\n      <EmailVerification\n        email={registeredEmail}\n        onSuccess={onSuccess}\n        onBack={() => setShowVerification(false)}\n      />\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader className=\"space-y-1\">\n        <CardTitle className=\"text-2xl font-bold text-center\">Create Account</CardTitle>\n        <CardDescription className=\"text-center\">\n          Join thousands creating professional passport photos\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"firstName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>First Name</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        <Input placeholder=\"John\" className=\"pl-10\" {...field} />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"lastName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Last Name</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        <Input placeholder=\"Doe\" className=\"pl-10\" {...field} />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input \n                        type=\"email\" \n                        placeholder=\"john@example.com\" \n                        className=\"pl-10\" \n                        {...field} \n                      />\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input \n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"At least 8 characters\" \n                        className=\"pl-10 pr-10\" \n                        {...field} \n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        className=\"absolute right-3 top-3 h-4 w-4 text-muted-foreground hover:text-foreground\"\n                      >\n                        {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </button>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n              {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Create Account\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n\n      <CardFooter className=\"flex flex-col space-y-2\">\n        <div className=\"text-sm text-muted-foreground text-center\">\n          Already have an account?{' '}\n          <button \n            onClick={onSwitchToLogin}\n            className=\"text-primary hover:underline font-medium\"\n          >\n            Sign in\n          </button>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":6985},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"server/db.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\nimport { secretsManager } from './secretsManager';\n\n// Get DATABASE_URL from environment or secrets manager\nlet databaseUrl = process.env.DATABASE_URL;\n\nif (!databaseUrl) {\n  // Try to get from secrets manager\n  databaseUrl = secretsManager.getSecret('DATABASE_URL');\n}\n\nif (!databaseUrl) {\n  console.error('\\n' + secretsManager.generateSetupInstructions());\n  throw new Error(\n    \"DATABASE_URL must be set. Please check the setup instructions above.\"\n  );\n}\n\n// Save to secrets for future use\nif (databaseUrl && !secretsManager.hasSecret('DATABASE_URL')) {\n  secretsManager.setSecret('DATABASE_URL', databaseUrl);\n}\n\nexport const pool = new Pool({ connectionString: databaseUrl });\nexport const db = drizzle(pool, { schema });","size_bytes":850},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-lg text-sm font-semibold ring-offset-background transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 active:scale-95\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground shadow-md hover:bg-primary/90 hover:shadow-lg hover:scale-105\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-md hover:bg-destructive/90 hover:shadow-lg hover:scale-105\",\n        outline:\n          \"border-2 border-primary/30 bg-background hover:bg-primary/5 hover:border-primary/50 hover:shadow-md\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80 hover:shadow-md\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground hover:shadow-sm\",\n        link: \"text-primary underline-offset-4 hover:underline hover:text-primary/80\",\n      },\n      size: {\n        default: \"h-11 px-5 py-2.5\",\n        sm: \"h-9 rounded-lg px-3.5 text-xs\",\n        lg: \"h-12 rounded-lg px-9 text-base\",\n        icon: \"h-11 w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2120},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-semibold leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-foreground/90\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":731},"server/emailService.ts":{"content":"import { freeEmailService } from './emailServiceFree';\n\nexport class EmailService {\n  // Generate a 6-digit verification code\n  static generateVerificationCode(): string {\n    return Math.floor(100000 + Math.random() * 900000).toString();\n  }\n\n  // Send verification email using free service (console fallback)\n  static async sendVerificationEmail(email: string, verificationCode: string): Promise<boolean> {\n    return await freeEmailService.sendVerificationEmail(email, verificationCode);\n  }\n\n  // Send welcome email using free service (console fallback)\n  static async sendWelcomeEmail(email: string, firstName: string): Promise<boolean> {\n    return await freeEmailService.sendWelcomeEmail(email, firstName);\n  }\n}","size_bytes":719},"client/src/components/ui/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/contexts/ThemeContext\";\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"outline\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      className=\"relative transition-colors duration-200 hover:bg-accent\"\n    >\n      {/* Simplified icons with faster transitions */}\n      <Sun \n        className={`h-5 w-5 transition-opacity duration-200 text-amber-500 ${\n          theme === 'light' ? 'opacity-100' : 'opacity-0'\n        } absolute`}\n      />\n      \n      <Moon \n        className={`h-5 w-5 transition-opacity duration-200 text-slate-700 dark:text-slate-300 ${\n          theme === 'dark' ? 'opacity-100' : 'opacity-0'\n        } absolute`}\n      />\n      \n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}","size_bytes":912},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border border-border/50 bg-card text-card-foreground shadow-card transition-all duration-300 hover:shadow-elevated hover:border-border\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-bold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1943},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const isFormData = data instanceof FormData;\n  \n  const res = await fetch(url, {\n    method,\n    headers: !isFormData && data ? { \"Content-Type\": \"application/json\" } : {},\n    body: isFormData ? data : (data ? JSON.stringify(data) : undefined),\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1470},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115}},"version":2}